
MEGU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009d10  08009d10  0000ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d90  08009d90  0000b0d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d90  08009d90  0000ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d98  08009d98  0000b0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d98  08009d98  0000ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d9c  08009d9c  0000ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08009da0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200000d8  08009e78  0000b0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08009e78  0000b5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001386d  00000000  00000000  0000b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3b  00000000  00000000  0001e975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000215b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e43  00000000  00000000  000227d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e19  00000000  00000000  0002361b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dd6  00000000  00000000  00047434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c72  00000000  00000000  0005f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  00134ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0013a49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000d8 	.word	0x200000d8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009cf4 	.word	0x08009cf4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000dc 	.word	0x200000dc
 8000204:	08009cf4 	.word	0x08009cf4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_ldivmod>:
 8000b80:	b97b      	cbnz	r3, 8000ba2 <__aeabi_ldivmod+0x22>
 8000b82:	b972      	cbnz	r2, 8000ba2 <__aeabi_ldivmod+0x22>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bfbe      	ittt	lt
 8000b88:	2000      	movlt	r0, #0
 8000b8a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b8e:	e006      	blt.n	8000b9e <__aeabi_ldivmod+0x1e>
 8000b90:	bf08      	it	eq
 8000b92:	2800      	cmpeq	r0, #0
 8000b94:	bf1c      	itt	ne
 8000b96:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9e:	f000 b9b5 	b.w	8000f0c <__aeabi_idiv0>
 8000ba2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000baa:	2900      	cmp	r1, #0
 8000bac:	db09      	blt.n	8000bc2 <__aeabi_ldivmod+0x42>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db1a      	blt.n	8000be8 <__aeabi_ldivmod+0x68>
 8000bb2:	f000 f84d 	bl	8000c50 <__udivmoddi4>
 8000bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4770      	bx	lr
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db1b      	blt.n	8000c04 <__aeabi_ldivmod+0x84>
 8000bcc:	f000 f840 	bl	8000c50 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	4770      	bx	lr
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	f000 f82f 	bl	8000c50 <__udivmoddi4>
 8000bf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfa:	b004      	add	sp, #16
 8000bfc:	4240      	negs	r0, r0
 8000bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c02:	4770      	bx	lr
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	f000 f821 	bl	8000c50 <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f001 facb 	bl	80024bc <null_ptr_check>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d133      	bne.n	8000f9a <bme280_init+0x8a>
		while (try_count) {
 8000f32:	e028      	b.n	8000f86 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f34:	f107 010d 	add.w	r1, r7, #13
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	20d0      	movs	r0, #208	@ 0xd0
 8000f3e:	f000 f832 	bl	8000fa6 <bme280_get_regs>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d114      	bne.n	8000f78 <bme280_init+0x68>
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	2b60      	cmp	r3, #96	@ 0x60
 8000f52:	d111      	bne.n	8000f78 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f54:	7b7a      	ldrb	r2, [r7, #13]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f978 	bl	8001250 <bme280_soft_reset>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d110      	bne.n	8000f8e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 f919 	bl	80021a4 <get_calib_data>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000f76:	e00a      	b.n	8000f8e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	4798      	blx	r3
			--try_count;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1d3      	bne.n	8000f34 <bme280_init+0x24>
 8000f8c:	e000      	b.n	8000f90 <bme280_init+0x80>
				break;
 8000f8e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000f96:	23fe      	movs	r3, #254	@ 0xfe
 8000f98:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fa6:	b590      	push	{r4, r7, lr}
 8000fa8:	b087      	sub	sp, #28
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 fa7f 	bl	80024bc <null_ptr_check>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d117      	bne.n	8000ffa <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d003      	beq.n	8000fda <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fd8:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685c      	ldr	r4, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7858      	ldrb	r0, [r3, #1]
 8000fe2:	89bb      	ldrh	r3, [r7, #12]
 8000fe4:	7bf9      	ldrb	r1, [r7, #15]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000ff6:	23fc      	movs	r3, #252	@ 0xfc
 8000ff8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}

08001006 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001006:	b590      	push	{r4, r7, lr}
 8001008:	b08d      	sub	sp, #52	@ 0x34
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d901      	bls.n	8001020 <bme280_set_regs+0x1a>
		len = 10;
 800101c:	230a      	movs	r3, #10
 800101e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f001 fa4b 	bl	80024bc <null_ptr_check>
 8001026:	4603      	mov	r3, r0
 8001028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800102c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001030:	2b00      	cmp	r3, #0
 8001032:	d156      	bne.n	80010e2 <bme280_set_regs+0xdc>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d053      	beq.n	80010e2 <bme280_set_regs+0xdc>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d050      	beq.n	80010e2 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d049      	beq.n	80010da <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d01a      	beq.n	800108a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001054:	2300      	movs	r3, #0
 8001056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800105a:	e011      	b.n	8001080 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800105c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800106a:	68f9      	ldr	r1, [r7, #12]
 800106c:	440b      	add	r3, r1
 800106e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800107a:	3301      	adds	r3, #1
 800107c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001080:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3e8      	bcc.n	800105c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d90d      	bls.n	80010ac <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f107 0114 	add.w	r1, r7, #20
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f001 f8c8 	bl	800222e <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	3b01      	subs	r3, #1
 80010a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80010aa:	e001      	b.n	80010b0 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689c      	ldr	r4, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	7858      	ldrb	r0, [r3, #1]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	7819      	ldrb	r1, [r3, #0]
 80010bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010be:	f107 0214 	add.w	r2, r7, #20
 80010c2:	47a0      	blx	r4
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80010d2:	23fc      	movs	r3, #252	@ 0xfc
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80010d8:	e007      	b.n	80010ea <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80010da:	23fd      	movs	r3, #253	@ 0xfd
 80010dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80010e0:	e003      	b.n	80010ea <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80010e2:	23ff      	movs	r3, #255	@ 0xff
 80010e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010e8:	e000      	b.n	80010ec <bme280_set_regs+0xe6>
		if (len != 0) {
 80010ea:	bf00      	nop
	}


	return rslt;
 80010ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3734      	adds	r7, #52	@ 0x34
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f001 f9d9 	bl	80024bc <null_ptr_check>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13f      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001116:	f107 030e 	add.w	r3, r7, #14
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f874 	bl	800120a <bme280_get_sensor_mode>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <bme280_set_sensor_settings+0x46>
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f000 fb36 	bl	80017a6 <put_device_to_sleep>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d127      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4619      	mov	r1, r3
 800114a:	2007      	movs	r0, #7
 800114c:	f001 f99a 	bl	8002484 <are_settings_changed>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f972 	bl	800144a <set_osr_settings>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2018      	movs	r0, #24
 8001178:	f001 f984 	bl	8002484 <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f9f9 	bl	8001584 <set_filter_standby_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	6039      	str	r1, [r7, #0]
 80011ac:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f001 f984 	bl	80024bc <null_ptr_check>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11e      	bne.n	80011fe <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011c0:	f107 030e 	add.w	r3, r7, #14
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f81f 	bl	800120a <bme280_get_sensor_mode>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <bme280_set_sensor_mode+0x46>
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f000 fae1 	bl	80017a6 <put_device_to_sleep>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 faa3 	bl	8001740 <write_power_mode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f001 f951 	bl	80024bc <null_ptr_check>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	20f4      	movs	r0, #244	@ 0xf4
 800122e:	f7ff feba 	bl	8000fa6 <bme280_get_regs>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001258:	23e0      	movs	r3, #224	@ 0xe0
 800125a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800125c:	23b6      	movs	r3, #182	@ 0xb6
 800125e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 f92b 	bl	80024bc <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10d      	bne.n	800128e <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001272:	f107 010d 	add.w	r1, r7, #13
 8001276:	f107 000e 	add.w	r0, r7, #14
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f7ff fec2 	bl	8001006 <bme280_set_regs>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2002      	movs	r0, #2
 800128c:	4798      	blx	r3
	}

	return rslt;
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b08a      	sub	sp, #40	@ 0x28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 f8fd 	bl	80024bc <null_ptr_check>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d124      	bne.n	800131a <bme280_get_sensor_data+0x80>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d021      	beq.n	800131a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80012d6:	f107 011c 	add.w	r1, r7, #28
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2208      	movs	r2, #8
 80012de:	20f7      	movs	r0, #247	@ 0xf7
 80012e0:	f7ff fe61 	bl	8000fa6 <bme280_get_regs>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 80012ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f815 	bl	800132c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3310      	adds	r3, #16
 8001306:	f107 0110 	add.w	r1, r7, #16
 800130a:	7bf8      	ldrb	r0, [r7, #15]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	f000 f853 	bl	80013b8 <bme280_compensate_data>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8001318:	e002      	b.n	8001320 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800131a:	23ff      	movs	r3, #255	@ 0xff
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001320:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001324:	4618      	mov	r0, r3
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	031b      	lsls	r3, r3, #12
 800133c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3302      	adds	r3, #2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3303      	adds	r3, #3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	031b      	lsls	r3, r3, #12
 800136a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3305      	adds	r3, #5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	b2db      	uxtb	r3, r3
 8001380:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	431a      	orrs	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3306      	adds	r3, #6
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3307      	adds	r3, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d033      	beq.n	800143a <bme280_compensate_data+0x82>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d030      	beq.n	800143a <bme280_compensate_data+0x82>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02d      	beq.n	800143a <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f000 fa1f 	bl	8001840 <compensate_temperature>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f000 fa75 	bl	8001904 <compensate_pressure>
 800141a:	4602      	mov	r2, r0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f000 fe0d 	bl	800204c <compensate_humidity>
 8001432:	4602      	mov	r2, r0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001438:	e001      	b.n	800143e <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800143a:	23ff      	movs	r3, #255	@ 0xff
 800143c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800143e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001458:	2301      	movs	r3, #1
 800145a:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f000 f815 	bl	8001498 <set_osr_humidity_settings>
 800146e:	4603      	mov	r3, r0
 8001470:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f842 	bl	800150c <set_osr_press_temp_settings>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]

	return rslt;
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014a2:	23f2      	movs	r3, #242	@ 0xf2
 80014a4:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80014b2:	f107 010e 	add.w	r1, r7, #14
 80014b6:	f107 000c 	add.w	r0, r7, #12
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	f7ff fda2 	bl	8001006 <bme280_set_regs>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80014ce:	23f4      	movs	r3, #244	@ 0xf4
 80014d0:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80014d2:	7b38      	ldrb	r0, [r7, #12]
 80014d4:	f107 010d 	add.w	r1, r7, #13
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	f7ff fd63 	bl	8000fa6 <bme280_get_regs>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80014ec:	f107 010d 	add.w	r1, r7, #13
 80014f0:	f107 000c 	add.w	r0, r7, #12
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f7ff fd85 	bl	8001006 <bme280_set_regs>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800151a:	23f4      	movs	r3, #244	@ 0xf4
 800151c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800151e:	7db8      	ldrb	r0, [r7, #22]
 8001520:	f107 0115 	add.w	r1, r7, #21
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f7ff fd3d 	bl	8000fa6 <bme280_get_regs>
 800152c:	4603      	mov	r3, r0
 800152e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d11f      	bne.n	8001578 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001542:	f107 0315 	add.w	r3, r7, #21
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f88e 	bl	800166a <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001558:	f107 0315 	add.w	r3, r7, #21
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f8a0 	bl	80016a4 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001564:	f107 0115 	add.w	r1, r7, #21
 8001568:	f107 0016 	add.w	r0, r7, #22
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f7ff fd49 	bl	8001006 <bme280_set_regs>
 8001574:	4603      	mov	r3, r0
 8001576:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001592:	23f5      	movs	r3, #245	@ 0xf5
 8001594:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001596:	7db8      	ldrb	r0, [r7, #22]
 8001598:	f107 0115 	add.w	r1, r7, #21
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f7ff fd01 	bl	8000fa6 <bme280_get_regs>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11f      	bne.n	80015f0 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80015ba:	f107 0315 	add.w	r3, r7, #21
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f81b 	bl	80015fc <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80015d0:	f107 0315 	add.w	r3, r7, #21
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f82d 	bl	8001636 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015dc:	f107 0115 	add.w	r1, r7, #21
 80015e0:	f107 0016 	add.w	r0, r7, #22
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f7ff fd0d 	bl	8001006 <bme280_set_regs>
 80015ec:	4603      	mov	r3, r0
 80015ee:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b25b      	sxtb	r3, r3
 800160c:	f023 031c 	bic.w	r3, r3, #28
 8001610:	b25a      	sxtb	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	b25b      	sxtb	r3, r3
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	b25b      	sxtb	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b25b      	sxtb	r3, r3
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	701a      	strb	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	b25a      	sxtb	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	015b      	lsls	r3, r3, #5
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25b      	sxtb	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f023 031c 	bic.w	r3, r3, #28
 800167e:	b25a      	sxtb	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	b25b      	sxtb	r3, r3
 8001688:	f003 031c 	and.w	r3, r3, #28
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	701a      	strb	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	015b      	lsls	r3, r3, #5
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	701a      	strb	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	109b      	asrs	r3, r3, #2
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3302      	adds	r3, #2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2da      	uxtb	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	109b      	asrs	r3, r3, #2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	b2da      	uxtb	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	711a      	strb	r2, [r3, #4]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800174c:	23f4      	movs	r3, #244	@ 0xf4
 800174e:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001750:	7bb8      	ldrb	r0, [r7, #14]
 8001752:	f107 010d 	add.w	r1, r7, #13
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fc24 	bl	8000fa6 <bme280_get_regs>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d117      	bne.n	800179a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	b25b      	sxtb	r3, r3
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	b25a      	sxtb	r2, r3
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b25b      	sxtb	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001786:	f107 010d 	add.w	r1, r7, #13
 800178a:	f107 000e 	add.w	r0, r7, #14
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	f7ff fc38 	bl	8001006 <bme280_set_regs>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80017ae:	f107 0110 	add.w	r1, r7, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	20f2      	movs	r0, #242	@ 0xf2
 80017b8:	f7ff fbf5 	bl	8000fa6 <bme280_get_regs>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80017c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d118      	bne.n	80017fa <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff80 	bl	80016d8 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fd39 	bl	8001250 <bme280_soft_reset>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80017e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f808 	bl	8001806 <reload_device_settings>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80017fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	201f      	movs	r0, #31
 8001816:	f7ff fe18 	bl	800144a <set_osr_settings>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	201f      	movs	r0, #31
 800182c:	f7ff feaa 	bl	8001584 <set_filter_standby_settings>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800184a:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <compensate_temperature+0xc0>)
 800184c:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 800184e:	f242 1334 	movw	r3, #8500	@ 0x2134
 8001852:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	0052      	lsls	r2, r2, #1
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	da01      	bge.n	800187a <compensate_temperature+0x3a>
 8001876:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800187a:	12db      	asrs	r3, r3, #11
 800187c:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	fb03 f303 	mul.w	r3, r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	da01      	bge.n	800189a <compensate_temperature+0x5a>
 8001896:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800189a:	131b      	asrs	r3, r3, #12
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da02      	bge.n	80018b2 <compensate_temperature+0x72>
 80018ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80018b0:	333f      	adds	r3, #63	@ 0x3f
 80018b2:	139b      	asrs	r3, r3, #14
 80018b4:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	441a      	add	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3380      	adds	r3, #128	@ 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da00      	bge.n	80018d2 <compensate_temperature+0x92>
 80018d0:	33ff      	adds	r3, #255	@ 0xff
 80018d2:	121b      	asrs	r3, r3, #8
 80018d4:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	429a      	cmp	r2, r3
 80018dc:	da02      	bge.n	80018e4 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e005      	b.n	80018f0 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dd01      	ble.n	80018f0 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	61fb      	str	r3, [r7, #28]

	return temperature;
 80018f0:	69fb      	ldr	r3, [r7, #28]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	fffff060 	.word	0xfffff060

08001904 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b0ea      	sub	sp, #424	@ 0x1a8
 800190a:	af00      	add	r7, sp, #0
 800190c:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001910:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001914:	4bbf      	ldr	r3, [pc, #764]	@ (8001c14 <compensate_pressure+0x310>)
 8001916:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 800191a:	4bbf      	ldr	r3, [pc, #764]	@ (8001c18 <compensate_pressure+0x314>)
 800191c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001920:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	17da      	asrs	r2, r3, #31
 8001928:	4698      	mov	r8, r3
 800192a:	4691      	mov	r9, r2
 800192c:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001930:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001934:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001938:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800193c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001940:	fb03 f102 	mul.w	r1, r3, r2
 8001944:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001948:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	18ca      	adds	r2, r1, r3
 8001952:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001956:	fba3 4503 	umull	r4, r5, r3, r3
 800195a:	1953      	adds	r3, r2, r5
 800195c:	461d      	mov	r5, r3
 800195e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001962:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001966:	b21b      	sxth	r3, r3
 8001968:	17da      	asrs	r2, r3, #31
 800196a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800196e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001972:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001976:	4603      	mov	r3, r0
 8001978:	fb03 f205 	mul.w	r2, r3, r5
 800197c:	460b      	mov	r3, r1
 800197e:	fb04 f303 	mul.w	r3, r4, r3
 8001982:	4413      	add	r3, r2
 8001984:	4602      	mov	r2, r0
 8001986:	fba4 1202 	umull	r1, r2, r4, r2
 800198a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800198e:	460a      	mov	r2, r1
 8001990:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001994:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001998:	4413      	add	r3, r2
 800199a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800199e:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 80019a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 80019a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80019aa:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	17da      	asrs	r2, r3, #31
 80019b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80019ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80019be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019c2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80019c6:	462a      	mov	r2, r5
 80019c8:	fb02 f203 	mul.w	r2, r2, r3
 80019cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019d0:	4621      	mov	r1, r4
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	441a      	add	r2, r3
 80019d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019dc:	4621      	mov	r1, r4
 80019de:	fba3 1301 	umull	r1, r3, r3, r1
 80019e2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80019e6:	460b      	mov	r3, r1
 80019e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80019ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001a02:	462b      	mov	r3, r5
 8001a04:	0459      	lsls	r1, r3, #17
 8001a06:	4623      	mov	r3, r4
 8001a08:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	0458      	lsls	r0, r3, #17
 8001a10:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001a14:	1814      	adds	r4, r2, r0
 8001a16:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001a1a:	414b      	adcs	r3, r1
 8001a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001a20:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001a24:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001a28:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	17da      	asrs	r2, r3, #31
 8001a34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001a38:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a48:	00d9      	lsls	r1, r3, #3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001a50:	1814      	adds	r4, r2, r0
 8001a52:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001a56:	414b      	adcs	r3, r1
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001a5c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001a60:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001a64:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a68:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a6c:	fb03 f102 	mul.w	r1, r3, r2
 8001a70:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a74:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	18ca      	adds	r2, r1, r3
 8001a7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a82:	fba3 1303 	umull	r1, r3, r3, r3
 8001a86:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001a90:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a94:	18d3      	adds	r3, r2, r3
 8001a96:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001a9a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	17da      	asrs	r2, r3, #31
 8001aa6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001aaa:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001aae:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001ab8:	4642      	mov	r2, r8
 8001aba:	fb02 f203 	mul.w	r2, r2, r3
 8001abe:	464b      	mov	r3, r9
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4622      	mov	r2, r4
 8001aca:	4641      	mov	r1, r8
 8001acc:	fba2 1201 	umull	r1, r2, r2, r1
 8001ad0:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001ada:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001ade:	4413      	add	r3, r2
 8001ae0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001ae4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da09      	bge.n	8001b00 <compensate_pressure+0x1fc>
 8001aec:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001af0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001af4:	f143 0300 	adc.w	r3, r3, #0
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001afc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0a10      	lsrs	r0, r2, #8
 8001b0a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b0e:	1219      	asrs	r1, r3, #8
 8001b10:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	17da      	asrs	r2, r3, #31
 8001b1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b28:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001b2c:	464a      	mov	r2, r9
 8001b2e:	fb02 f203 	mul.w	r2, r2, r3
 8001b32:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b36:	4644      	mov	r4, r8
 8001b38:	fb04 f303 	mul.w	r3, r4, r3
 8001b3c:	441a      	add	r2, r3
 8001b3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b42:	4644      	mov	r4, r8
 8001b44:	fba3 4304 	umull	r4, r3, r3, r4
 8001b48:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b52:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001b68:	464c      	mov	r4, r9
 8001b6a:	0323      	lsls	r3, r4, #12
 8001b6c:	4644      	mov	r4, r8
 8001b6e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b72:	4644      	mov	r4, r8
 8001b74:	0322      	lsls	r2, r4, #12
 8001b76:	1884      	adds	r4, r0, r2
 8001b78:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001b7c:	eb41 0303 	adc.w	r3, r1, r3
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b84:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b88:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b94:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001b98:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001b9c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ba0:	1884      	adds	r4, r0, r2
 8001ba2:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001ba6:	eb41 0303 	adc.w	r3, r1, r3
 8001baa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001bae:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bb2:	88db      	ldrh	r3, [r3, #6]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001bbc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001bc0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001bca:	4642      	mov	r2, r8
 8001bcc:	fb02 f203 	mul.w	r2, r2, r3
 8001bd0:	464b      	mov	r3, r9
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	4622      	mov	r2, r4
 8001bdc:	4641      	mov	r1, r8
 8001bde:	fba2 1201 	umull	r1, r2, r2, r1
 8001be2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001be6:	460a      	mov	r2, r1
 8001be8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001bec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bf6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0e      	bge.n	8001c1c <compensate_pressure+0x318>
 8001bfe:	1e51      	subs	r1, r2, #1
 8001c00:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001c04:	f143 0301 	adc.w	r3, r3, #1
 8001c08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c10:	e004      	b.n	8001c1c <compensate_pressure+0x318>
 8001c12:	bf00      	nop
 8001c14:	002dc6c0 	.word	0x002dc6c0
 8001c18:	00a7d8c0 	.word	0x00a7d8c0
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	1058      	asrs	r0, r3, #1
 8001c26:	17d9      	asrs	r1, r3, #31
 8001c28:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001c2c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f000 81fc 	beq.w	800202e <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001c36:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c40:	2200      	movs	r2, #0
 8001c42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c46:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c4a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001c4e:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001c52:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	07d9      	lsls	r1, r3, #31
 8001c60:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c64:	07d0      	lsls	r0, r2, #31
 8001c66:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001c6a:	1a84      	subs	r4, r0, r2
 8001c6c:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001c70:	eb61 0303 	sbc.w	r3, r1, r3
 8001c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c78:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	462b      	mov	r3, r5
 8001c80:	1891      	adds	r1, r2, r2
 8001c82:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001c84:	415b      	adcs	r3, r3
 8001c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c88:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	1851      	adds	r1, r2, r1
 8001c90:	6739      	str	r1, [r7, #112]	@ 0x70
 8001c92:	4629      	mov	r1, r5
 8001c94:	414b      	adcs	r3, r1
 8001c96:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	018b      	lsls	r3, r1, #6
 8001ca8:	4641      	mov	r1, r8
 8001caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cae:	4641      	mov	r1, r8
 8001cb0:	018a      	lsls	r2, r1, #6
 8001cb2:	4641      	mov	r1, r8
 8001cb4:	1889      	adds	r1, r1, r2
 8001cb6:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001cb8:	4649      	mov	r1, r9
 8001cba:	eb43 0101 	adc.w	r1, r3, r1
 8001cbe:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001ccc:	4649      	mov	r1, r9
 8001cce:	008b      	lsls	r3, r1, #2
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	008a      	lsls	r2, r1, #2
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	189b      	adds	r3, r3, r2
 8001ce4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	462a      	mov	r2, r5
 8001cea:	eb42 0303 	adc.w	r3, r2, r3
 8001cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001cfc:	4649      	mov	r1, r9
 8001cfe:	008b      	lsls	r3, r1, #2
 8001d00:	4641      	mov	r1, r8
 8001d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d06:	4641      	mov	r1, r8
 8001d08:	008a      	lsls	r2, r1, #2
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4622      	mov	r2, r4
 8001d12:	189b      	adds	r3, r3, r2
 8001d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d18:	462b      	mov	r3, r5
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	eb42 0303 	adc.w	r3, r2, r3
 8001d20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d24:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d2c:	f7fe ff28 	bl	8000b80 <__aeabi_ldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001d38:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	17da      	asrs	r2, r3, #31
 8001d44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d48:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d4c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da08      	bge.n	8001d66 <compensate_pressure+0x462>
 8001d54:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001d58:	1851      	adds	r1, r2, r1
 8001d5a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d5c:	f143 0300 	adc.w	r3, r3, #0
 8001d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	0b50      	lsrs	r0, r2, #13
 8001d70:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d74:	1359      	asrs	r1, r3, #13
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d7e:	4629      	mov	r1, r5
 8001d80:	fb02 f001 	mul.w	r0, r2, r1
 8001d84:	4621      	mov	r1, r4
 8001d86:	fb01 f103 	mul.w	r1, r1, r3
 8001d8a:	4401      	add	r1, r0
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	fba0 2302 	umull	r2, r3, r0, r2
 8001d92:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001d96:	4613      	mov	r3, r2
 8001d98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001d9c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001da0:	18cb      	adds	r3, r1, r3
 8001da2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001da6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da08      	bge.n	8001dc0 <compensate_pressure+0x4bc>
 8001dae:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001db2:	1851      	adds	r1, r2, r1
 8001db4:	6539      	str	r1, [r7, #80]	@ 0x50
 8001db6:	f143 0300 	adc.w	r3, r3, #0
 8001dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0b50      	lsrs	r0, r2, #13
 8001dca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dce:	1359      	asrs	r1, r3, #13
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001dd8:	4629      	mov	r1, r5
 8001dda:	fb02 f001 	mul.w	r0, r2, r1
 8001dde:	4621      	mov	r1, r4
 8001de0:	fb01 f103 	mul.w	r1, r1, r3
 8001de4:	4401      	add	r1, r0
 8001de6:	4620      	mov	r0, r4
 8001de8:	fba0 2302 	umull	r2, r3, r0, r2
 8001dec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001df0:	4613      	mov	r3, r2
 8001df2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001df6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dfa:	18cb      	adds	r3, r1, r3
 8001dfc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001e00:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da08      	bge.n	8001e1a <compensate_pressure+0x516>
 8001e08:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001e0c:	1851      	adds	r1, r2, r1
 8001e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e10:	f143 0300 	adc.w	r3, r3, #0
 8001e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e1a:	f04f 0000 	mov.w	r0, #0
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	0e50      	lsrs	r0, r2, #25
 8001e24:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001e28:	1659      	asrs	r1, r3, #25
 8001e2a:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001e2e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001e32:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	17da      	asrs	r2, r3, #31
 8001e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e3e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e42:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e4a:	462a      	mov	r2, r5
 8001e4c:	fb02 f203 	mul.w	r2, r2, r3
 8001e50:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e54:	4621      	mov	r1, r4
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001e60:	4621      	mov	r1, r4
 8001e62:	fba3 1301 	umull	r1, r3, r3, r1
 8001e66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001e7a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da07      	bge.n	8001e92 <compensate_pressure+0x58e>
 8001e82:	4971      	ldr	r1, [pc, #452]	@ (8002048 <compensate_pressure+0x744>)
 8001e84:	1851      	adds	r1, r2, r1
 8001e86:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e88:	f143 0300 	adc.w	r3, r3, #0
 8001e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	0cd0      	lsrs	r0, r2, #19
 8001e9c:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001ea0:	14d9      	asrs	r1, r3, #19
 8001ea2:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001ea6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001eaa:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001eae:	1884      	adds	r4, r0, r2
 8001eb0:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001eb4:	eb41 0303 	adc.w	r3, r1, r3
 8001eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ebc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001ec0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	1889      	adds	r1, r1, r2
 8001ec8:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001ecc:	4629      	mov	r1, r5
 8001ece:	eb43 0101 	adc.w	r1, r3, r1
 8001ed2:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001ed6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da07      	bge.n	8001eee <compensate_pressure+0x5ea>
 8001ede:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ee4:	f143 0300 	adc.w	r3, r3, #0
 8001ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0a10      	lsrs	r0, r2, #8
 8001ef8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001efc:	1219      	asrs	r1, r3, #8
 8001efe:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001f02:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	17da      	asrs	r2, r3, #31
 8001f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f0e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f1e:	464c      	mov	r4, r9
 8001f20:	0123      	lsls	r3, r4, #4
 8001f22:	4644      	mov	r4, r8
 8001f24:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f28:	4644      	mov	r4, r8
 8001f2a:	0122      	lsls	r2, r4, #4
 8001f2c:	1884      	adds	r4, r0, r2
 8001f2e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001f30:	eb41 0303 	adc.w	r3, r1, r3
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001f3a:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001f3e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f42:	0fd9      	lsrs	r1, r3, #31
 8001f44:	2000      	movs	r0, #0
 8001f46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f48:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001f4a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f4e:	4621      	mov	r1, r4
 8001f50:	1889      	adds	r1, r1, r2
 8001f52:	6239      	str	r1, [r7, #32]
 8001f54:	4629      	mov	r1, r5
 8001f56:	eb43 0101 	adc.w	r1, r3, r1
 8001f5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f68:	4621      	mov	r1, r4
 8001f6a:	084a      	lsrs	r2, r1, #1
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001f72:	4629      	mov	r1, r5
 8001f74:	104b      	asrs	r3, r1, #1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	1894      	adds	r4, r2, r2
 8001f80:	61bc      	str	r4, [r7, #24]
 8001f82:	415b      	adcs	r3, r3
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8a:	1814      	adds	r4, r2, r0
 8001f8c:	613c      	str	r4, [r7, #16]
 8001f8e:	414b      	adcs	r3, r1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f9e:	464c      	mov	r4, r9
 8001fa0:	0163      	lsls	r3, r4, #5
 8001fa2:	4644      	mov	r4, r8
 8001fa4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001fa8:	4644      	mov	r4, r8
 8001faa:	0162      	lsls	r2, r4, #5
 8001fac:	4644      	mov	r4, r8
 8001fae:	18a4      	adds	r4, r4, r2
 8001fb0:	60bc      	str	r4, [r7, #8]
 8001fb2:	464c      	mov	r4, r9
 8001fb4:	eb43 0404 	adc.w	r4, r3, r4
 8001fb8:	60fc      	str	r4, [r7, #12]
 8001fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	181b      	adds	r3, r3, r0
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	eb41 0303 	adc.w	r3, r1, r3
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fd0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da07      	bge.n	8001fe8 <compensate_pressure+0x6e4>
 8001fd8:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	f143 0300 	adc.w	r3, r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	09d0      	lsrs	r0, r2, #7
 8001ff2:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001ff6:	11d9      	asrs	r1, r3, #7
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 8002002:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800200a:	429a      	cmp	r2, r3
 800200c:	d204      	bcs.n	8002018 <compensate_pressure+0x714>
			pressure = pressure_min;
 800200e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002012:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002016:	e00e      	b.n	8002036 <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8002018:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800201c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002020:	429a      	cmp	r2, r3
 8002022:	d908      	bls.n	8002036 <compensate_pressure+0x732>
			pressure = pressure_max;
 8002024:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002028:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800202c:	e003      	b.n	8002036 <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 800202e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002032:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 8002036:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 800203a:	4618      	mov	r0, r3
 800203c:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002040:	46bd      	mov	sp, r7
 8002042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	0007ffff 	.word	0x0007ffff

0800204c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	@ 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8002056:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800205a:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002064:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	039b      	lsls	r3, r3, #14
 800206c:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800207e:	461a      	mov	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002096:	2b00      	cmp	r3, #0
 8002098:	da02      	bge.n	80020a0 <compensate_humidity+0x54>
 800209a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800209e:	337f      	adds	r3, #127	@ 0x7f
 80020a0:	13db      	asrs	r3, r3, #15
 80020a2:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80020aa:	461a      	mov	r2, r3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da01      	bge.n	80020ba <compensate_humidity+0x6e>
 80020b6:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80020ba:	129b      	asrs	r3, r3, #10
 80020bc:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7f1b      	ldrb	r3, [r3, #28]
 80020c2:	461a      	mov	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da01      	bge.n	80020d2 <compensate_humidity+0x86>
 80020ce:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80020d2:	12db      	asrs	r3, r3, #11
 80020d4:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da01      	bge.n	80020ea <compensate_humidity+0x9e>
 80020e6:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80020ea:	129b      	asrs	r3, r3, #10
 80020ec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80020f0:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80020f8:	461a      	mov	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	da02      	bge.n	800210e <compensate_humidity+0xc2>
 8002108:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800210c:	333f      	adds	r3, #63	@ 0x3f
 800210e:	139b      	asrs	r3, r3, #14
 8002110:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da02      	bge.n	8002128 <compensate_humidity+0xdc>
 8002122:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002126:	337f      	adds	r3, #127	@ 0x7f
 8002128:	13db      	asrs	r3, r3, #15
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da02      	bge.n	8002138 <compensate_humidity+0xec>
 8002132:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002136:	337f      	adds	r3, #127	@ 0x7f
 8002138:	13db      	asrs	r3, r3, #15
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	da00      	bge.n	8002144 <compensate_humidity+0xf8>
 8002142:	337f      	adds	r3, #127	@ 0x7f
 8002144:	11db      	asrs	r3, r3, #7
 8002146:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	7e1b      	ldrb	r3, [r3, #24]
 800214c:	461a      	mov	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	da00      	bge.n	800215a <compensate_humidity+0x10e>
 8002158:	330f      	adds	r3, #15
 800215a:	111b      	asrs	r3, r3, #4
 800215c:	425b      	negs	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800216c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002174:	bfa8      	it	ge
 8002176:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800217a:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	da01      	bge.n	8002186 <compensate_humidity+0x13a>
 8002182:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002186:	131b      	asrs	r3, r3, #12
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800218a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002198:	4618      	mov	r0, r3
 800219a:	372c      	adds	r7, #44	@ 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80021ac:	2388      	movs	r3, #136	@ 0x88
 80021ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80021c8:	f107 010c 	add.w	r1, r7, #12
 80021cc:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	221a      	movs	r2, #26
 80021d4:	f7fe fee7 	bl	8000fa6 <bme280_get_regs>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 80021de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f84a 	bl	8002286 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80021f2:	23e1      	movs	r3, #225	@ 0xe1
 80021f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80021f8:	f107 010c 	add.w	r1, r7, #12
 80021fc:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2207      	movs	r2, #7
 8002204:	f7fe fecf 	bl	8000fa6 <bme280_get_regs>
 8002208:	4603      	mov	r3, r0
 800220a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 800220e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f8e2 	bl	80023e6 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002222:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002226:	4618      	mov	r0, r3
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800222e:	b480      	push	{r7}
 8002230:	b087      	sub	sp, #28
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
 8002240:	e016      	b.n	8002270 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	441a      	add	r2, r3
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	440b      	add	r3, r1
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	441a      	add	r2, r3
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4619      	mov	r1, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	440b      	add	r3, r1
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	3301      	adds	r3, #1
 800226e:	75fb      	strb	r3, [r7, #23]
 8002270:	7dfa      	ldrb	r2, [r7, #23]
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3e4      	bcc.n	8002242 <interleave_reg_addr+0x14>
	}
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3310      	adds	r3, #16
 8002294:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3303      	adds	r3, #3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3302      	adds	r3, #2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3305      	adds	r3, #5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21a      	sxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3307      	adds	r3, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3306      	adds	r3, #6
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3309      	adds	r3, #9
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b21a      	sxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3308      	adds	r3, #8
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b21a      	sxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	330b      	adds	r3, #11
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	b21a      	sxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	330a      	adds	r3, #10
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b21b      	sxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b21a      	sxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	330d      	adds	r3, #13
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	330c      	adds	r3, #12
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21a      	sxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	330f      	adds	r3, #15
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	b21a      	sxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	330e      	adds	r3, #14
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21a      	sxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3311      	adds	r3, #17
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21a      	sxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3310      	adds	r3, #16
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21a      	sxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3313      	adds	r3, #19
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3312      	adds	r3, #18
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3315      	adds	r3, #21
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3314      	adds	r3, #20
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3317      	adds	r3, #23
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3316      	adds	r3, #22
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3319      	adds	r3, #25
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	761a      	strb	r2, [r3, #24]

}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3310      	adds	r3, #16
 80023f4:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	b21a      	sxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21a      	sxth	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3302      	adds	r3, #2
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3303      	adds	r3, #3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	b29b      	uxth	r3, r3
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	b29b      	uxth	r3, r3
 8002426:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b21b      	sxth	r3, r3
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002436:	8a7a      	ldrh	r2, [r7, #18]
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	b21a      	sxth	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3305      	adds	r3, #5
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b25b      	sxtb	r3, r3
 800244a:	b29b      	uxth	r3, r3
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	b29b      	uxth	r3, r3
 8002450:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	b2db      	uxtb	r3, r3
 800245c:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800245e:	89fa      	ldrh	r2, [r7, #14]
 8002460:	89bb      	ldrh	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	b21a      	sxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3306      	adds	r3, #6
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25a      	sxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	71fb      	strb	r3, [r7, #7]
 8002490:	4613      	mov	r3, r2
 8002492:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002498:	79fa      	ldrb	r2, [r7, #7]
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	4013      	ands	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <null_ptr_check+0x26>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <null_ptr_check+0x26>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <null_ptr_check+0x26>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80024e2:	23ff      	movs	r3, #255	@ 0xff
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e001      	b.n	80024ec <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e009      	b.n	800251e <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	3301      	adds	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d9f2      	bls.n	800250a <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <FIRFilter_Update>:




float FIRFilter_Update(FIRFilter *fir , float inp)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	ed87 0a00 	vstr	s0, [r7]
	// son gelen veriyi buffer'a kaydet
	fir->buf[fir->bufIndex] =inp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	601a      	str	r2, [r3, #0]

	// buffer indexini arttır
	fir->bufIndex++;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002562:	3301      	adds	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	// index uzunluğu taşması kontrolü

	if(fir->bufIndex == FIR_FILTER_LENGHT) fir->bufIndex=0;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002572:	2b10      	cmp	r3, #16
 8002574:	d103      	bne.n	800257e <FIRFilter_Update+0x3e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	fir->out =0;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	@ 0x44

	uint8_t sumIndex = fir->bufIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800258c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 800258e:	2300      	movs	r3, #0
 8002590:	73bb      	strb	r3, [r7, #14]
 8002592:	e021      	b.n	80025d8 <FIRFilter_Update+0x98>
	{
		// index kontrol
		if(sumIndex >0) sumIndex --;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <FIRFilter_Update+0x62>
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3b01      	subs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e001      	b.n	80025a6 <FIRFilter_Update+0x66>
		else sumIndex = FIR_FILTER_LENGHT-1;
 80025a2:	230f      	movs	r3, #15
 80025a4:	73fb      	strb	r3, [r7, #15]

		// convulution toplam kısmı
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	4a11      	ldr	r2, [pc, #68]	@ (80025f4 <FIRFilter_Update+0xb4>)
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	edd3 6a00 	vldr	s13, [r3]
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80025d2:	7bbb      	ldrb	r3, [r7, #14]
 80025d4:	3301      	adds	r3, #1
 80025d6:	73bb      	strb	r3, [r7, #14]
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	2b0f      	cmp	r3, #15
 80025dc:	d9da      	bls.n	8002594 <FIRFilter_Update+0x54>

	}

	return fir->out;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	ee07 3a90 	vmov	s15, r3

}
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	20000000 	.word	0x20000000

080025f8 <MAFilter_Init>:



void MAFilter_Init(FIRFilter *fir)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e009      	b.n	800261a <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	3301      	adds	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d9f2      	bls.n	8002606 <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	fir->out = 0; // clear output
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8002630:	bf00      	nop
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LSM6DSLTR_Init>:

extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1= 0x03;
 8002642:	2303      	movs	r3, #3
 8002644:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, INT1_CTR, 1, &data1, 1, 1);
 8002646:	2301      	movs	r3, #1
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2301      	movs	r3, #1
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2301      	movs	r3, #1
 8002654:	220d      	movs	r2, #13
 8002656:	21d4      	movs	r1, #212	@ 0xd4
 8002658:	481f      	ldr	r0, [pc, #124]	@ (80026d8 <LSM6DSLTR_Init+0x9c>)
 800265a:	f002 fdb5 	bl	80051c8 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 16G 6.66khz
 800265e:	23a4      	movs	r3, #164	@ 0xa4
 8002660:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002662:	2301      	movs	r3, #1
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	2301      	movs	r3, #1
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	2210      	movs	r2, #16
 8002672:	21d4      	movs	r1, #212	@ 0xd4
 8002674:	4818      	ldr	r0, [pc, #96]	@ (80026d8 <LSM6DSLTR_Init+0x9c>)
 8002676:	f002 fda7 	bl	80051c8 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 500 dps 6.6khz
 800267a:	23a4      	movs	r3, #164	@ 0xa4
 800267c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 800267e:	2301      	movs	r3, #1
 8002680:	9302      	str	r3, [sp, #8]
 8002682:	2301      	movs	r3, #1
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2301      	movs	r3, #1
 800268c:	2211      	movs	r2, #17
 800268e:	21d4      	movs	r1, #212	@ 0xd4
 8002690:	4811      	ldr	r0, [pc, #68]	@ (80026d8 <LSM6DSLTR_Init+0x9c>)
 8002692:	f002 fd99 	bl	80051c8 <HAL_I2C_Mem_Write>

	data1= 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800269a:	2301      	movs	r3, #1
 800269c:	9302      	str	r3, [sp, #8]
 800269e:	2301      	movs	r3, #1
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2301      	movs	r3, #1
 80026a8:	2212      	movs	r2, #18
 80026aa:	21d4      	movs	r1, #212	@ 0xd4
 80026ac:	480a      	ldr	r0, [pc, #40]	@ (80026d8 <LSM6DSLTR_Init+0x9c>)
 80026ae:	f002 fd8b 	bl	80051c8 <HAL_I2C_Mem_Write>

	data1= 0x08;
 80026b2:	2308      	movs	r3, #8
 80026b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 80026b6:	2301      	movs	r3, #1
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	2301      	movs	r3, #1
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2301      	movs	r3, #1
 80026c4:	2213      	movs	r2, #19
 80026c6:	21d4      	movs	r1, #212	@ 0xd4
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <LSM6DSLTR_Init+0x9c>)
 80026ca:	f002 fd7d 	bl	80051c8 <HAL_I2C_Mem_Write>



}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200000f8 	.word	0x200000f8
 80026dc:	00000000 	.word	0x00000000

080026e0 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af04      	add	r7, sp, #16
 80026e6:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 80026e8:	2301      	movs	r3, #1
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	2301      	movs	r3, #1
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	f107 030d 	add.w	r3, r7, #13
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2301      	movs	r3, #1
 80026f8:	222c      	movs	r2, #44	@ 0x2c
 80026fa:	21d5      	movs	r1, #213	@ 0xd5
 80026fc:	4864      	ldr	r0, [pc, #400]	@ (8002890 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80026fe:	f002 fe5d 	bl	80053bc <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 8002702:	2301      	movs	r3, #1
 8002704:	9302      	str	r3, [sp, #8]
 8002706:	2301      	movs	r3, #1
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	f107 030c 	add.w	r3, r7, #12
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2301      	movs	r3, #1
 8002712:	222d      	movs	r2, #45	@ 0x2d
 8002714:	21d5      	movs	r1, #213	@ 0xd5
 8002716:	485e      	ldr	r0, [pc, #376]	@ (8002890 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002718:	f002 fe50 	bl	80053bc <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 800271c:	7b3b      	ldrb	r3, [r7, #12]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21a      	sxth	r2, r3
 8002722:	7b7b      	ldrb	r3, [r7, #13]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800272a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002736:	ee17 0a90 	vmov	r0, s15
 800273a:	f7fd fec9 	bl	80004d0 <__aeabi_f2d>
 800273e:	a350      	add	r3, pc, #320	@ (adr r3, 8002880 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f7fd ff1c 	bl	8000580 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	a34d      	add	r3, pc, #308	@ (adr r3, 8002888 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002756:	f7fd ff13 	bl	8000580 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe f9bd 	bl	8000ae0 <__aeabi_d2f>
 8002766:	4602      	mov	r2, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 800276c:	2301      	movs	r3, #1
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2301      	movs	r3, #1
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	f107 030d 	add.w	r3, r7, #13
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	2228      	movs	r2, #40	@ 0x28
 800277e:	21d5      	movs	r1, #213	@ 0xd5
 8002780:	4843      	ldr	r0, [pc, #268]	@ (8002890 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002782:	f002 fe1b 	bl	80053bc <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 8002786:	2301      	movs	r3, #1
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	2301      	movs	r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f107 030c 	add.w	r3, r7, #12
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	2229      	movs	r2, #41	@ 0x29
 8002798:	21d5      	movs	r1, #213	@ 0xd5
 800279a:	483d      	ldr	r0, [pc, #244]	@ (8002890 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800279c:	f002 fe0e 	bl	80053bc <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80027a0:	7b3b      	ldrb	r3, [r7, #12]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	7b7b      	ldrb	r3, [r7, #13]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80027ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ba:	ee17 0a90 	vmov	r0, s15
 80027be:	f7fd fe87 	bl	80004d0 <__aeabi_f2d>
 80027c2:	a32f      	add	r3, pc, #188	@ (adr r3, 8002880 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd feda 	bl	8000580 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	a32c      	add	r3, pc, #176	@ (adr r3, 8002888 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fd fed1 	bl	8000580 <__aeabi_dmul>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	f7fe f97b 	bl	8000ae0 <__aeabi_d2f>
 80027ea:	4602      	mov	r2, r0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 80027f0:	2301      	movs	r3, #1
 80027f2:	9302      	str	r3, [sp, #8]
 80027f4:	2301      	movs	r3, #1
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	f107 030d 	add.w	r3, r7, #13
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	222a      	movs	r2, #42	@ 0x2a
 8002802:	21d5      	movs	r1, #213	@ 0xd5
 8002804:	4822      	ldr	r0, [pc, #136]	@ (8002890 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002806:	f002 fdd9 	bl	80053bc <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 800280a:	2301      	movs	r3, #1
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	2301      	movs	r3, #1
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	222b      	movs	r2, #43	@ 0x2b
 800281c:	21d5      	movs	r1, #213	@ 0xd5
 800281e:	481c      	ldr	r0, [pc, #112]	@ (8002890 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002820:	f002 fdcc 	bl	80053bc <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002824:	7b3b      	ldrb	r3, [r7, #12]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	b21a      	sxth	r2, r3
 800282a:	7b7b      	ldrb	r3, [r7, #13]
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 8002832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283e:	ee17 0a90 	vmov	r0, s15
 8002842:	f7fd fe45 	bl	80004d0 <__aeabi_f2d>
 8002846:	a30e      	add	r3, pc, #56	@ (adr r3, 8002880 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fe98 	bl	8000580 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	a30b      	add	r3, pc, #44	@ (adr r3, 8002888 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fd fe8f 	bl	8000580 <__aeabi_dmul>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f939 	bl	8000ae0 <__aeabi_d2f>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]


}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	f3af 8000 	nop.w
 8002880:	0a5accd5 	.word	0x0a5accd5
 8002884:	3f3ffb48 	.word	0x3f3ffb48
 8002888:	51eb851f 	.word	0x51eb851f
 800288c:	40239eb8 	.word	0x40239eb8
 8002890:	200000f8 	.word	0x200000f8

08002894 <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af04      	add	r7, sp, #16
 800289a:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 800289c:	2301      	movs	r3, #1
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	2301      	movs	r3, #1
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	f107 030d 	add.w	r3, r7, #13
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2301      	movs	r3, #1
 80028ac:	2222      	movs	r2, #34	@ 0x22
 80028ae:	21d5      	movs	r1, #213	@ 0xd5
 80028b0:	4843      	ldr	r0, [pc, #268]	@ (80029c0 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80028b2:	f002 fd83 	bl	80053bc <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 80028b6:	2301      	movs	r3, #1
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	2301      	movs	r3, #1
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2223      	movs	r2, #35	@ 0x23
 80028c8:	21d5      	movs	r1, #213	@ 0xd5
 80028ca:	483d      	ldr	r0, [pc, #244]	@ (80029c0 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80028cc:	f002 fd76 	bl	80053bc <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 80028d0:	7b3b      	ldrb	r3, [r7, #12]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	7b7b      	ldrb	r3, [r7, #13]
 80028d8:	b21b      	sxth	r3, r3
 80028da:	4313      	orrs	r3, r2
 80028dc:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 80028de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ea:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 80028fa:	2301      	movs	r3, #1
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	2301      	movs	r3, #1
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	f107 030d 	add.w	r3, r7, #13
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2301      	movs	r3, #1
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	21d5      	movs	r1, #213	@ 0xd5
 800290e:	482c      	ldr	r0, [pc, #176]	@ (80029c0 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002910:	f002 fd54 	bl	80053bc <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 8002914:	2301      	movs	r3, #1
 8002916:	9302      	str	r3, [sp, #8]
 8002918:	2301      	movs	r3, #1
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2301      	movs	r3, #1
 8002924:	2225      	movs	r2, #37	@ 0x25
 8002926:	21d5      	movs	r1, #213	@ 0xd5
 8002928:	4825      	ldr	r0, [pc, #148]	@ (80029c0 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 800292a:	f002 fd47 	bl	80053bc <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 800292e:	7b3b      	ldrb	r3, [r7, #12]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	b21a      	sxth	r2, r3
 8002934:	7b7b      	ldrb	r3, [r7, #13]
 8002936:	b21b      	sxth	r3, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 800293c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002948:	4b1e      	ldr	r3, [pc, #120]	@ (80029c4 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002958:	2301      	movs	r3, #1
 800295a:	9302      	str	r3, [sp, #8]
 800295c:	2301      	movs	r3, #1
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	f107 030d 	add.w	r3, r7, #13
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2301      	movs	r3, #1
 8002968:	2226      	movs	r2, #38	@ 0x26
 800296a:	21d5      	movs	r1, #213	@ 0xd5
 800296c:	4814      	ldr	r0, [pc, #80]	@ (80029c0 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 800296e:	f002 fd25 	bl	80053bc <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002972:	2301      	movs	r3, #1
 8002974:	9302      	str	r3, [sp, #8]
 8002976:	2301      	movs	r3, #1
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2301      	movs	r3, #1
 8002982:	2227      	movs	r2, #39	@ 0x27
 8002984:	21d5      	movs	r1, #213	@ 0xd5
 8002986:	480e      	ldr	r0, [pc, #56]	@ (80029c0 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002988:	f002 fd18 	bl	80053bc <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 800298c:	7b3b      	ldrb	r3, [r7, #12]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	b21a      	sxth	r2, r3
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	b21b      	sxth	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 800299a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	edc3 7a05 	vstr	s15, [r3, #20]

}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200000f8 	.word	0x200000f8
 80029c4:	20000040 	.word	0x20000040

080029c8 <calculate_roll_pitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);

}


void calculate_roll_pitch(LSM6DSLTR *Lsm_Sensor) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	ed2d 8b02 	vpush	{d8}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
    Lsm_Sensor->Roll = atan2f(Lsm_Sensor->Accel_Y, sqrtf(Lsm_Sensor->Accel_X * Lsm_Sensor->Accel_X + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	ed93 8a01 	vldr	s16, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002a02:	f006 f8ed 	bl	8008be0 <sqrtf>
 8002a06:	eef0 7a40 	vmov.f32	s15, s0
 8002a0a:	eef0 0a67 	vmov.f32	s1, s15
 8002a0e:	eeb0 0a48 	vmov.f32	s0, s16
 8002a12:	f006 f8e3 	bl	8008bdc <atan2f>
 8002a16:	eef0 7a40 	vmov.f32	s15, s0
 8002a1a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002ad0 <calculate_roll_pitch+0x108>
 8002a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a22:	ee17 0a90 	vmov	r0, s15
 8002a26:	f7fd fd53 	bl	80004d0 <__aeabi_f2d>
 8002a2a:	a327      	add	r3, pc, #156	@ (adr r3, 8002ac8 <calculate_roll_pitch+0x100>)
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f7fd fed0 	bl	80007d4 <__aeabi_ddiv>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7fe f850 	bl	8000ae0 <__aeabi_d2f>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
    Lsm_Sensor->Pitch = atan2f(-Lsm_Sensor->Accel_X, sqrtf(Lsm_Sensor->Accel_Y * Lsm_Sensor->Accel_Y + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	eeb1 8a67 	vneg.f32	s16, s15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	eeb0 0a67 	vmov.f32	s0, s15
 8002a78:	f006 f8b2 	bl	8008be0 <sqrtf>
 8002a7c:	eef0 7a40 	vmov.f32	s15, s0
 8002a80:	eef0 0a67 	vmov.f32	s1, s15
 8002a84:	eeb0 0a48 	vmov.f32	s0, s16
 8002a88:	f006 f8a8 	bl	8008bdc <atan2f>
 8002a8c:	eef0 7a40 	vmov.f32	s15, s0
 8002a90:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002ad0 <calculate_roll_pitch+0x108>
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	ee17 0a90 	vmov	r0, s15
 8002a9c:	f7fd fd18 	bl	80004d0 <__aeabi_f2d>
 8002aa0:	a309      	add	r3, pc, #36	@ (adr r3, 8002ac8 <calculate_roll_pitch+0x100>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fd fe95 	bl	80007d4 <__aeabi_ddiv>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7fe f815 	bl	8000ae0 <__aeabi_d2f>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	61da      	str	r2, [r3, #28]
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	ecbd 8b02 	vpop	{d8}
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	51eb851f 	.word	0x51eb851f
 8002acc:	40091eb8 	.word	0x40091eb8
 8002ad0:	43340000 	.word	0x43340000

08002ad4 <update_angles>:
void update_angles(LSM6DSLTR *Lsm_Sensor) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick(); // Şu anki zamanı al
 8002adc:	f001 fb58 	bl	8004190 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

    // Zaman farkını hesapla (saniye cinsinden)
    float dt = (current_time - prev_time) / 1000.0f;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <update_angles+0xa8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002af2:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002b80 <update_angles+0xac>
 8002af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002afa:	edc7 7a02 	vstr	s15, [r7, #8]

    // Roll ve pitch açılarını güncelle (tamamlayıcı filtre)
    Lsm_Sensor->Roll = ALPHA * (Lsm_Sensor->Roll + Lsm_Sensor->Gyro_X * dt) + (1 - ALPHA) * Lsm_Sensor->Roll;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b16:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002b84 <update_angles+0xb0>
 8002b1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b24:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002b88 <update_angles+0xb4>
 8002b28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	edc3 7a06 	vstr	s15, [r3, #24]
    Lsm_Sensor->Pitch = ALPHA * (Lsm_Sensor->Pitch + Lsm_Sensor->Gyro_Y * dt) + (1 - ALPHA) * Lsm_Sensor->Pitch;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002b84 <update_angles+0xb0>
 8002b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b5c:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002b88 <update_angles+0xb4>
 8002b60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Yaw açısını jiroskop verileriyle güncelle (basit zamanla entegrasyon)
 //   Lsm_Sensor->Yaw += Lsm_Sensor->Gyro_Z * dt;

    // Önceki zamanı güncelle
    prev_time = current_time;
 8002b6e:	4a03      	ldr	r2, [pc, #12]	@ (8002b7c <update_angles+0xa8>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200000f4 	.word	0x200000f4
 8002b80:	447a0000 	.word	0x447a0000
 8002b84:	3f7ae148 	.word	0x3f7ae148
 8002b88:	3ca3d700 	.word	0x3ca3d700

08002b8c <KalmanFilter_Init>:
 */


#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R, float initial_value) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b98:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b9c:	ed87 1a00 	vstr	s2, [r7]
    kf->Q = Q;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	601a      	str	r2, [r3, #0]
    kf->R = R;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	609a      	str	r2, [r3, #8]
    kf->P = 1.0;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002bb8:	60da      	str	r2, [r3, #12]
    kf->K = 0.0;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement) {
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    kf->P += kf->Q;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	ed93 7a03 	vldr	s14, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	edd3 6a03 	vldr	s13, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	ed93 7a03 	vldr	s14, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x += kf->K * (measurement - kf->x);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c24:	ed97 6a00 	vldr	s12, [r7]
 8002c28:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P *= (1.0 - kf->K);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc46 	bl	80004d0 <__aeabi_f2d>
 8002c44:	4604      	mov	r4, r0
 8002c46:	460d      	mov	r5, r1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc3f 	bl	80004d0 <__aeabi_f2d>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	f04f 0000 	mov.w	r0, #0
 8002c5a:	490d      	ldr	r1, [pc, #52]	@ (8002c90 <KalmanFilter_Update+0xc0>)
 8002c5c:	f7fd fad8 	bl	8000210 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fc8a 	bl	8000580 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ff34 	bl	8000ae0 <__aeabi_d2f>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60da      	str	r2, [r3, #12]

    return kf->x;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	ee07 3a90 	vmov	s15, r3
}
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c90:	3ff00000 	.word	0x3ff00000

08002c94 <HAL_UART_RxCpltCallback>:
struct bme280_dev dev;
struct bme280_data comp_data;
int8_t rslt=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

	if(huart == &huart6){
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <HAL_UART_RxCpltCallback+0x58>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d11e      	bne.n	8002ce2 <HAL_UART_RxCpltCallback+0x4e>
		if(rx_data_EGU != '\n' && rx_index_EGU <5){
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b0a      	cmp	r3, #10
 8002caa:	d00f      	beq.n	8002ccc <HAL_UART_RxCpltCallback+0x38>
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x60>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d80b      	bhi.n	8002ccc <HAL_UART_RxCpltCallback+0x38>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x60>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	b2d1      	uxtb	r1, r2
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x60>)
 8002cbe:	7011      	strb	r1, [r2, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8002cc4:	7819      	ldrb	r1, [r3, #0]
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <HAL_UART_RxCpltCallback+0x64>)
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	e005      	b.n	8002cd8 <HAL_UART_RxCpltCallback+0x44>

		}
		else
		{
			rx_data_EGU=0;
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <HAL_UART_RxCpltCallback+0x60>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4905      	ldr	r1, [pc, #20]	@ (8002cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8002cdc:	4803      	ldr	r0, [pc, #12]	@ (8002cec <HAL_UART_RxCpltCallback+0x58>)
 8002cde:	f004 fd54 	bl	800778a <HAL_UART_Receive_IT>
		}
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200001dc 	.word	0x200001dc
 8002cf0:	2000024a 	.word	0x2000024a
 8002cf4:	2000024b 	.word	0x2000024b
 8002cf8:	20000220 	.word	0x20000220

08002cfc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]



	if(htim==&htim10){ //50ms
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a25      	ldr	r2, [pc, #148]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d143      	bne.n	8002d94 <HAL_TIM_PeriodElapsedCallback+0x98>
	sensor_flag=1;
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
	set_timer++;
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4a22      	ldr	r2, [pc, #136]	@ (8002da4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d1a:	6013      	str	r3, [r2, #0]

	if(buzzer_long ==1 && buzzer_long_counter>=20)
 8002d1c:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10a      	bne.n	8002d3a <HAL_TIM_PeriodElapsedCallback+0x3e>
 8002d24:	4b21      	ldr	r3, [pc, #132]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b13      	cmp	r3, #19
 8002d2a:	dd06      	ble.n	8002d3a <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002d2c:	2110      	movs	r1, #16
 8002d2e:	4820      	ldr	r0, [pc, #128]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d30:	f001 fdc7 	bl	80048c2 <HAL_GPIO_TogglePin>
		buzzer_long_counter = 0;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
	}
	buzzer_long_counter++;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	4a1a      	ldr	r2, [pc, #104]	@ (8002dac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d42:	6013      	str	r3, [r2, #0]

	if(buzzer_short ==1 && buzzer_short_counter>=9)
 8002d44:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10a      	bne.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x66>
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	dd06      	ble.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002d54:	2110      	movs	r1, #16
 8002d56:	4816      	ldr	r0, [pc, #88]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d58:	f001 fdb3 	bl	80048c2 <HAL_GPIO_TogglePin>
		buzzer_short_counter = 0;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
	}
	buzzer_short_counter++;
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002d6a:	6013      	str	r3, [r2, #0]

	if(buzzer_ariza ==1 && buzzer_ariza_counter>=3)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	@ (8002dbc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10a      	bne.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x8e>
 8002d74:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	dd06      	ble.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	480c      	ldr	r0, [pc, #48]	@ (8002db0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d80:	f001 fd9f 	bl	80048c2 <HAL_GPIO_TogglePin>
		buzzer_ariza_counter = 0;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
	}
	buzzer_ariza_counter++;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002d92:	6013      	str	r3, [r2, #0]


	}


}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000194 	.word	0x20000194
 8002da0:	2000026e 	.word	0x2000026e
 8002da4:	20000274 	.word	0x20000274
 8002da8:	2000024c 	.word	0x2000024c
 8002dac:	2000025c 	.word	0x2000025c
 8002db0:	40020800 	.word	0x40020800
 8002db4:	20000250 	.word	0x20000250
 8002db8:	20000258 	.word	0x20000258
 8002dbc:	20000254 	.word	0x20000254
 8002dc0:	20000260 	.word	0x20000260

08002dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dca:	f001 f97b 	bl	80040c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dce:	f000 faf3 	bl	80033b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dd2:	f000 fc0f 	bl	80035f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002dd6:	f000 fb5b 	bl	8003490 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002dda:	f000 fbe1 	bl	80035a0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002dde:	f005 fc6d 	bl	80086bc <MX_FATFS_Init>
  MX_TIM10_Init();
 8002de2:	f000 fbb9 	bl	8003558 <MX_TIM10_Init>
  MX_TIM6_Init();
 8002de6:	f000 fb81 	bl	80034ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002dea:	2201      	movs	r2, #1
 8002dec:	2102      	movs	r1, #2
 8002dee:	48c2      	ldr	r0, [pc, #776]	@ (80030f8 <main+0x334>)
 8002df0:	f001 fd4e 	bl	8004890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002df4:	2201      	movs	r2, #1
 8002df6:	2104      	movs	r1, #4
 8002df8:	48c0      	ldr	r0, [pc, #768]	@ (80030fc <main+0x338>)
 8002dfa:	f001 fd49 	bl	8004890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002e04:	48bc      	ldr	r0, [pc, #752]	@ (80030f8 <main+0x334>)
 8002e06:	f001 fd43 	bl	8004890 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2110      	movs	r1, #16
 8002e0e:	48bb      	ldr	r0, [pc, #748]	@ (80030fc <main+0x338>)
 8002e10:	f001 fd3e 	bl	8004890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8002e14:	2200      	movs	r2, #0
 8002e16:	2108      	movs	r1, #8
 8002e18:	48b8      	ldr	r0, [pc, #736]	@ (80030fc <main+0x338>)
 8002e1a:	f001 fd39 	bl	8004890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e24:	48b4      	ldr	r0, [pc, #720]	@ (80030f8 <main+0x334>)
 8002e26:	f001 fd33 	bl	8004890 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e30:	48b1      	ldr	r0, [pc, #708]	@ (80030f8 <main+0x334>)
 8002e32:	f001 fd2d 	bl	8004890 <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8002e36:	2201      	movs	r2, #1
 8002e38:	49b1      	ldr	r1, [pc, #708]	@ (8003100 <main+0x33c>)
 8002e3a:	48b2      	ldr	r0, [pc, #712]	@ (8003104 <main+0x340>)
 8002e3c:	f004 fca5 	bl	800778a <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim10);
 8002e40:	48b1      	ldr	r0, [pc, #708]	@ (8003108 <main+0x344>)
 8002e42:	f004 f8f3 	bl	800702c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8002e46:	48b1      	ldr	r0, [pc, #708]	@ (800310c <main+0x348>)
 8002e48:	f004 f8f0 	bl	800702c <HAL_TIM_Base_Start_IT>

  KalmanFilter_Init(&kf, 0.005, 0.1, 0.0);
 8002e4c:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8003110 <main+0x34c>
 8002e50:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8003114 <main+0x350>
 8002e54:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8003118 <main+0x354>
 8002e58:	48b0      	ldr	r0, [pc, #704]	@ (800311c <main+0x358>)
 8002e5a:	f7ff fe97 	bl	8002b8c <KalmanFilter_Init>

  MAFilter_Init(&accx);
 8002e5e:	48b0      	ldr	r0, [pc, #704]	@ (8003120 <main+0x35c>)
 8002e60:	f7ff fbca 	bl	80025f8 <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 8002e64:	48af      	ldr	r0, [pc, #700]	@ (8003124 <main+0x360>)
 8002e66:	f7ff fb49 	bl	80024fc <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 8002e6a:	48af      	ldr	r0, [pc, #700]	@ (8003128 <main+0x364>)
 8002e6c:	f7ff fb46 	bl	80024fc <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 8002e70:	48ae      	ldr	r0, [pc, #696]	@ (800312c <main+0x368>)
 8002e72:	f7ff fb43 	bl	80024fc <FIRFilter_Init>



  LSM6DSLTR_Init();
 8002e76:	f7ff fbe1 	bl	800263c <LSM6DSLTR_Init>
  bme_config();
 8002e7a:	f000 ff1b 	bl	8003cb4 <bme_config>
  Altitude_Offset();
 8002e7e:	f000 fde5 	bl	8003a4c <Altitude_Offset>

  Buzzer(10, 100);
 8002e82:	2164      	movs	r1, #100	@ 0x64
 8002e84:	200a      	movs	r0, #10
 8002e86:	f000 fd8d 	bl	80039a4 <Buzzer>

  ariza_BME=BME_I2C_Testsensor();
 8002e8a:	f000 fc77 	bl	800377c <BME_I2C_Testsensor>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4ba7      	ldr	r3, [pc, #668]	@ (8003130 <main+0x36c>)
 8002e94:	701a      	strb	r2, [r3, #0]
  ariza_LSM=LSM_I2C_Testsensor();
 8002e96:	f000 fc89 	bl	80037ac <LSM_I2C_Testsensor>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4ba5      	ldr	r3, [pc, #660]	@ (8003134 <main+0x370>)
 8002ea0:	701a      	strb	r2, [r3, #0]

  ariza=ariza_BME+ariza_LSM;
 8002ea2:	4ba3      	ldr	r3, [pc, #652]	@ (8003130 <main+0x36c>)
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	4ba3      	ldr	r3, [pc, #652]	@ (8003134 <main+0x370>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4ba2      	ldr	r3, [pc, #648]	@ (8003138 <main+0x374>)
 8002eb0:	701a      	strb	r2, [r3, #0]
	set1=set_timer;
 8002eb2:	4ba2      	ldr	r3, [pc, #648]	@ (800313c <main+0x378>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4aa2      	ldr	r2, [pc, #648]	@ (8003140 <main+0x37c>)
 8002eb8:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MEGU_TX_BUF_FILL();
 8002eba:	f000 fe31 	bl	8003b20 <MEGU_TX_BUF_FILL>



/********************* Sensor Ölçüm **************************************************/
	if(sensor_flag==1)
 8002ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8003144 <main+0x380>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	f040 8106 	bne.w	80030d4 <main+0x310>
	{
		 sensor_flag=0;
 8002ec8:	4b9e      	ldr	r3, [pc, #632]	@ (8003144 <main+0x380>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
		 prev_alt=altitude_kalman;
 8002ece:	4b9e      	ldr	r3, [pc, #632]	@ (8003148 <main+0x384>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a9e      	ldr	r2, [pc, #632]	@ (800314c <main+0x388>)
 8002ed4:	6013      	str	r3, [r2, #0]
		 rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002ed6:	499e      	ldr	r1, [pc, #632]	@ (8003150 <main+0x38c>)
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7fe f962 	bl	80011a2 <bme280_set_sensor_mode>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b9c      	ldr	r3, [pc, #624]	@ (8003154 <main+0x390>)
 8002ee4:	701a      	strb	r2, [r3, #0]
		/* �?��?�터 취�? */
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002ee6:	4a9a      	ldr	r2, [pc, #616]	@ (8003150 <main+0x38c>)
 8002ee8:	499b      	ldr	r1, [pc, #620]	@ (8003158 <main+0x394>)
 8002eea:	2007      	movs	r0, #7
 8002eec:	f7fe f9d5 	bl	800129a <bme280_get_sensor_data>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b97      	ldr	r3, [pc, #604]	@ (8003154 <main+0x390>)
 8002ef6:	701a      	strb	r2, [r3, #0]

		if(rslt == BME280_OK)
 8002ef8:	4b96      	ldr	r3, [pc, #600]	@ (8003154 <main+0x390>)
 8002efa:	f993 3000 	ldrsb.w	r3, [r3]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d14c      	bne.n	8002f9c <main+0x1d8>
		{
		  temperature = comp_data.temperature/100.00;
 8002f02:	4b95      	ldr	r3, [pc, #596]	@ (8003158 <main+0x394>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fad0 	bl	80004ac <__aeabi_i2d>
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	4b92      	ldr	r3, [pc, #584]	@ (800315c <main+0x398>)
 8002f12:	f7fd fc5f 	bl	80007d4 <__aeabi_ddiv>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f7fd fddf 	bl	8000ae0 <__aeabi_d2f>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a8e      	ldr	r2, [pc, #568]	@ (8003160 <main+0x39c>)
 8002f26:	6013      	str	r3, [r2, #0]
		  humidity = comp_data.humidity;
 8002f28:	4b8b      	ldr	r3, [pc, #556]	@ (8003158 <main+0x394>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f34:	4b8b      	ldr	r3, [pc, #556]	@ (8003164 <main+0x3a0>)
 8002f36:	edc3 7a00 	vstr	s15, [r3]
		  pressure = comp_data.pressure;
 8002f3a:	4b87      	ldr	r3, [pc, #540]	@ (8003158 <main+0x394>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <main+0x3a4>)
 8002f48:	edc3 7a00 	vstr	s15, [r3]
		  altitude=BME280_Get_Altitude()-offset_altitude;
 8002f4c:	f000 fc48 	bl	80037e0 <BME280_Get_Altitude>
 8002f50:	eeb0 7a40 	vmov.f32	s14, s0
 8002f54:	4b85      	ldr	r3, [pc, #532]	@ (800316c <main+0x3a8>)
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5e:	4b84      	ldr	r3, [pc, #528]	@ (8003170 <main+0x3ac>)
 8002f60:	edc3 7a00 	vstr	s15, [r3]
		  altitude_kalman= KalmanFilter_Update(&kf, altitude);
 8002f64:	4b82      	ldr	r3, [pc, #520]	@ (8003170 <main+0x3ac>)
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6e:	486b      	ldr	r0, [pc, #428]	@ (800311c <main+0x358>)
 8002f70:	f7ff fe2e 	bl	8002bd0 <KalmanFilter_Update>
 8002f74:	eef0 7a40 	vmov.f32	s15, s0
 8002f78:	4b73      	ldr	r3, [pc, #460]	@ (8003148 <main+0x384>)
 8002f7a:	edc3 7a00 	vstr	s15, [r3]
		  speed=(altitude_kalman-prev_alt)*20;
 8002f7e:	4b72      	ldr	r3, [pc, #456]	@ (8003148 <main+0x384>)
 8002f80:	ed93 7a00 	vldr	s14, [r3]
 8002f84:	4b71      	ldr	r3, [pc, #452]	@ (800314c <main+0x388>)
 8002f86:	edd3 7a00 	vldr	s15, [r3]
 8002f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8002f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f96:	4b77      	ldr	r3, [pc, #476]	@ (8003174 <main+0x3b0>)
 8002f98:	edc3 7a00 	vstr	s15, [r3]

    	}

		 LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8002f9c:	4876      	ldr	r0, [pc, #472]	@ (8003178 <main+0x3b4>)
 8002f9e:	f7ff fb9f 	bl	80026e0 <LSM6DSLTR_Read_Accel_Data>
		 calculate_roll_pitch(&Lsm_Sensor);
 8002fa2:	4875      	ldr	r0, [pc, #468]	@ (8003178 <main+0x3b4>)
 8002fa4:	f7ff fd10 	bl	80029c8 <calculate_roll_pitch>
		 LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8002fa8:	4873      	ldr	r0, [pc, #460]	@ (8003178 <main+0x3b4>)
 8002faa:	f7ff fc73 	bl	8002894 <LSM6DSLTR_Read_Gyro_Data>
		 update_angles(&Lsm_Sensor);
 8002fae:	4872      	ldr	r0, [pc, #456]	@ (8003178 <main+0x3b4>)
 8002fb0:	f7ff fd90 	bl	8002ad4 <update_angles>

		 Lsm_Sensor.Accel_X=FIRFilter_Update(&accx,  Lsm_Sensor.Accel_X);
 8002fb4:	4b70      	ldr	r3, [pc, #448]	@ (8003178 <main+0x3b4>)
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	eeb0 0a67 	vmov.f32	s0, s15
 8002fbe:	4858      	ldr	r0, [pc, #352]	@ (8003120 <main+0x35c>)
 8002fc0:	f7ff fabe 	bl	8002540 <FIRFilter_Update>
 8002fc4:	eef0 7a40 	vmov.f32	s15, s0
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8003178 <main+0x3b4>)
 8002fca:	edc3 7a00 	vstr	s15, [r3]
		 Lsm_Sensor.Gyro_X=FIRFilter_Update(&IMU_GYROX,  Lsm_Sensor.Gyro_X);
 8002fce:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <main+0x3b4>)
 8002fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd8:	4853      	ldr	r0, [pc, #332]	@ (8003128 <main+0x364>)
 8002fda:	f7ff fab1 	bl	8002540 <FIRFilter_Update>
 8002fde:	eef0 7a40 	vmov.f32	s15, s0
 8002fe2:	4b65      	ldr	r3, [pc, #404]	@ (8003178 <main+0x3b4>)
 8002fe4:	edc3 7a03 	vstr	s15, [r3, #12]
		 Lsm_Sensor.Gyro_Y=FIRFilter_Update(&IMU_GYROY, Lsm_Sensor.Gyro_Y);
 8002fe8:	4b63      	ldr	r3, [pc, #396]	@ (8003178 <main+0x3b4>)
 8002fea:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff2:	484c      	ldr	r0, [pc, #304]	@ (8003124 <main+0x360>)
 8002ff4:	f7ff faa4 	bl	8002540 <FIRFilter_Update>
 8002ff8:	eef0 7a40 	vmov.f32	s15, s0
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8003178 <main+0x3b4>)
 8002ffe:	edc3 7a04 	vstr	s15, [r3, #16]
		 Lsm_Sensor.Gyro_Z=FIRFilter_Update(&IMU_GYROZ, Lsm_Sensor.Gyro_Z);
 8003002:	4b5d      	ldr	r3, [pc, #372]	@ (8003178 <main+0x3b4>)
 8003004:	edd3 7a05 	vldr	s15, [r3, #20]
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	4847      	ldr	r0, [pc, #284]	@ (800312c <main+0x368>)
 800300e:	f7ff fa97 	bl	8002540 <FIRFilter_Update>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	4b58      	ldr	r3, [pc, #352]	@ (8003178 <main+0x3b4>)
 8003018:	edc3 7a05 	vstr	s15, [r3, #20]

		 toplam_pitch+= (-Lsm_Sensor.Pitch);
 800301c:	4b56      	ldr	r3, [pc, #344]	@ (8003178 <main+0x3b4>)
 800301e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003022:	eeb1 7a67 	vneg.f32	s14, s15
 8003026:	4b55      	ldr	r3, [pc, #340]	@ (800317c <main+0x3b8>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003030:	4b52      	ldr	r3, [pc, #328]	@ (800317c <main+0x3b8>)
 8003032:	edc3 7a00 	vstr	s15, [r3]
		 toplam_roll+= Lsm_Sensor.Roll;
 8003036:	4b50      	ldr	r3, [pc, #320]	@ (8003178 <main+0x3b4>)
 8003038:	ed93 7a06 	vldr	s14, [r3, #24]
 800303c:	4b50      	ldr	r3, [pc, #320]	@ (8003180 <main+0x3bc>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	4b4e      	ldr	r3, [pc, #312]	@ (8003180 <main+0x3bc>)
 8003048:	edc3 7a00 	vstr	s15, [r3]

		 sensor_counter++;
 800304c:	4b4d      	ldr	r3, [pc, #308]	@ (8003184 <main+0x3c0>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b4b      	ldr	r3, [pc, #300]	@ (8003184 <main+0x3c0>)
 8003056:	701a      	strb	r2, [r3, #0]
		 if(sensor_counter == 10)
 8003058:	4b4a      	ldr	r3, [pc, #296]	@ (8003184 <main+0x3c0>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b0a      	cmp	r3, #10
 800305e:	d11e      	bne.n	800309e <main+0x2da>
		 {
			 real_pitch = toplam_pitch/10;
 8003060:	4b46      	ldr	r3, [pc, #280]	@ (800317c <main+0x3b8>)
 8003062:	ed93 7a00 	vldr	s14, [r3]
 8003066:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800306a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800306e:	4b46      	ldr	r3, [pc, #280]	@ (8003188 <main+0x3c4>)
 8003070:	edc3 7a00 	vstr	s15, [r3]
			 real_roll = toplam_roll/10;
 8003074:	4b42      	ldr	r3, [pc, #264]	@ (8003180 <main+0x3bc>)
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800307e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003082:	4b42      	ldr	r3, [pc, #264]	@ (800318c <main+0x3c8>)
 8003084:	edc3 7a00 	vstr	s15, [r3]
			 toplam_roll=0;
 8003088:	4b3d      	ldr	r3, [pc, #244]	@ (8003180 <main+0x3bc>)
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
			 toplam_pitch=0;
 8003090:	4b3a      	ldr	r3, [pc, #232]	@ (800317c <main+0x3b8>)
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
			 sensor_counter=0;
 8003098:	4b3a      	ldr	r3, [pc, #232]	@ (8003184 <main+0x3c0>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
		 }


		 fitil_kontrol= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800309e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030a2:	4816      	ldr	r0, [pc, #88]	@ (80030fc <main+0x338>)
 80030a4:	f001 fbdc 	bl	8004860 <HAL_GPIO_ReadPin>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <main+0x3cc>)
 80030ae:	701a      	strb	r2, [r3, #0]
//		 else {
//			 buzzer_short=0;
//			 buzzer_long =1;
//		 }

		 manyetik_switch= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80030b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030b4:	4810      	ldr	r0, [pc, #64]	@ (80030f8 <main+0x334>)
 80030b6:	f001 fbd3 	bl	8004860 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <main+0x3d0>)
 80030c0:	701a      	strb	r2, [r3, #0]

		// if(manyetik_switch == 1) { buzzer_long=0; buzzer_short =1;}

		 BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80030c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030c6:	480c      	ldr	r0, [pc, #48]	@ (80030f8 <main+0x334>)
 80030c8:	f001 fbca 	bl	8004860 <HAL_GPIO_ReadPin>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <main+0x3d4>)
 80030d2:	701a      	strb	r2, [r3, #0]



/************ MEGÜ durum sorgusu **************************************************/

	if( (compare_arrays(EGU_RX_BUFFER, EGU_durum_sorgusu, EGU_RX_BUFFER_SIZE)) )
 80030d4:	2205      	movs	r2, #5
 80030d6:	4931      	ldr	r1, [pc, #196]	@ (800319c <main+0x3d8>)
 80030d8:	4831      	ldr	r0, [pc, #196]	@ (80031a0 <main+0x3dc>)
 80030da:	f000 fcfb 	bl	8003ad4 <compare_arrays>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d06f      	beq.n	80031c4 <main+0x400>
	{
		HAL_UART_Transmit(&huart6, EGU_TX_BUFFER, EGU_TX_BUFFER_SIZE, 1000);
 80030e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e8:	2222      	movs	r2, #34	@ 0x22
 80030ea:	492e      	ldr	r1, [pc, #184]	@ (80031a4 <main+0x3e0>)
 80030ec:	4805      	ldr	r0, [pc, #20]	@ (8003104 <main+0x340>)
 80030ee:	f004 faba 	bl	8007666 <HAL_UART_Transmit>

		for(uint8_t i=0;i<5;i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	e061      	b.n	80031bc <main+0x3f8>
 80030f8:	40020800 	.word	0x40020800
 80030fc:	40020400 	.word	0x40020400
 8003100:	2000024a 	.word	0x2000024a
 8003104:	200001dc 	.word	0x200001dc
 8003108:	20000194 	.word	0x20000194
 800310c:	2000014c 	.word	0x2000014c
 8003110:	00000000 	.word	0x00000000
 8003114:	3dcccccd 	.word	0x3dcccccd
 8003118:	3ba3d70a 	.word	0x3ba3d70a
 800311c:	200002c4 	.word	0x200002c4
 8003120:	20000304 	.word	0x20000304
 8003124:	20000394 	.word	0x20000394
 8003128:	2000034c 	.word	0x2000034c
 800312c:	200003dc 	.word	0x200003dc
 8003130:	20000270 	.word	0x20000270
 8003134:	20000271 	.word	0x20000271
 8003138:	20000272 	.word	0x20000272
 800313c:	20000274 	.word	0x20000274
 8003140:	20000278 	.word	0x20000278
 8003144:	2000026e 	.word	0x2000026e
 8003148:	200002d8 	.word	0x200002d8
 800314c:	20000298 	.word	0x20000298
 8003150:	20000424 	.word	0x20000424
 8003154:	20000470 	.word	0x20000470
 8003158:	20000464 	.word	0x20000464
 800315c:	40590000 	.word	0x40590000
 8003160:	2000027c 	.word	0x2000027c
 8003164:	20000280 	.word	0x20000280
 8003168:	20000290 	.word	0x20000290
 800316c:	2000028c 	.word	0x2000028c
 8003170:	20000284 	.word	0x20000284
 8003174:	2000029c 	.word	0x2000029c
 8003178:	200002e0 	.word	0x200002e0
 800317c:	200002b8 	.word	0x200002b8
 8003180:	200002bc 	.word	0x200002bc
 8003184:	200002c0 	.word	0x200002c0
 8003188:	200002b0 	.word	0x200002b0
 800318c:	200002b4 	.word	0x200002b4
 8003190:	2000026c 	.word	0x2000026c
 8003194:	20000051 	.word	0x20000051
 8003198:	20000266 	.word	0x20000266
 800319c:	20000044 	.word	0x20000044
 80031a0:	20000220 	.word	0x20000220
 80031a4:	20000228 	.word	0x20000228
		{
		EGU_RX_BUFFER[i++]=0;
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	71fa      	strb	r2, [r7, #7]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003364 <main+0x5a0>)
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]
		for(uint8_t i=0;i<5;i++)
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	3301      	adds	r3, #1
 80031ba:	71fb      	strb	r3, [r7, #7]
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d9f2      	bls.n	80031a8 <main+0x3e4>
 80031c2:	e01a      	b.n	80031fa <main+0x436>
		}
	}
	else if ((compare_arrays(EGU_RX_BUFFER, EGU_motor_atesleme, EGU_RX_BUFFER_SIZE)))
 80031c4:	2205      	movs	r2, #5
 80031c6:	4968      	ldr	r1, [pc, #416]	@ (8003368 <main+0x5a4>)
 80031c8:	4866      	ldr	r0, [pc, #408]	@ (8003364 <main+0x5a0>)
 80031ca:	f000 fc83 	bl	8003ad4 <compare_arrays>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d012      	beq.n	80031fa <main+0x436>
	{

		motor_ates=1;
 80031d4:	4b65      	ldr	r3, [pc, #404]	@ (800336c <main+0x5a8>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0;i<5;i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	71bb      	strb	r3, [r7, #6]
 80031de:	e009      	b.n	80031f4 <main+0x430>
			{
			EGU_RX_BUFFER[i++]=0;
 80031e0:	79bb      	ldrb	r3, [r7, #6]
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	71ba      	strb	r2, [r7, #6]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003364 <main+0x5a0>)
 80031ea:	2100      	movs	r1, #0
 80031ec:	5499      	strb	r1, [r3, r2]
			for(uint8_t i=0;i<5;i++)
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	3301      	adds	r3, #1
 80031f2:	71bb      	strb	r3, [r7, #6]
 80031f4:	79bb      	ldrb	r3, [r7, #6]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d9f2      	bls.n	80031e0 <main+0x41c>

/***********************************END*************************************************/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
			switch(MEGU){
 80031fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003370 <main+0x5ac>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d86b      	bhi.n	80032da <main+0x516>
 8003202:	a201      	add	r2, pc, #4	@ (adr r2, 8003208 <main+0x444>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	08003219 	.word	0x08003219
 800320c:	0800324b 	.word	0x0800324b
 8003210:	0800326f 	.word	0x0800326f
 8003214:	08003285 	.word	0x08003285
		case RAMPA:
				MEGU_mod=1;
 8003218:	4b56      	ldr	r3, [pc, #344]	@ (8003374 <main+0x5b0>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
			  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

				if(-Lsm_Sensor.Accel_X > 10 && altitude_rampa_control ==1 )
 800321e:	4b56      	ldr	r3, [pc, #344]	@ (8003378 <main+0x5b4>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8003228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d400      	bmi.n	8003234 <main+0x470>

					rampa_control=1;
					MEGU=UCUS_BASLADI;
				  }

			  break;
 8003232:	e04d      	b.n	80032d0 <main+0x50c>
				if(-Lsm_Sensor.Accel_X > 10 && altitude_rampa_control ==1 )
 8003234:	4b51      	ldr	r3, [pc, #324]	@ (800337c <main+0x5b8>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d149      	bne.n	80032d0 <main+0x50c>
					rampa_control=1;
 800323c:	4b50      	ldr	r3, [pc, #320]	@ (8003380 <main+0x5bc>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
					MEGU=UCUS_BASLADI;
 8003242:	4b4b      	ldr	r3, [pc, #300]	@ (8003370 <main+0x5ac>)
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
			  break;
 8003248:	e042      	b.n	80032d0 <main+0x50c>

		case UCUS_BASLADI:
				MEGU_mod=2;
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <main+0x5b0>)
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
				if(altitude_kalman>350){
 8003250:	4b4c      	ldr	r3, [pc, #304]	@ (8003384 <main+0x5c0>)
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003388 <main+0x5c4>
 800325a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	dc00      	bgt.n	8003266 <main+0x4a2>

				MEGU=KADEME_AYRILDIMI;
				}
			 break;
 8003264:	e039      	b.n	80032da <main+0x516>
				MEGU=KADEME_AYRILDIMI;
 8003266:	4b42      	ldr	r3, [pc, #264]	@ (8003370 <main+0x5ac>)
 8003268:	2202      	movs	r2, #2
 800326a:	701a      	strb	r2, [r3, #0]
			 break;
 800326c:	e035      	b.n	80032da <main+0x516>

		case KADEME_AYRILDIMI:
				MEGU_mod=3;
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <main+0x5b0>)
 8003270:	2203      	movs	r2, #3
 8003272:	701a      	strb	r2, [r3, #0]

		if(manyetik_switch==1)
 8003274:	4b45      	ldr	r3, [pc, #276]	@ (800338c <main+0x5c8>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d12b      	bne.n	80032d4 <main+0x510>
			{
				MEGU=AYRILDI;
 800327c:	4b3c      	ldr	r3, [pc, #240]	@ (8003370 <main+0x5ac>)
 800327e:	2203      	movs	r2, #3
 8003280:	701a      	strb	r2, [r3, #0]
			}

			 break;
 8003282:	e027      	b.n	80032d4 <main+0x510>

		case AYRILDI:
				MEGU_mod=4;
 8003284:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <main+0x5b0>)
 8003286:	2204      	movs	r2, #4
 8003288:	701a      	strb	r2, [r3, #0]
				if(real_pitch >= 25 && motor_ates==1 ) // pozisyon kontrolü
 800328a:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <main+0x5cc>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	da00      	bge.n	80032a0 <main+0x4dc>

					set1=set_timer;
					}
				}

			 break;
 800329e:	e01b      	b.n	80032d8 <main+0x514>
				if(real_pitch >= 25 && motor_ates==1 ) // pozisyon kontrolü
 80032a0:	4b32      	ldr	r3, [pc, #200]	@ (800336c <main+0x5a8>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d117      	bne.n	80032d8 <main+0x514>
					if(set1-set_timer==10)
 80032a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003394 <main+0x5d0>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003398 <main+0x5d4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b0a      	cmp	r3, #10
 80032b4:	d110      	bne.n	80032d8 <main+0x514>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 80032b6:	2110      	movs	r1, #16
 80032b8:	4838      	ldr	r0, [pc, #224]	@ (800339c <main+0x5d8>)
 80032ba:	f001 fb02 	bl	80048c2 <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80032be:	2110      	movs	r1, #16
 80032c0:	4837      	ldr	r0, [pc, #220]	@ (80033a0 <main+0x5dc>)
 80032c2:	f001 fafe 	bl	80048c2 <HAL_GPIO_TogglePin>
					set1=set_timer;
 80032c6:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <main+0x5d4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a32      	ldr	r2, [pc, #200]	@ (8003394 <main+0x5d0>)
 80032cc:	6013      	str	r3, [r2, #0]
			 break;
 80032ce:	e003      	b.n	80032d8 <main+0x514>
			  break;
 80032d0:	bf00      	nop
 80032d2:	e002      	b.n	80032da <main+0x516>
			 break;
 80032d4:	bf00      	nop
 80032d6:	e000      	b.n	80032da <main+0x516>
			 break;
 80032d8:	bf00      	nop

		}

/************************************************************************************/
		  if(altitude >30 && MEGU <3)
 80032da:	4b32      	ldr	r3, [pc, #200]	@ (80033a4 <main+0x5e0>)
 80032dc:	edd3 7a00 	vldr	s15, [r3]
 80032e0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	dd06      	ble.n	80032fc <main+0x538>
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <main+0x5ac>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d802      	bhi.n	80032fc <main+0x538>
		  {
			  altitude_rampa_control =1;
 80032f6:	4b21      	ldr	r3, [pc, #132]	@ (800337c <main+0x5b8>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
		  }
/*************************************************************************************/
		  if(altitude>altitude_max) altitude_max = altitude_kalman;
 80032fc:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <main+0x5e0>)
 80032fe:	ed93 7a00 	vldr	s14, [r3]
 8003302:	4b29      	ldr	r3, [pc, #164]	@ (80033a8 <main+0x5e4>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003310:	dd03      	ble.n	800331a <main+0x556>
 8003312:	4b1c      	ldr	r3, [pc, #112]	@ (8003384 <main+0x5c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a24      	ldr	r2, [pc, #144]	@ (80033a8 <main+0x5e4>)
 8003318:	6013      	str	r3, [r2, #0]

		  if(speed>speed_max) speed_max = speed;
 800331a:	4b24      	ldr	r3, [pc, #144]	@ (80033ac <main+0x5e8>)
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <main+0x5ec>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	dd03      	ble.n	8003338 <main+0x574>
 8003330:	4b1e      	ldr	r3, [pc, #120]	@ (80033ac <main+0x5e8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1e      	ldr	r2, [pc, #120]	@ (80033b0 <main+0x5ec>)
 8003336:	6013      	str	r3, [r2, #0]

		  if( -Lsm_Sensor.Accel_X> x_max) x_max =  -Lsm_Sensor.Accel_X;
 8003338:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <main+0x5b4>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	eeb1 7a67 	vneg.f32	s14, s15
 8003342:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <main+0x5f0>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	dd07      	ble.n	8003362 <main+0x59e>
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <main+0x5b4>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	eef1 7a67 	vneg.f32	s15, s15
 800335c:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <main+0x5f0>)
 800335e:	edc3 7a00 	vstr	s15, [r3]
	  MEGU_TX_BUF_FILL();
 8003362:	e5aa      	b.n	8002eba <main+0xf6>
 8003364:	20000220 	.word	0x20000220
 8003368:	2000004c 	.word	0x2000004c
 800336c:	2000026d 	.word	0x2000026d
 8003370:	200002dc 	.word	0x200002dc
 8003374:	20000265 	.word	0x20000265
 8003378:	200002e0 	.word	0x200002e0
 800337c:	200002a0 	.word	0x200002a0
 8003380:	2000026f 	.word	0x2000026f
 8003384:	200002d8 	.word	0x200002d8
 8003388:	43af0000 	.word	0x43af0000
 800338c:	20000051 	.word	0x20000051
 8003390:	200002b0 	.word	0x200002b0
 8003394:	20000278 	.word	0x20000278
 8003398:	20000274 	.word	0x20000274
 800339c:	40020800 	.word	0x40020800
 80033a0:	40020400 	.word	0x40020400
 80033a4:	20000284 	.word	0x20000284
 80033a8:	200002ac 	.word	0x200002ac
 80033ac:	2000029c 	.word	0x2000029c
 80033b0:	200002a4 	.word	0x200002a4
 80033b4:	200002a8 	.word	0x200002a8

080033b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b094      	sub	sp, #80	@ 0x50
 80033bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	2234      	movs	r2, #52	@ 0x34
 80033c4:	2100      	movs	r1, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 fafc 	bl	80089c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	2300      	movs	r3, #0
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	4b29      	ldr	r3, [pc, #164]	@ (8003488 <SystemClock_Config+0xd0>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	4a28      	ldr	r2, [pc, #160]	@ (8003488 <SystemClock_Config+0xd0>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ec:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <SystemClock_Config+0xd0>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f8:	2300      	movs	r3, #0
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	4b23      	ldr	r3, [pc, #140]	@ (800348c <SystemClock_Config+0xd4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a22      	ldr	r2, [pc, #136]	@ (800348c <SystemClock_Config+0xd4>)
 8003402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b20      	ldr	r3, [pc, #128]	@ (800348c <SystemClock_Config+0xd4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003414:	2301      	movs	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800341c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800341e:	2302      	movs	r3, #2
 8003420:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003422:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003426:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003428:	2304      	movs	r3, #4
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800342c:	23a8      	movs	r3, #168	@ 0xa8
 800342e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003430:	2302      	movs	r3, #2
 8003432:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003434:	2307      	movs	r3, #7
 8003436:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003438:	2302      	movs	r3, #2
 800343a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fb05 	bl	8006a50 <HAL_RCC_OscConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800344c:	f000 fc6e 	bl	8003d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003450:	230f      	movs	r3, #15
 8003452:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8003454:	2303      	movs	r3, #3
 8003456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003458:	2300      	movs	r3, #0
 800345a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800345c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003466:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	2105      	movs	r1, #5
 800346e:	4618      	mov	r0, r3
 8003470:	f002 ffa4 	bl	80063bc <HAL_RCC_ClockConfig>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800347a:	f000 fc57 	bl	8003d2c <Error_Handler>
  }
}
 800347e:	bf00      	nop
 8003480:	3750      	adds	r7, #80	@ 0x50
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800
 800348c:	40007000 	.word	0x40007000

08003490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003494:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <MX_I2C1_Init+0x50>)
 8003496:	4a13      	ldr	r2, [pc, #76]	@ (80034e4 <MX_I2C1_Init+0x54>)
 8003498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800349a:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <MX_I2C1_Init+0x50>)
 800349c:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <MX_I2C1_Init+0x58>)
 800349e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80034a6:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034ba:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c0:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034c6:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034cc:	4804      	ldr	r0, [pc, #16]	@ (80034e0 <MX_I2C1_Init+0x50>)
 80034ce:	f001 fa13 	bl	80048f8 <HAL_I2C_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034d8:	f000 fc28 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200000f8 	.word	0x200000f8
 80034e4:	40005400 	.word	0x40005400
 80034e8:	00061a80 	.word	0x00061a80

080034ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f2:	463b      	mov	r3, r7
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034fa:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <MX_TIM6_Init+0x64>)
 80034fc:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <MX_TIM6_Init+0x68>)
 80034fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 8003500:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <MX_TIM6_Init+0x64>)
 8003502:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8003506:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <MX_TIM6_Init+0x64>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <MX_TIM6_Init+0x64>)
 8003510:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003514:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003516:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <MX_TIM6_Init+0x64>)
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800351c:	480c      	ldr	r0, [pc, #48]	@ (8003550 <MX_TIM6_Init+0x64>)
 800351e:	f003 fd35 	bl	8006f8c <HAL_TIM_Base_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003528:	f000 fc00 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800352c:	2300      	movs	r3, #0
 800352e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003534:	463b      	mov	r3, r7
 8003536:	4619      	mov	r1, r3
 8003538:	4805      	ldr	r0, [pc, #20]	@ (8003550 <MX_TIM6_Init+0x64>)
 800353a:	f003 ffb7 	bl	80074ac <HAL_TIMEx_MasterConfigSynchronization>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003544:	f000 fbf2 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	2000014c 	.word	0x2000014c
 8003554:	40001000 	.word	0x40001000

08003558 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800355c:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <MX_TIM10_Init+0x40>)
 800355e:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <MX_TIM10_Init+0x44>)
 8003560:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <MX_TIM10_Init+0x40>)
 8003564:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8003568:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356a:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <MX_TIM10_Init+0x40>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8003570:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <MX_TIM10_Init+0x40>)
 8003572:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003576:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003578:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <MX_TIM10_Init+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <MX_TIM10_Init+0x40>)
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003584:	4804      	ldr	r0, [pc, #16]	@ (8003598 <MX_TIM10_Init+0x40>)
 8003586:	f003 fd01 	bl	8006f8c <HAL_TIM_Base_Init>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003590:	f000 fbcc 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000194 	.word	0x20000194
 800359c:	40014400 	.word	0x40014400

080035a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80035a4:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <MX_USART6_UART_Init+0x50>)
 80035a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 80035aa:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035ac:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80035b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035c6:	220c      	movs	r2, #12
 80035c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80035d6:	4805      	ldr	r0, [pc, #20]	@ (80035ec <MX_USART6_UART_Init+0x4c>)
 80035d8:	f003 fff8 	bl	80075cc <HAL_UART_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80035e2:	f000 fba3 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200001dc 	.word	0x200001dc
 80035f0:	40011400 	.word	0x40011400

080035f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	@ 0x28
 80035f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
 8003608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	4b57      	ldr	r3, [pc, #348]	@ (800376c <MX_GPIO_Init+0x178>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a56      	ldr	r2, [pc, #344]	@ (800376c <MX_GPIO_Init+0x178>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <MX_GPIO_Init+0x178>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	4b50      	ldr	r3, [pc, #320]	@ (800376c <MX_GPIO_Init+0x178>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	4a4f      	ldr	r2, [pc, #316]	@ (800376c <MX_GPIO_Init+0x178>)
 8003630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003634:	6313      	str	r3, [r2, #48]	@ 0x30
 8003636:	4b4d      	ldr	r3, [pc, #308]	@ (800376c <MX_GPIO_Init+0x178>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b49      	ldr	r3, [pc, #292]	@ (800376c <MX_GPIO_Init+0x178>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	4a48      	ldr	r2, [pc, #288]	@ (800376c <MX_GPIO_Init+0x178>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6313      	str	r3, [r2, #48]	@ 0x30
 8003652:	4b46      	ldr	r3, [pc, #280]	@ (800376c <MX_GPIO_Init+0x178>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	4b42      	ldr	r3, [pc, #264]	@ (800376c <MX_GPIO_Init+0x178>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	4a41      	ldr	r2, [pc, #260]	@ (800376c <MX_GPIO_Init+0x178>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6313      	str	r3, [r2, #48]	@ 0x30
 800366e:	4b3f      	ldr	r3, [pc, #252]	@ (800376c <MX_GPIO_Init+0x178>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800367a:	2201      	movs	r2, #1
 800367c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003680:	483b      	ldr	r0, [pc, #236]	@ (8003770 <MX_GPIO_Init+0x17c>)
 8003682:	f001 f905 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8003686:	2200      	movs	r2, #0
 8003688:	f640 4112 	movw	r1, #3090	@ 0xc12
 800368c:	4838      	ldr	r0, [pc, #224]	@ (8003770 <MX_GPIO_Init+0x17c>)
 800368e:	f001 f8ff 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);
 8003692:	2200      	movs	r2, #0
 8003694:	f246 0118 	movw	r1, #24600	@ 0x6018
 8003698:	4836      	ldr	r0, [pc, #216]	@ (8003774 <MX_GPIO_Init+0x180>)
 800369a:	f001 f8f9 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 CS_Pin BUZZER_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|BUZZER_Pin|GATE_D_Pin
 800369e:	f642 4312 	movw	r3, #11282	@ 0x2c12
 80036a2:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a4:	2301      	movs	r3, #1
 80036a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4619      	mov	r1, r3
 80036b6:	482e      	ldr	r0, [pc, #184]	@ (8003770 <MX_GPIO_Init+0x17c>)
 80036b8:	f000 ff3e 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036c6:	2302      	movs	r3, #2
 80036c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4827      	ldr	r0, [pc, #156]	@ (8003770 <MX_GPIO_Init+0x17c>)
 80036d2:	f000 ff31 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e2:	2303      	movs	r3, #3
 80036e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036e6:	2305      	movs	r3, #5
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	4821      	ldr	r0, [pc, #132]	@ (8003778 <MX_GPIO_Init+0x184>)
 80036f2:	f000 ff21 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003700:	2301      	movs	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	481a      	ldr	r0, [pc, #104]	@ (8003774 <MX_GPIO_Init+0x180>)
 800370c:	f000 ff14 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GATE_B_Pin|GATE_A_Pin;
 8003710:	f246 0318 	movw	r3, #24600	@ 0x6018
 8003714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003716:	2301      	movs	r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	4812      	ldr	r0, [pc, #72]	@ (8003774 <MX_GPIO_Init+0x180>)
 800372a:	f000 ff05 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800372e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4619      	mov	r1, r3
 8003742:	480b      	ldr	r0, [pc, #44]	@ (8003770 <MX_GPIO_Init+0x17c>)
 8003744:	f000 fef8 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8003748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800374c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800374e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4619      	mov	r1, r3
 800375e:	4805      	ldr	r0, [pc, #20]	@ (8003774 <MX_GPIO_Init+0x180>)
 8003760:	f000 feea 	bl	8004538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003764:	bf00      	nop
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	40020800 	.word	0x40020800
 8003774:	40020400 	.word	0x40020400
 8003778:	40020000 	.word	0x40020000

0800377c <BME_I2C_Testsensor>:

/* USER CODE BEGIN 4 */
int16_t BME_I2C_Testsensor(void){
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	status=HAL_I2C_IsDeviceReady(&hi2c1,0x76 <<1, 4, 100);
 8003782:	2364      	movs	r3, #100	@ 0x64
 8003784:	2204      	movs	r2, #4
 8003786:	21ec      	movs	r1, #236	@ 0xec
 8003788:	4807      	ldr	r0, [pc, #28]	@ (80037a8 <BME_I2C_Testsensor+0x2c>)
 800378a:	f002 f83d 	bl	8005808 <HAL_I2C_IsDeviceReady>
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]


	if(HAL_OK==status){
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <BME_I2C_Testsensor+0x20>

		return 0;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <BME_I2C_Testsensor+0x22>
		}
	else {
		return 1;
 800379c:	2301      	movs	r3, #1
		}


}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200000f8 	.word	0x200000f8

080037ac <LSM_I2C_Testsensor>:
int16_t LSM_I2C_Testsensor(void){
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	status=HAL_I2C_IsDeviceReady(&hi2c1,0x6A <<1, 4, 100);
 80037b2:	2364      	movs	r3, #100	@ 0x64
 80037b4:	2204      	movs	r2, #4
 80037b6:	21d4      	movs	r1, #212	@ 0xd4
 80037b8:	4807      	ldr	r0, [pc, #28]	@ (80037d8 <LSM_I2C_Testsensor+0x2c>)
 80037ba:	f002 f825 	bl	8005808 <HAL_I2C_IsDeviceReady>
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]


	if(HAL_OK==status){
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <LSM_I2C_Testsensor+0x20>

		return 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <LSM_I2C_Testsensor+0x22>
		}
	else {
		return 1;
 80037cc:	2301      	movs	r3, #1
		}


}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200000f8 	.word	0x200000f8
 80037dc:	00000000 	.word	0x00000000

080037e0 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 80037e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003898 <BME280_Get_Altitude+0xb8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc fe4e 	bl	800048c <__aeabi_ui2d>
 80037f0:	a321      	add	r3, pc, #132	@ (adr r3, 8003878 <BME280_Get_Altitude+0x98>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fc ffed 	bl	80007d4 <__aeabi_ddiv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd f96d 	bl	8000ae0 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	607b      	str	r3, [r7, #4]
//	float temp = comp_data.temperature / 100.0;
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fc fe60 	bl	80004d0 <__aeabi_f2d>
 8003810:	a31b      	add	r3, pc, #108	@ (adr r3, 8003880 <BME280_Get_Altitude+0xa0>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc ffdd 	bl	80007d4 <__aeabi_ddiv>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	ec43 2b17 	vmov	d7, r2, r3
 8003822:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8003888 <BME280_Get_Altitude+0xa8>
 8003826:	eeb0 0a47 	vmov.f32	s0, s14
 800382a:	eef0 0a67 	vmov.f32	s1, s15
 800382e:	f005 f965 	bl	8008afc <pow>
 8003832:	ec53 2b10 	vmov	r2, r3, d0
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	4918      	ldr	r1, [pc, #96]	@ (800389c <BME280_Get_Altitude+0xbc>)
 800383c:	f7fc fce8 	bl	8000210 <__aeabi_dsub>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	a311      	add	r3, pc, #68	@ (adr r3, 8003890 <BME280_Get_Altitude+0xb0>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f7fc fe97 	bl	8000580 <__aeabi_dmul>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f7fd f941 	bl	8000ae0 <__aeabi_d2f>
 800385e:	4603      	mov	r3, r0
 8003860:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <BME280_Get_Altitude+0xc0>)
 8003862:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8003864:	4b0e      	ldr	r3, [pc, #56]	@ (80038a0 <BME280_Get_Altitude+0xc0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	ee07 3a90 	vmov	s15, r3
}
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	00000000 	.word	0x00000000
 800387c:	40c38800 	.word	0x40c38800
 8003880:	00000000 	.word	0x00000000
 8003884:	408faa00 	.word	0x408faa00
 8003888:	ccd9456c 	.word	0xccd9456c
 800388c:	3fc85b95 	.word	0x3fc85b95
 8003890:	00000000 	.word	0x00000000
 8003894:	40e5a540 	.word	0x40e5a540
 8003898:	20000464 	.word	0x20000464
 800389c:	3ff00000 	.word	0x3ff00000
 80038a0:	20000294 	.word	0x20000294

080038a4 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	603a      	str	r2, [r7, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
 80038b2:	460b      	mov	r3, r1
 80038b4:	71bb      	strb	r3, [r7, #6]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	b299      	uxth	r1, r3
 80038c2:	1dba      	adds	r2, r7, #6
 80038c4:	230a      	movs	r3, #10
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2301      	movs	r3, #1
 80038ca:	4811      	ldr	r0, [pc, #68]	@ (8003910 <user_i2c_read+0x6c>)
 80038cc:	f001 f958 	bl	8004b80 <HAL_I2C_Master_Transmit>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <user_i2c_read+0x38>
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	e014      	b.n	8003906 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	b21b      	sxth	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	b299      	uxth	r1, r3
 80038ea:	88bb      	ldrh	r3, [r7, #4]
 80038ec:	220a      	movs	r2, #10
 80038ee:	9200      	str	r2, [sp, #0]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4807      	ldr	r0, [pc, #28]	@ (8003910 <user_i2c_read+0x6c>)
 80038f4:	f001 fa42 	bl	8004d7c <HAL_I2C_Master_Receive>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <user_i2c_read+0x60>
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003902:	e000      	b.n	8003906 <user_i2c_read+0x62>

  return 0;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200000f8 	.word	0x200000f8

08003914 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fc43 	bl	80041a8 <HAL_Delay>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	603a      	str	r2, [r7, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
 800393a:	460b      	mov	r3, r1
 800393c:	71bb      	strb	r3, [r7, #6]
 800393e:	4613      	mov	r3, r2
 8003940:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8003942:	88bb      	ldrh	r3, [r7, #4]
 8003944:	3301      	adds	r3, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f004 ff7e 	bl	8008848 <malloc>
 800394c:	4603      	mov	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8003950:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3301      	adds	r3, #1
 800395c:	88ba      	ldrh	r2, [r7, #4]
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f005 f873 	bl	8008a4c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	b29b      	uxth	r3, r3
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	b299      	uxth	r1, r3
 800396e:	88bb      	ldrh	r3, [r7, #4]
 8003970:	3301      	adds	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	9200      	str	r2, [sp, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4808      	ldr	r0, [pc, #32]	@ (80039a0 <user_i2c_write+0x74>)
 800397e:	f001 f8ff 	bl	8004b80 <HAL_I2C_Master_Transmit>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <user_i2c_write+0x62>
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e003      	b.n	8003996 <user_i2c_write+0x6a>

  free(buf);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f004 ff62 	bl	8008858 <free>
  return 0;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200000f8 	.word	0x200000f8

080039a4 <Buzzer>:

void Buzzer(int how_many , uint32_t how_long)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	if((how_many %2) == 1) how_many++;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	bfb8      	it	lt
 80039b8:	425b      	neglt	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <Buzzer+0x20>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3301      	adds	r3, #1
 80039c2:	607b      	str	r3, [r7, #4]

	  for(uint8_t i=0;i<how_many; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e013      	b.n	80039f2 <Buzzer+0x4e>
	  {
	  	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_4);
 80039ca:	2110      	movs	r1, #16
 80039cc:	481c      	ldr	r0, [pc, #112]	@ (8003a40 <Buzzer+0x9c>)
 80039ce:	f000 ff78 	bl	80048c2 <HAL_GPIO_TogglePin>
	  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80039d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039d6:	481b      	ldr	r0, [pc, #108]	@ (8003a44 <Buzzer+0xa0>)
 80039d8:	f000 ff73 	bl	80048c2 <HAL_GPIO_TogglePin>
	  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 80039dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039e0:	4818      	ldr	r0, [pc, #96]	@ (8003a44 <Buzzer+0xa0>)
 80039e2:	f000 ff6e 	bl	80048c2 <HAL_GPIO_TogglePin>
	  		HAL_Delay(how_long);
 80039e6:	6838      	ldr	r0, [r7, #0]
 80039e8:	f000 fbde 	bl	80041a8 <HAL_Delay>
	  for(uint8_t i=0;i<how_many; i++)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	3301      	adds	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	dce7      	bgt.n	80039ca <Buzzer+0x26>

	  }

	  fitil_kontrol=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80039fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039fe:	4811      	ldr	r0, [pc, #68]	@ (8003a44 <Buzzer+0xa0>)
 8003a00:	f000 ff2e 	bl	8004860 <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <Buzzer+0xa4>)
 8003a0a:	701a      	strb	r2, [r3, #0]
	  if(!fitil_kontrol)
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <Buzzer+0xa4>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d111      	bne.n	8003a38 <Buzzer+0x94>
	  		{
	  			HAL_Delay(1000);
 8003a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a18:	f000 fbc6 	bl	80041a8 <HAL_Delay>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	2110      	movs	r1, #16
 8003a20:	4807      	ldr	r0, [pc, #28]	@ (8003a40 <Buzzer+0x9c>)
 8003a22:	f000 ff35 	bl	8004890 <HAL_GPIO_WritePin>
	  			HAL_Delay(3000);
 8003a26:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003a2a:	f000 fbbd 	bl	80041a8 <HAL_Delay>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2110      	movs	r1, #16
 8003a32:	4803      	ldr	r0, [pc, #12]	@ (8003a40 <Buzzer+0x9c>)
 8003a34:	f000 ff2c 	bl	8004890 <HAL_GPIO_WritePin>
	  		}
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020400 	.word	0x40020400
 8003a48:	2000026c 	.word	0x2000026c

08003a4c <Altitude_Offset>:

void Altitude_Offset()
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<5;i++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	71fb      	strb	r3, [r7, #7]
 8003a56:	e02b      	b.n	8003ab0 <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 8003a58:	2028      	movs	r0, #40	@ 0x28
 8003a5a:	f000 fba5 	bl	80041a8 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003a5e:	4918      	ldr	r1, [pc, #96]	@ (8003ac0 <Altitude_Offset+0x74>)
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fd fb9e 	bl	80011a2 <bme280_set_sensor_mode>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <Altitude_Offset+0x78>)
 8003a6c:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003a6e:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <Altitude_Offset+0x74>)
 8003a70:	4915      	ldr	r1, [pc, #84]	@ (8003ac8 <Altitude_Offset+0x7c>)
 8003a72:	2007      	movs	r0, #7
 8003a74:	f7fd fc11 	bl	800129a <bme280_get_sensor_data>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <Altitude_Offset+0x78>)
 8003a7e:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <Altitude_Offset+0x78>)
 8003a82:	f993 3000 	ldrsb.w	r3, [r3]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <Altitude_Offset+0x7c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <Altitude_Offset+0x80>)
 8003a98:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 8003a9c:	f7ff fea0 	bl	80037e0 <BME280_Get_Altitude>
 8003aa0:	eef0 7a40 	vmov.f32	s15, s0
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <Altitude_Offset+0x84>)
 8003aa6:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<5;i++)
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	3301      	adds	r3, #1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d9d0      	bls.n	8003a58 <Altitude_Offset+0xc>
	  }
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000424 	.word	0x20000424
 8003ac4:	20000470 	.word	0x20000470
 8003ac8:	20000464 	.word	0x20000464
 8003acc:	20000290 	.word	0x20000290
 8003ad0:	2000028c 	.word	0x2000028c

08003ad4 <compare_arrays>:


int compare_arrays(uint8_t *array1, uint8_t *array2, uint16_t size) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < size-1; i++) {
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	82fb      	strh	r3, [r7, #22]
 8003ae6:	e00e      	b.n	8003b06 <compare_arrays+0x32>
        if (array1[i] != array2[i]) {
 8003ae8:	8afb      	ldrh	r3, [r7, #22]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	8afb      	ldrh	r3, [r7, #22]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	440b      	add	r3, r1
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <compare_arrays+0x2c>
            return 0; // Diziler farklı
 8003afc:	2300      	movs	r3, #0
 8003afe:	e008      	b.n	8003b12 <compare_arrays+0x3e>
    for (uint16_t i = 0; i < size-1; i++) {
 8003b00:	8afb      	ldrh	r3, [r7, #22]
 8003b02:	3301      	adds	r3, #1
 8003b04:	82fb      	strh	r3, [r7, #22]
 8003b06:	8afa      	ldrh	r2, [r7, #22]
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	dbeb      	blt.n	8003ae8 <compare_arrays+0x14>
        }
    }
    return 1; // Diziler aynı
 8003b10:	2301      	movs	r3, #1
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <MEGU_TX_BUF_FILL>:

void MEGU_TX_BUF_FILL(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	@ 0x24
 8003b24:	af00      	add	r7, sp, #0
	  EGU_TX_BUFFER[0]=egu_byte_0;
 8003b26:	2254      	movs	r2, #84	@ 0x54
 8003b28:	4b56      	ldr	r3, [pc, #344]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003b2a:	701a      	strb	r2, [r3, #0]
	  EGU_TX_BUFFER[1]=egu_byte_1;
 8003b2c:	2252      	movs	r2, #82	@ 0x52
 8003b2e:	4b55      	ldr	r3, [pc, #340]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003b30:	705a      	strb	r2, [r3, #1]


	  float2unit8 f2u8_zaman;
	  f2u8_zaman.fVal=zaman;
 8003b32:	4b55      	ldr	r3, [pc, #340]	@ (8003c88 <MEGU_TX_BUF_FILL+0x168>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]
     	 for(uint8_t i=0;i<4;i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e00b      	b.n	8003b56 <MEGU_TX_BUF_FILL+0x36>
	 	 {
     		EGU_TX_BUFFER[i+2]=f2u8_zaman.array[i];
 8003b3e:	7ffa      	ldrb	r2, [r7, #31]
 8003b40:	7ffb      	ldrb	r3, [r7, #31]
 8003b42:	3302      	adds	r3, #2
 8003b44:	3220      	adds	r2, #32
 8003b46:	443a      	add	r2, r7
 8003b48:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8003b4c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003b4e:	54d1      	strb	r1, [r2, r3]
     	 for(uint8_t i=0;i<4;i++)
 8003b50:	7ffb      	ldrb	r3, [r7, #31]
 8003b52:	3301      	adds	r3, #1
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d9f0      	bls.n	8003b3e <MEGU_TX_BUF_FILL+0x1e>
	 	 }
   	  float2unit8 f2u8_battery;
   	  f2u8_battery.fVal=MEGU_battery;
 8003b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c8c <MEGU_TX_BUF_FILL+0x16c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b68:	edc7 7a04 	vstr	s15, [r7, #16]
        	 for(uint8_t i=0;i<4;i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77bb      	strb	r3, [r7, #30]
 8003b70:	e00b      	b.n	8003b8a <MEGU_TX_BUF_FILL+0x6a>
   	 	 {
        		EGU_TX_BUFFER[i+6]=f2u8_battery.array[i];
 8003b72:	7fba      	ldrb	r2, [r7, #30]
 8003b74:	7fbb      	ldrb	r3, [r7, #30]
 8003b76:	3306      	adds	r3, #6
 8003b78:	3220      	adds	r2, #32
 8003b7a:	443a      	add	r2, r7
 8003b7c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8003b80:	4a40      	ldr	r2, [pc, #256]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003b82:	54d1      	strb	r1, [r2, r3]
        	 for(uint8_t i=0;i<4;i++)
 8003b84:	7fbb      	ldrb	r3, [r7, #30]
 8003b86:	3301      	adds	r3, #1
 8003b88:	77bb      	strb	r3, [r7, #30]
 8003b8a:	7fbb      	ldrb	r3, [r7, #30]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d9f0      	bls.n	8003b72 <MEGU_TX_BUF_FILL+0x52>
   	 	 }
	 float2unit8 f2u8_alt;
	 f2u8_alt.fVal=altitude_kalman;
 8003b90:	4b3f      	ldr	r3, [pc, #252]	@ (8003c90 <MEGU_TX_BUF_FILL+0x170>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
			 for(uint8_t i=0;i<4;i++)
 8003b96:	2300      	movs	r3, #0
 8003b98:	777b      	strb	r3, [r7, #29]
 8003b9a:	e00b      	b.n	8003bb4 <MEGU_TX_BUF_FILL+0x94>
		 {
				EGU_TX_BUFFER[i+10]=f2u8_alt.array[i];
 8003b9c:	7f7a      	ldrb	r2, [r7, #29]
 8003b9e:	7f7b      	ldrb	r3, [r7, #29]
 8003ba0:	330a      	adds	r3, #10
 8003ba2:	3220      	adds	r2, #32
 8003ba4:	443a      	add	r2, r7
 8003ba6:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8003baa:	4a36      	ldr	r2, [pc, #216]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003bac:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003bae:	7f7b      	ldrb	r3, [r7, #29]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	777b      	strb	r3, [r7, #29]
 8003bb4:	7f7b      	ldrb	r3, [r7, #29]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d9f0      	bls.n	8003b9c <MEGU_TX_BUF_FILL+0x7c>
		 }
	 float2unit8 f2u8_max_alt;
	 f2u8_max_alt.fVal=max_altitude;
 8003bba:	4b36      	ldr	r3, [pc, #216]	@ (8003c94 <MEGU_TX_BUF_FILL+0x174>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60bb      	str	r3, [r7, #8]
	 	 	 for(uint8_t i=0;i<4;i++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	773b      	strb	r3, [r7, #28]
 8003bc4:	e00b      	b.n	8003bde <MEGU_TX_BUF_FILL+0xbe>
		 {
				EGU_TX_BUFFER[i+14]=f2u8_max_alt.array[i];
 8003bc6:	7f3a      	ldrb	r2, [r7, #28]
 8003bc8:	7f3b      	ldrb	r3, [r7, #28]
 8003bca:	330e      	adds	r3, #14
 8003bcc:	3220      	adds	r2, #32
 8003bce:	443a      	add	r2, r7
 8003bd0:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003bd6:	54d1      	strb	r1, [r2, r3]
	 	 	 for(uint8_t i=0;i<4;i++)
 8003bd8:	7f3b      	ldrb	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	773b      	strb	r3, [r7, #28]
 8003bde:	7f3b      	ldrb	r3, [r7, #28]
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d9f0      	bls.n	8003bc6 <MEGU_TX_BUF_FILL+0xa6>
		 }
	 float2unit8 f2u8_x;
	 f2u8_x.fVal=Lsm_Sensor.Accel_X;
 8003be4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c98 <MEGU_TX_BUF_FILL+0x178>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	607b      	str	r3, [r7, #4]
	 	 	 for(uint8_t i=0;i<4;i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	76fb      	strb	r3, [r7, #27]
 8003bee:	e00b      	b.n	8003c08 <MEGU_TX_BUF_FILL+0xe8>
		 {
				EGU_TX_BUFFER[i+18]=f2u8_x.array[i];
 8003bf0:	7efa      	ldrb	r2, [r7, #27]
 8003bf2:	7efb      	ldrb	r3, [r7, #27]
 8003bf4:	3312      	adds	r3, #18
 8003bf6:	3220      	adds	r2, #32
 8003bf8:	443a      	add	r2, r7
 8003bfa:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c00:	54d1      	strb	r1, [r2, r3]
	 	 	 for(uint8_t i=0;i<4;i++)
 8003c02:	7efb      	ldrb	r3, [r7, #27]
 8003c04:	3301      	adds	r3, #1
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	7efb      	ldrb	r3, [r7, #27]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d9f0      	bls.n	8003bf0 <MEGU_TX_BUF_FILL+0xd0>
		 }
	  float2unit8 f2u8_pitch;
	  f2u8_pitch.fVal=real_pitch;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	@ (8003c9c <MEGU_TX_BUF_FILL+0x17c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	603b      	str	r3, [r7, #0]
	  	 	 for(uint8_t i=0;i<4;i++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	76bb      	strb	r3, [r7, #26]
 8003c18:	e00b      	b.n	8003c32 <MEGU_TX_BUF_FILL+0x112>
		 {
	 			EGU_TX_BUFFER[i+22]=f2u8_pitch.array[i];
 8003c1a:	7eba      	ldrb	r2, [r7, #26]
 8003c1c:	7ebb      	ldrb	r3, [r7, #26]
 8003c1e:	3316      	adds	r3, #22
 8003c20:	3220      	adds	r2, #32
 8003c22:	443a      	add	r2, r7
 8003c24:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8003c28:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c2a:	54d1      	strb	r1, [r2, r3]
	  	 	 for(uint8_t i=0;i<4;i++)
 8003c2c:	7ebb      	ldrb	r3, [r7, #26]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	76bb      	strb	r3, [r7, #26]
 8003c32:	7ebb      	ldrb	r3, [r7, #26]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d9f0      	bls.n	8003c1a <MEGU_TX_BUF_FILL+0xfa>
		 }




	  EGU_TX_BUFFER[26]=rampa_control;//uçuş başladı mı
 8003c38:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <MEGU_TX_BUF_FILL+0x180>)
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c3e:	769a      	strb	r2, [r3, #26]
	  EGU_TX_BUFFER[27]=motor_ates;//motor ateşleme sinyali geldi mi
 8003c40:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <MEGU_TX_BUF_FILL+0x184>)
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c46:	76da      	strb	r2, [r3, #27]
	  EGU_TX_BUFFER[28]=manyetik_switch;
 8003c48:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <MEGU_TX_BUF_FILL+0x188>)
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c4e:	771a      	strb	r2, [r3, #28]
	  EGU_TX_BUFFER[29]=ariza;//ariza tespit
 8003c50:	4b16      	ldr	r3, [pc, #88]	@ (8003cac <MEGU_TX_BUF_FILL+0x18c>)
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c56:	775a      	strb	r2, [r3, #29]
	  EGU_TX_BUFFER[30]=fitil_kontrol;
 8003c58:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <MEGU_TX_BUF_FILL+0x190>)
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c5e:	779a      	strb	r2, [r3, #30]
	  EGU_TX_BUFFER[31]=egu_byte_31;
 8003c60:	2200      	movs	r2, #0
 8003c62:	4b08      	ldr	r3, [pc, #32]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c64:	77da      	strb	r2, [r3, #31]
	  EGU_TX_BUFFER[32]=egu_byte_32;
 8003c66:	220d      	movs	r2, #13
 8003c68:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c6a:	f883 2020 	strb.w	r2, [r3, #32]
	  EGU_TX_BUFFER[33]=egu_byte_33;
 8003c6e:	220a      	movs	r2, #10
 8003c70:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <MEGU_TX_BUF_FILL+0x164>)
 8003c72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



}
 8003c76:	bf00      	nop
 8003c78:	3724      	adds	r7, #36	@ 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000228 	.word	0x20000228
 8003c88:	20000268 	.word	0x20000268
 8003c8c:	20000264 	.word	0x20000264
 8003c90:	200002d8 	.word	0x200002d8
 8003c94:	20000288 	.word	0x20000288
 8003c98:	200002e0 	.word	0x200002e0
 8003c9c:	200002b0 	.word	0x200002b0
 8003ca0:	2000026f 	.word	0x2000026f
 8003ca4:	2000026d 	.word	0x2000026d
 8003ca8:	20000051 	.word	0x20000051
 8003cac:	20000272 	.word	0x20000272
 8003cb0:	2000026c 	.word	0x2000026c

08003cb4 <bme_config>:
void bme_config(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8003cb8:	4b17      	ldr	r3, [pc, #92]	@ (8003d18 <bme_config+0x64>)
 8003cba:	2276      	movs	r2, #118	@ 0x76
 8003cbc:	705a      	strb	r2, [r3, #1]
	  dev.intf = BME280_I2C_INTF;
 8003cbe:	4b16      	ldr	r3, [pc, #88]	@ (8003d18 <bme_config+0x64>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	709a      	strb	r2, [r3, #2]
	  dev.read = user_i2c_read;
 8003cc4:	4b14      	ldr	r3, [pc, #80]	@ (8003d18 <bme_config+0x64>)
 8003cc6:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <bme_config+0x68>)
 8003cc8:	605a      	str	r2, [r3, #4]
	  dev.write = user_i2c_write;
 8003cca:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <bme_config+0x64>)
 8003ccc:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <bme_config+0x6c>)
 8003cce:	609a      	str	r2, [r3, #8]
	  dev.delay_ms = user_delay_ms;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <bme_config+0x64>)
 8003cd2:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <bme_config+0x70>)
 8003cd4:	60da      	str	r2, [r3, #12]

	  rslt = bme280_init(&dev);
 8003cd6:	4810      	ldr	r0, [pc, #64]	@ (8003d18 <bme_config+0x64>)
 8003cd8:	f7fd f91a 	bl	8000f10 <bme280_init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <bme_config+0x74>)
 8003ce2:	701a      	strb	r2, [r3, #0]

	  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <bme_config+0x64>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <bme_config+0x64>)
 8003cee:	2203      	movs	r2, #3
 8003cf0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <bme_config+0x64>)
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	  dev.settings.filter = BME280_FILTER_COEFF_16;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <bme_config+0x64>)
 8003cfe:	2204      	movs	r2, #4
 8003d00:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003d04:	4904      	ldr	r1, [pc, #16]	@ (8003d18 <bme_config+0x64>)
 8003d06:	200f      	movs	r0, #15
 8003d08:	f7fd f9f6 	bl	80010f8 <bme280_set_sensor_settings>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <bme_config+0x74>)
 8003d12:	701a      	strb	r2, [r3, #0]


}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000424 	.word	0x20000424
 8003d1c:	080038a5 	.word	0x080038a5
 8003d20:	0800392d 	.word	0x0800392d
 8003d24:	08003915 	.word	0x08003915
 8003d28:	20000470 	.word	0x20000470

08003d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d30:	b672      	cpsid	i
}
 8003d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <Error_Handler+0x8>

08003d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <HAL_MspInit+0x4c>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	4a0f      	ldr	r2, [pc, #60]	@ (8003d84 <HAL_MspInit+0x4c>)
 8003d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <HAL_MspInit+0x4c>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <HAL_MspInit+0x4c>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	4a08      	ldr	r2, [pc, #32]	@ (8003d84 <HAL_MspInit+0x4c>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_MspInit+0x4c>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	@ 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a19      	ldr	r2, [pc, #100]	@ (8003e0c <HAL_I2C_MspInit+0x84>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d12b      	bne.n	8003e02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <HAL_I2C_MspInit+0x88>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <HAL_I2C_MspInit+0x88>)
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <HAL_I2C_MspInit+0x88>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dc6:	23c0      	movs	r3, #192	@ 0xc0
 8003dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dca:	2312      	movs	r3, #18
 8003dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	4619      	mov	r1, r3
 8003de0:	480c      	ldr	r0, [pc, #48]	@ (8003e14 <HAL_I2C_MspInit+0x8c>)
 8003de2:	f000 fba9 	bl	8004538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <HAL_I2C_MspInit+0x88>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	4a08      	ldr	r2, [pc, #32]	@ (8003e10 <HAL_I2C_MspInit+0x88>)
 8003df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_I2C_MspInit+0x88>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e02:	bf00      	nop
 8003e04:	3728      	adds	r7, #40	@ 0x28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40005400 	.word	0x40005400
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40020400 	.word	0x40020400

08003e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <HAL_TIM_Base_MspInit+0x80>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d116      	bne.n	8003e58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e9c <HAL_TIM_Base_MspInit+0x84>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	4a1a      	ldr	r2, [pc, #104]	@ (8003e9c <HAL_TIM_Base_MspInit+0x84>)
 8003e34:	f043 0310 	orr.w	r3, r3, #16
 8003e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e3a:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <HAL_TIM_Base_MspInit+0x84>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	2036      	movs	r0, #54	@ 0x36
 8003e4c:	f000 faab 	bl	80043a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e50:	2036      	movs	r0, #54	@ 0x36
 8003e52:	f000 fac4 	bl	80043de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003e56:	e01a      	b.n	8003e8e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <HAL_TIM_Base_MspInit+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d115      	bne.n	8003e8e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <HAL_TIM_Base_MspInit+0x84>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e9c <HAL_TIM_Base_MspInit+0x84>)
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e72:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <HAL_TIM_Base_MspInit+0x84>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2019      	movs	r0, #25
 8003e84:	f000 fa8f 	bl	80043a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003e88:	2019      	movs	r0, #25
 8003e8a:	f000 faa8 	bl	80043de <HAL_NVIC_EnableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40001000 	.word	0x40001000
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40014400 	.word	0x40014400

08003ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_UART_MspInit+0x94>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d133      	bne.n	8003f2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	4a1b      	ldr	r2, [pc, #108]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ed0:	f043 0320 	orr.w	r3, r3, #32
 8003ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed6:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef2:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_UART_MspInit+0x98>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 8003efe:	23c0      	movs	r3, #192	@ 0xc0
 8003f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003f0e:	2308      	movs	r3, #8
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	4619      	mov	r1, r3
 8003f18:	4809      	ldr	r0, [pc, #36]	@ (8003f40 <HAL_UART_MspInit+0x9c>)
 8003f1a:	f000 fb0d 	bl	8004538 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2047      	movs	r0, #71	@ 0x47
 8003f24:	f000 fa3f 	bl	80043a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003f28:	2047      	movs	r0, #71	@ 0x47
 8003f2a:	f000 fa58 	bl	80043de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8003f2e:	bf00      	nop
 8003f30:	3728      	adds	r7, #40	@ 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40011400 	.word	0x40011400
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020800 	.word	0x40020800

08003f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <NMI_Handler+0x4>

08003f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f50:	bf00      	nop
 8003f52:	e7fd      	b.n	8003f50 <HardFault_Handler+0x4>

08003f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f58:	bf00      	nop
 8003f5a:	e7fd      	b.n	8003f58 <MemManage_Handler+0x4>

08003f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <BusFault_Handler+0x4>

08003f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f68:	bf00      	nop
 8003f6a:	e7fd      	b.n	8003f68 <UsageFault_Handler+0x4>

08003f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f9a:	f000 f8e5 	bl	8004168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003fa8:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003faa:	f003 f8af 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000194 	.word	0x20000194

08003fb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003fbc:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <TIM6_DAC_IRQHandler+0x10>)
 8003fbe:	f003 f8a5 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	2000014c 	.word	0x2000014c

08003fcc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003fd0:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <USART6_IRQHandler+0x10>)
 8003fd2:	f003 fc0b 	bl	80077ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200001dc 	.word	0x200001dc

08003fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <_sbrk+0x5c>)
 8003fea:	4b15      	ldr	r3, [pc, #84]	@ (8004040 <_sbrk+0x60>)
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ff4:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <_sbrk+0x64>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <_sbrk+0x64>)
 8003ffe:	4a12      	ldr	r2, [pc, #72]	@ (8004048 <_sbrk+0x68>)
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004002:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <_sbrk+0x64>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d207      	bcs.n	8004020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004010:	f004 fcf0 	bl	80089f4 <__errno>
 8004014:	4603      	mov	r3, r0
 8004016:	220c      	movs	r2, #12
 8004018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	e009      	b.n	8004034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004020:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <_sbrk+0x64>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004026:	4b07      	ldr	r3, [pc, #28]	@ (8004044 <_sbrk+0x64>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	4a05      	ldr	r2, [pc, #20]	@ (8004044 <_sbrk+0x64>)
 8004030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20020000 	.word	0x20020000
 8004040:	00000400 	.word	0x00000400
 8004044:	20000474 	.word	0x20000474
 8004048:	200005d8 	.word	0x200005d8

0800404c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <SystemInit+0x20>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	4a05      	ldr	r2, [pc, #20]	@ (800406c <SystemInit+0x20>)
 8004058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800405c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004074:	480d      	ldr	r0, [pc, #52]	@ (80040ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004076:	490e      	ldr	r1, [pc, #56]	@ (80040b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004078:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800407c:	e002      	b.n	8004084 <LoopCopyDataInit>

0800407e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004082:	3304      	adds	r3, #4

08004084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004088:	d3f9      	bcc.n	800407e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408a:	4a0b      	ldr	r2, [pc, #44]	@ (80040b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800408c:	4c0b      	ldr	r4, [pc, #44]	@ (80040bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800408e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004090:	e001      	b.n	8004096 <LoopFillZerobss>

08004092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004094:	3204      	adds	r2, #4

08004096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004098:	d3fb      	bcc.n	8004092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800409a:	f7ff ffd7 	bl	800404c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800409e:	f004 fcaf 	bl	8008a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040a2:	f7fe fe8f 	bl	8002dc4 <main>
  bx  lr    
 80040a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040b0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80040b4:	08009da0 	.word	0x08009da0
  ldr r2, =_sbss
 80040b8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80040bc:	200005d8 	.word	0x200005d8

080040c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC_IRQHandler>
	...

080040c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <HAL_Init+0x40>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004104 <HAL_Init+0x40>)
 80040ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_Init+0x40>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004104 <HAL_Init+0x40>)
 80040da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040e0:	4b08      	ldr	r3, [pc, #32]	@ (8004104 <HAL_Init+0x40>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a07      	ldr	r2, [pc, #28]	@ (8004104 <HAL_Init+0x40>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ec:	2003      	movs	r0, #3
 80040ee:	f000 f94f 	bl	8004390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040f2:	200f      	movs	r0, #15
 80040f4:	f000 f808 	bl	8004108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040f8:	f7ff fe1e 	bl	8003d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023c00 	.word	0x40023c00

08004108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004110:	4b12      	ldr	r3, [pc, #72]	@ (800415c <HAL_InitTick+0x54>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_InitTick+0x58>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800411e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f967 	bl	80043fa <HAL_SYSTICK_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e00e      	b.n	8004154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b0f      	cmp	r3, #15
 800413a:	d80a      	bhi.n	8004152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800413c:	2200      	movs	r2, #0
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	f000 f92f 	bl	80043a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004148:	4a06      	ldr	r2, [pc, #24]	@ (8004164 <HAL_InitTick+0x5c>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000054 	.word	0x20000054
 8004160:	2000005c 	.word	0x2000005c
 8004164:	20000058 	.word	0x20000058

08004168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_IncTick+0x20>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_IncTick+0x24>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4413      	add	r3, r2
 8004178:	4a04      	ldr	r2, [pc, #16]	@ (800418c <HAL_IncTick+0x24>)
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	2000005c 	.word	0x2000005c
 800418c:	20000478 	.word	0x20000478

08004190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return uwTick;
 8004194:	4b03      	ldr	r3, [pc, #12]	@ (80041a4 <HAL_GetTick+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000478 	.word	0x20000478

080041a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7ff ffee 	bl	8004190 <HAL_GetTick>
 80041b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d005      	beq.n	80041ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041c2:	4b0a      	ldr	r3, [pc, #40]	@ (80041ec <HAL_Delay+0x44>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041ce:	bf00      	nop
 80041d0:	f7ff ffde 	bl	8004190 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d8f7      	bhi.n	80041d0 <HAL_Delay+0x28>
  {
  }
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	2000005c 	.word	0x2000005c

080041f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004200:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <__NVIC_SetPriorityGrouping+0x44>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800420c:	4013      	ands	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800421c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004222:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <__NVIC_SetPriorityGrouping+0x44>)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	60d3      	str	r3, [r2, #12]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__NVIC_GetPriorityGrouping+0x18>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 0307 	and.w	r3, r3, #7
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	2b00      	cmp	r3, #0
 8004264:	db0b      	blt.n	800427e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	f003 021f 	and.w	r2, r3, #31
 800426c:	4907      	ldr	r1, [pc, #28]	@ (800428c <__NVIC_EnableIRQ+0x38>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2001      	movs	r0, #1
 8004276:	fa00 f202 	lsl.w	r2, r0, r2
 800427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	e000e100 	.word	0xe000e100

08004290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	db0a      	blt.n	80042ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	490c      	ldr	r1, [pc, #48]	@ (80042dc <__NVIC_SetPriority+0x4c>)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	440b      	add	r3, r1
 80042b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b8:	e00a      	b.n	80042d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4908      	ldr	r1, [pc, #32]	@ (80042e0 <__NVIC_SetPriority+0x50>)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	3b04      	subs	r3, #4
 80042c8:	0112      	lsls	r2, r2, #4
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	440b      	add	r3, r1
 80042ce:	761a      	strb	r2, [r3, #24]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000e100 	.word	0xe000e100
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	@ 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f1c3 0307 	rsb	r3, r3, #7
 80042fe:	2b04      	cmp	r3, #4
 8004300:	bf28      	it	cs
 8004302:	2304      	movcs	r3, #4
 8004304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3304      	adds	r3, #4
 800430a:	2b06      	cmp	r3, #6
 800430c:	d902      	bls.n	8004314 <NVIC_EncodePriority+0x30>
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3b03      	subs	r3, #3
 8004312:	e000      	b.n	8004316 <NVIC_EncodePriority+0x32>
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43da      	mvns	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	401a      	ands	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800432c:	f04f 31ff 	mov.w	r1, #4294967295
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	43d9      	mvns	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	4313      	orrs	r3, r2
         );
}
 800433e:	4618      	mov	r0, r3
 8004340:	3724      	adds	r7, #36	@ 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800435c:	d301      	bcc.n	8004362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435e:	2301      	movs	r3, #1
 8004360:	e00f      	b.n	8004382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004362:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <SysTick_Config+0x40>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b01      	subs	r3, #1
 8004368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800436a:	210f      	movs	r1, #15
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	f7ff ff8e 	bl	8004290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <SysTick_Config+0x40>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800437a:	4b04      	ldr	r3, [pc, #16]	@ (800438c <SysTick_Config+0x40>)
 800437c:	2207      	movs	r2, #7
 800437e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	e000e010 	.word	0xe000e010

08004390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff29 	bl	80041f0 <__NVIC_SetPriorityGrouping>
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b8:	f7ff ff3e 	bl	8004238 <__NVIC_GetPriorityGrouping>
 80043bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	6978      	ldr	r0, [r7, #20]
 80043c4:	f7ff ff8e 	bl	80042e4 <NVIC_EncodePriority>
 80043c8:	4602      	mov	r2, r0
 80043ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff5d 	bl	8004290 <__NVIC_SetPriority>
}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff31 	bl	8004254 <__NVIC_EnableIRQ>
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ffa2 	bl	800434c <SysTick_Config>
 8004408:	4603      	mov	r3, r0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7ff feb6 	bl	8004190 <HAL_GetTick>
 8004424:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d008      	beq.n	8004444 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e052      	b.n	80044ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0216 	bic.w	r2, r2, #22
 8004452:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004462:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <HAL_DMA_Abort+0x62>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0208 	bic.w	r2, r2, #8
 8004482:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004494:	e013      	b.n	80044be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004496:	f7ff fe7b 	bl	8004190 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d90c      	bls.n	80044be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2203      	movs	r2, #3
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e015      	b.n	80044ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e4      	bne.n	8004496 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d0:	223f      	movs	r2, #63	@ 0x3f
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d004      	beq.n	8004510 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2280      	movs	r2, #128	@ 0x80
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e00c      	b.n	800452a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2205      	movs	r2, #5
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e165      	b.n	8004820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004554:	2201      	movs	r2, #1
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	f040 8154 	bne.w	800481a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d005      	beq.n	800458a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004586:	2b02      	cmp	r3, #2
 8004588:	d130      	bne.n	80045ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	2203      	movs	r2, #3
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 0201 	and.w	r2, r3, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d017      	beq.n	8004628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2203      	movs	r2, #3
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d123      	bne.n	800467c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	08da      	lsrs	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3208      	adds	r2, #8
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	220f      	movs	r2, #15
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	08da      	lsrs	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3208      	adds	r2, #8
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0203 	and.w	r2, r3, #3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80ae 	beq.w	800481a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004838 <HAL_GPIO_Init+0x300>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004838 <HAL_GPIO_Init+0x300>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004838 <HAL_GPIO_Init+0x300>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046da:	4a58      	ldr	r2, [pc, #352]	@ (800483c <HAL_GPIO_Init+0x304>)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	220f      	movs	r2, #15
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4f      	ldr	r2, [pc, #316]	@ (8004840 <HAL_GPIO_Init+0x308>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d025      	beq.n	8004752 <HAL_GPIO_Init+0x21a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4e      	ldr	r2, [pc, #312]	@ (8004844 <HAL_GPIO_Init+0x30c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01f      	beq.n	800474e <HAL_GPIO_Init+0x216>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4d      	ldr	r2, [pc, #308]	@ (8004848 <HAL_GPIO_Init+0x310>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d019      	beq.n	800474a <HAL_GPIO_Init+0x212>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4c      	ldr	r2, [pc, #304]	@ (800484c <HAL_GPIO_Init+0x314>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_GPIO_Init+0x20e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4b      	ldr	r2, [pc, #300]	@ (8004850 <HAL_GPIO_Init+0x318>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00d      	beq.n	8004742 <HAL_GPIO_Init+0x20a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4a      	ldr	r2, [pc, #296]	@ (8004854 <HAL_GPIO_Init+0x31c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <HAL_GPIO_Init+0x206>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a49      	ldr	r2, [pc, #292]	@ (8004858 <HAL_GPIO_Init+0x320>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_GPIO_Init+0x202>
 8004736:	2306      	movs	r3, #6
 8004738:	e00c      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 800473a:	2307      	movs	r3, #7
 800473c:	e00a      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 800473e:	2305      	movs	r3, #5
 8004740:	e008      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 8004742:	2304      	movs	r3, #4
 8004744:	e006      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 8004746:	2303      	movs	r3, #3
 8004748:	e004      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 800474a:	2302      	movs	r3, #2
 800474c:	e002      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_GPIO_Init+0x21c>
 8004752:	2300      	movs	r3, #0
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	f002 0203 	and.w	r2, r2, #3
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	4093      	lsls	r3, r2
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004764:	4935      	ldr	r1, [pc, #212]	@ (800483c <HAL_GPIO_Init+0x304>)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	3302      	adds	r3, #2
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004772:	4b3a      	ldr	r3, [pc, #232]	@ (800485c <HAL_GPIO_Init+0x324>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004796:	4a31      	ldr	r2, [pc, #196]	@ (800485c <HAL_GPIO_Init+0x324>)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800479c:	4b2f      	ldr	r3, [pc, #188]	@ (800485c <HAL_GPIO_Init+0x324>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047c0:	4a26      	ldr	r2, [pc, #152]	@ (800485c <HAL_GPIO_Init+0x324>)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047c6:	4b25      	ldr	r3, [pc, #148]	@ (800485c <HAL_GPIO_Init+0x324>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ea:	4a1c      	ldr	r2, [pc, #112]	@ (800485c <HAL_GPIO_Init+0x324>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <HAL_GPIO_Init+0x324>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004814:	4a11      	ldr	r2, [pc, #68]	@ (800485c <HAL_GPIO_Init+0x324>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3301      	adds	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	f67f ae96 	bls.w	8004554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	3724      	adds	r7, #36	@ 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	40013800 	.word	0x40013800
 8004840:	40020000 	.word	0x40020000
 8004844:	40020400 	.word	0x40020400
 8004848:	40020800 	.word	0x40020800
 800484c:	40020c00 	.word	0x40020c00
 8004850:	40021000 	.word	0x40021000
 8004854:	40021400 	.word	0x40021400
 8004858:	40021800 	.word	0x40021800
 800485c:	40013c00 	.word	0x40013c00

08004860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	887b      	ldrh	r3, [r7, #2]
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	e001      	b.n	8004882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048ac:	e003      	b.n	80048b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	041a      	lsls	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d4:	887a      	ldrh	r2, [r7, #2]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	041a      	lsls	r2, r3, #16
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43d9      	mvns	r1, r3
 80048e0:	887b      	ldrh	r3, [r7, #2]
 80048e2:	400b      	ands	r3, r1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e12b      	b.n	8004b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fa32 	bl	8003d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	@ 0x24
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0201 	bic.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800494a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800495a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800495c:	f001 fe20 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 8004960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	4a81      	ldr	r2, [pc, #516]	@ (8004b6c <HAL_I2C_Init+0x274>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d807      	bhi.n	800497c <HAL_I2C_Init+0x84>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a80      	ldr	r2, [pc, #512]	@ (8004b70 <HAL_I2C_Init+0x278>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e006      	b.n	800498a <HAL_I2C_Init+0x92>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b74 <HAL_I2C_Init+0x27c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	bf94      	ite	ls
 8004984:	2301      	movls	r3, #1
 8004986:	2300      	movhi	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e0e7      	b.n	8004b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a78      	ldr	r2, [pc, #480]	@ (8004b78 <HAL_I2C_Init+0x280>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	0c9b      	lsrs	r3, r3, #18
 800499c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b6c <HAL_I2C_Init+0x274>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d802      	bhi.n	80049cc <HAL_I2C_Init+0xd4>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3301      	adds	r3, #1
 80049ca:	e009      	b.n	80049e0 <HAL_I2C_Init+0xe8>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	4a69      	ldr	r2, [pc, #420]	@ (8004b7c <HAL_I2C_Init+0x284>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	3301      	adds	r3, #1
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	495c      	ldr	r1, [pc, #368]	@ (8004b6c <HAL_I2C_Init+0x274>)
 80049fc:	428b      	cmp	r3, r1
 80049fe:	d819      	bhi.n	8004a34 <HAL_I2C_Init+0x13c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1e59      	subs	r1, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a0e:	1c59      	adds	r1, r3, #1
 8004a10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a14:	400b      	ands	r3, r1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_I2C_Init+0x138>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1e59      	subs	r1, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2e:	e051      	b.n	8004ad4 <HAL_I2C_Init+0x1dc>
 8004a30:	2304      	movs	r3, #4
 8004a32:	e04f      	b.n	8004ad4 <HAL_I2C_Init+0x1dc>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d111      	bne.n	8004a60 <HAL_I2C_Init+0x168>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1e58      	subs	r0, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6859      	ldr	r1, [r3, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	440b      	add	r3, r1
 8004a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e012      	b.n	8004a86 <HAL_I2C_Init+0x18e>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1e58      	subs	r0, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6859      	ldr	r1, [r3, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	0099      	lsls	r1, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Init+0x196>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e022      	b.n	8004ad4 <HAL_I2C_Init+0x1dc>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10e      	bne.n	8004ab4 <HAL_I2C_Init+0x1bc>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1e58      	subs	r0, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	440b      	add	r3, r1
 8004aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab2:	e00f      	b.n	8004ad4 <HAL_I2C_Init+0x1dc>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e58      	subs	r0, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	0099      	lsls	r1, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	6809      	ldr	r1, [r1, #0]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6911      	ldr	r1, [r2, #16]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68d2      	ldr	r2, [r2, #12]
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	000186a0 	.word	0x000186a0
 8004b70:	001e847f 	.word	0x001e847f
 8004b74:	003d08ff 	.word	0x003d08ff
 8004b78:	431bde83 	.word	0x431bde83
 8004b7c:	10624dd3 	.word	0x10624dd3

08004b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	817b      	strh	r3, [r7, #10]
 8004b90:	4613      	mov	r3, r2
 8004b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff fafc 	bl	8004190 <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	f040 80e0 	bne.w	8004d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2319      	movs	r3, #25
 8004bae:	2201      	movs	r2, #1
 8004bb0:	4970      	ldr	r1, [pc, #448]	@ (8004d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f001 fa24 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e0d3      	b.n	8004d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_I2C_Master_Transmit+0x50>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e0cc      	b.n	8004d6a <HAL_I2C_Master_Transmit+0x1ea>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d007      	beq.n	8004bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2221      	movs	r2, #33	@ 0x21
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2210      	movs	r2, #16
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	893a      	ldrh	r2, [r7, #8]
 8004c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a50      	ldr	r2, [pc, #320]	@ (8004d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c38:	8979      	ldrh	r1, [r7, #10]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6a3a      	ldr	r2, [r7, #32]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 ff10 	bl	8005a64 <I2C_MasterRequestWrite>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e08d      	b.n	8004d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c64:	e066      	b.n	8004d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	6a39      	ldr	r1, [r7, #32]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f001 fa9e 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d107      	bne.n	8004c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e06b      	b.n	8004d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d11b      	bne.n	8004d08 <HAL_I2C_Master_Transmit+0x188>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d017      	beq.n	8004d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	781a      	ldrb	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	6a39      	ldr	r1, [r7, #32]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f001 fa8e 	bl	800622e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00d      	beq.n	8004d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d107      	bne.n	8004d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e01a      	b.n	8004d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d194      	bne.n	8004c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	00100002 	.word	0x00100002
 8004d78:	ffff0000 	.word	0xffff0000

08004d7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	@ 0x30
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	461a      	mov	r2, r3
 8004d88:	460b      	mov	r3, r1
 8004d8a:	817b      	strh	r3, [r7, #10]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d90:	f7ff f9fe 	bl	8004190 <HAL_GetTick>
 8004d94:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 820b 	bne.w	80051ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2319      	movs	r3, #25
 8004daa:	2201      	movs	r2, #1
 8004dac:	497c      	ldr	r1, [pc, #496]	@ (8004fa0 <HAL_I2C_Master_Receive+0x224>)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f001 f926 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e1fe      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_I2C_Master_Receive+0x50>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e1f7      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d007      	beq.n	8004df2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2222      	movs	r2, #34	@ 0x22
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	893a      	ldrh	r2, [r7, #8]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa4 <HAL_I2C_Master_Receive+0x228>)
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e34:	8979      	ldrh	r1, [r7, #10]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fe94 	bl	8005b68 <I2C_MasterRequestRead>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e1b8      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d113      	bne.n	8004e7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	623b      	str	r3, [r7, #32]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	623b      	str	r3, [r7, #32]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	623b      	str	r3, [r7, #32]
 8004e66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e18c      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d11b      	bne.n	8004eba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e16c      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d11b      	bne.n	8004efa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	e14c      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f20:	e138      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	f200 80f1 	bhi.w	800510e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d123      	bne.n	8004f7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f001 f9b9 	bl	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e139      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f7a:	e10b      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d14e      	bne.n	8005022 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4906      	ldr	r1, [pc, #24]	@ (8004fa8 <HAL_I2C_Master_Receive+0x22c>)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f001 f836 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e10e      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
 8004f9e:	bf00      	nop
 8004fa0:	00100002 	.word	0x00100002
 8004fa4:	ffff0000 	.word	0xffff0000
 8004fa8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005020:	e0b8      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	2200      	movs	r2, #0
 800502a:	4966      	ldr	r1, [pc, #408]	@ (80051c4 <HAL_I2C_Master_Receive+0x448>)
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 ffe7 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0bf      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	2200      	movs	r2, #0
 8005086:	494f      	ldr	r1, [pc, #316]	@ (80051c4 <HAL_I2C_Master_Receive+0x448>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 ffb9 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e091      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800510c:	e042      	b.n	8005194 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f001 f8cc 	bl	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e04c      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b04      	cmp	r3, #4
 8005160:	d118      	bne.n	8005194 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005198:	2b00      	cmp	r3, #0
 800519a:	f47f aec2 	bne.w	8004f22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e000      	b.n	80051bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
  }
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3728      	adds	r7, #40	@ 0x28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	00010004 	.word	0x00010004

080051c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	817b      	strh	r3, [r7, #10]
 80051da:	460b      	mov	r3, r1
 80051dc:	813b      	strh	r3, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051e2:	f7fe ffd5 	bl	8004190 <HAL_GetTick>
 80051e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	f040 80d9 	bne.w	80053a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2319      	movs	r3, #25
 80051fc:	2201      	movs	r2, #1
 80051fe:	496d      	ldr	r1, [pc, #436]	@ (80053b4 <HAL_I2C_Mem_Write+0x1ec>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fefd 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800520c:	2302      	movs	r3, #2
 800520e:	e0cc      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_I2C_Mem_Write+0x56>
 800521a:	2302      	movs	r3, #2
 800521c:	e0c5      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d007      	beq.n	8005244 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2221      	movs	r2, #33	@ 0x21
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2240      	movs	r2, #64	@ 0x40
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a4d      	ldr	r2, [pc, #308]	@ (80053b8 <HAL_I2C_Mem_Write+0x1f0>)
 8005284:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005286:	88f8      	ldrh	r0, [r7, #6]
 8005288:	893a      	ldrh	r2, [r7, #8]
 800528a:	8979      	ldrh	r1, [r7, #10]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fd34 	bl	8005d04 <I2C_RequestMemoryWrite>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d052      	beq.n	8005348 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e081      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 ff7e 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00d      	beq.n	80052d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d107      	bne.n	80052ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06b      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d11b      	bne.n	8005348 <HAL_I2C_Mem_Write+0x180>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d017      	beq.n	8005348 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1aa      	bne.n	80052a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 ff6a 	bl	800622e <I2C_WaitOnBTFFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	2b04      	cmp	r3, #4
 8005366:	d107      	bne.n	8005378 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005376:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e016      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800538a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	00100002 	.word	0x00100002
 80053b8:	ffff0000 	.word	0xffff0000

080053bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b08c      	sub	sp, #48	@ 0x30
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	461a      	mov	r2, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	817b      	strh	r3, [r7, #10]
 80053ce:	460b      	mov	r3, r1
 80053d0:	813b      	strh	r3, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053d6:	f7fe fedb 	bl	8004190 <HAL_GetTick>
 80053da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	f040 8208 	bne.w	80057fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	2319      	movs	r3, #25
 80053f0:	2201      	movs	r2, #1
 80053f2:	497b      	ldr	r1, [pc, #492]	@ (80055e0 <HAL_I2C_Mem_Read+0x224>)
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fe03 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005400:	2302      	movs	r3, #2
 8005402:	e1fb      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <HAL_I2C_Mem_Read+0x56>
 800540e:	2302      	movs	r3, #2
 8005410:	e1f4      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d007      	beq.n	8005438 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005446:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2222      	movs	r2, #34	@ 0x22
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2240      	movs	r2, #64	@ 0x40
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005462:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4a5b      	ldr	r2, [pc, #364]	@ (80055e4 <HAL_I2C_Mem_Read+0x228>)
 8005478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800547a:	88f8      	ldrh	r0, [r7, #6]
 800547c:	893a      	ldrh	r2, [r7, #8]
 800547e:	8979      	ldrh	r1, [r7, #10]
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	4603      	mov	r3, r0
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fcd0 	bl	8005e30 <I2C_RequestMemoryRead>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e1b0      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a2:	2300      	movs	r3, #0
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e184      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d11b      	bne.n	800550a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e2:	2300      	movs	r3, #0
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	e164      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550e:	2b02      	cmp	r3, #2
 8005510:	d11b      	bne.n	800554a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005520:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	e144      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005560:	e138      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	2b03      	cmp	r3, #3
 8005568:	f200 80f1 	bhi.w	800574e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005570:	2b01      	cmp	r3, #1
 8005572:	d123      	bne.n	80055bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005576:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fe99 	bl	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e139      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055ba:	e10b      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d14e      	bne.n	8005662 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2200      	movs	r2, #0
 80055cc:	4906      	ldr	r1, [pc, #24]	@ (80055e8 <HAL_I2C_Mem_Read+0x22c>)
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fd16 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e10e      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
 80055de:	bf00      	nop
 80055e0:	00100002 	.word	0x00100002
 80055e4:	ffff0000 	.word	0xffff0000
 80055e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005656:	b29b      	uxth	r3, r3
 8005658:	3b01      	subs	r3, #1
 800565a:	b29a      	uxth	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005660:	e0b8      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	2200      	movs	r2, #0
 800566a:	4966      	ldr	r1, [pc, #408]	@ (8005804 <HAL_I2C_Mem_Read+0x448>)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fcc7 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0bf      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800568a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	2200      	movs	r2, #0
 80056c6:	494f      	ldr	r1, [pc, #316]	@ (8005804 <HAL_I2C_Mem_Read+0x448>)
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 fc99 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e091      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800574c:	e042      	b.n	80057d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005750:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fdac 	bl	80062b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e04c      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d118      	bne.n	80057d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f47f aec2 	bne.w	8005562 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3728      	adds	r7, #40	@ 0x28
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	00010004 	.word	0x00010004

08005808 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005818:	f7fe fcba 	bl	8004190 <HAL_GetTick>
 800581c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b20      	cmp	r3, #32
 800582c:	f040 8111 	bne.w	8005a52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2319      	movs	r3, #25
 8005836:	2201      	movs	r2, #1
 8005838:	4988      	ldr	r1, [pc, #544]	@ (8005a5c <HAL_I2C_IsDeviceReady+0x254>)
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fbe0 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005846:	2302      	movs	r3, #2
 8005848:	e104      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_I2C_IsDeviceReady+0x50>
 8005854:	2302      	movs	r3, #2
 8005856:	e0fd      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d007      	beq.n	800587e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800588c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2224      	movs	r2, #36	@ 0x24
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a70      	ldr	r2, [pc, #448]	@ (8005a60 <HAL_I2C_IsDeviceReady+0x258>)
 80058a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fb9e 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00d      	beq.n	80058e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d8:	d103      	bne.n	80058e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0b6      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058e6:	897b      	ldrh	r3, [r7, #10]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80058f6:	f7fe fc4b 	bl	8004190 <HAL_GetTick>
 80058fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	bf0c      	ite	eq
 800590a:	2301      	moveq	r3, #1
 800590c:	2300      	movne	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800592a:	e025      	b.n	8005978 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800592c:	f7fe fc30 	bl	8004190 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d302      	bcc.n	8005942 <HAL_I2C_IsDeviceReady+0x13a>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	22a0      	movs	r2, #160	@ 0xa0
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2ba0      	cmp	r3, #160	@ 0xa0
 8005982:	d005      	beq.n	8005990 <HAL_I2C_IsDeviceReady+0x188>
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_I2C_IsDeviceReady+0x188>
 800598a:	7dbb      	ldrb	r3, [r7, #22]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0cd      	beq.n	800592c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d129      	bne.n	80059fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b6:	2300      	movs	r3, #0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	2319      	movs	r3, #25
 80059d2:	2201      	movs	r2, #1
 80059d4:	4921      	ldr	r1, [pc, #132]	@ (8005a5c <HAL_I2C_IsDeviceReady+0x254>)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fb12 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e036      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e02c      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	2319      	movs	r3, #25
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	490f      	ldr	r1, [pc, #60]	@ (8005a5c <HAL_I2C_IsDeviceReady+0x254>)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 faee 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e012      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	f4ff af32 	bcc.w	80058a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
  }
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	00100002 	.word	0x00100002
 8005a60:	ffff0000 	.word	0xffff0000

08005a64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	460b      	mov	r3, r1
 8005a72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d006      	beq.n	8005a8e <I2C_MasterRequestWrite+0x2a>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d003      	beq.n	8005a8e <I2C_MasterRequestWrite+0x2a>
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a8c:	d108      	bne.n	8005aa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e00b      	b.n	8005ab8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	2b12      	cmp	r3, #18
 8005aa6:	d107      	bne.n	8005ab8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 fa9b 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00d      	beq.n	8005aec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ade:	d103      	bne.n	8005ae8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ae6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e035      	b.n	8005b58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005af4:	d108      	bne.n	8005b08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b04:	611a      	str	r2, [r3, #16]
 8005b06:	e01b      	b.n	8005b40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b08:	897b      	ldrh	r3, [r7, #10]
 8005b0a:	11db      	asrs	r3, r3, #7
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f003 0306 	and.w	r3, r3, #6
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f063 030f 	orn	r3, r3, #15
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	490e      	ldr	r1, [pc, #56]	@ (8005b60 <I2C_MasterRequestWrite+0xfc>)
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fac1 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e010      	b.n	8005b58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4907      	ldr	r1, [pc, #28]	@ (8005b64 <I2C_MasterRequestWrite+0x100>)
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fab1 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	00010008 	.word	0x00010008
 8005b64:	00010002 	.word	0x00010002

08005b68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	460b      	mov	r3, r1
 8005b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d006      	beq.n	8005ba2 <I2C_MasterRequestRead+0x3a>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d003      	beq.n	8005ba2 <I2C_MasterRequestRead+0x3a>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ba0:	d108      	bne.n	8005bb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e00b      	b.n	8005bcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	2b11      	cmp	r3, #17
 8005bba:	d107      	bne.n	8005bcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 fa11 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf2:	d103      	bne.n	8005bfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e079      	b.n	8005cf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c08:	d108      	bne.n	8005c1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c0a:	897b      	ldrh	r3, [r7, #10]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	e05f      	b.n	8005cdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c1c:	897b      	ldrh	r3, [r7, #10]
 8005c1e:	11db      	asrs	r3, r3, #7
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	f003 0306 	and.w	r3, r3, #6
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f063 030f 	orn	r3, r3, #15
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4930      	ldr	r1, [pc, #192]	@ (8005cfc <I2C_MasterRequestRead+0x194>)
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fa37 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e054      	b.n	8005cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4929      	ldr	r1, [pc, #164]	@ (8005d00 <I2C_MasterRequestRead+0x198>)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fa27 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e044      	b.n	8005cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f9af 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cb6:	d103      	bne.n	8005cc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cbe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e017      	b.n	8005cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005cc4:	897b      	ldrh	r3, [r7, #10]
 8005cc6:	11db      	asrs	r3, r3, #7
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f003 0306 	and.w	r3, r3, #6
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f063 030e 	orn	r3, r3, #14
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4907      	ldr	r1, [pc, #28]	@ (8005d00 <I2C_MasterRequestRead+0x198>)
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f9e3 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	00010008 	.word	0x00010008
 8005d00:	00010002 	.word	0x00010002

08005d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	817b      	strh	r3, [r7, #10]
 8005d16:	460b      	mov	r3, r1
 8005d18:	813b      	strh	r3, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f960 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d54:	d103      	bne.n	8005d5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e05f      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d62:	897b      	ldrh	r3, [r7, #10]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	492d      	ldr	r1, [pc, #180]	@ (8005e2c <I2C_RequestMemoryWrite+0x128>)
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f998 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e04c      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]
 8005d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fa02 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d107      	bne.n	8005dc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e02b      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e021      	b.n	8005e20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dec:	6a39      	ldr	r1, [r7, #32]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f9dc 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00d      	beq.n	8005e16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d107      	bne.n	8005e12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e005      	b.n	8005e22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	00010002 	.word	0x00010002

08005e30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	4608      	mov	r0, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4603      	mov	r3, r0
 8005e40:	817b      	strh	r3, [r7, #10]
 8005e42:	460b      	mov	r3, r1
 8005e44:	813b      	strh	r3, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f8c2 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e90:	d103      	bne.n	8005e9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e0aa      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	4952      	ldr	r1, [pc, #328]	@ (8005ffc <I2C_RequestMemoryRead+0x1cc>)
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f8fa 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e097      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005edc:	6a39      	ldr	r1, [r7, #32]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f964 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d107      	bne.n	8005f02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e076      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f0c:	893b      	ldrh	r3, [r7, #8]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	e021      	b.n	8005f5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	6a39      	ldr	r1, [r7, #32]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f93e 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d107      	bne.n	8005f4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e050      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f52:	893b      	ldrh	r3, [r7, #8]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f5e:	6a39      	ldr	r1, [r7, #32]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f923 	bl	80061ac <I2C_WaitOnTXEFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d107      	bne.n	8005f84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e035      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f82b 	bl	8006000 <I2C_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fbe:	d103      	bne.n	8005fc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e013      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fcc:	897b      	ldrh	r3, [r7, #10]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	4906      	ldr	r1, [pc, #24]	@ (8005ffc <I2C_RequestMemoryRead+0x1cc>)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f863 	bl	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	00010002 	.word	0x00010002

08006000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006010:	e025      	b.n	800605e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d021      	beq.n	800605e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601a:	f7fe f8b9 	bl	8004190 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d302      	bcc.n	8006030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d116      	bne.n	800605e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e023      	b.n	80060a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10d      	bne.n	8006084 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	43da      	mvns	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	bf0c      	ite	eq
 800607a:	2301      	moveq	r3, #1
 800607c:	2300      	movne	r3, #0
 800607e:	b2db      	uxtb	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	e00c      	b.n	800609e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	43da      	mvns	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4013      	ands	r3, r2
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	bf0c      	ite	eq
 8006096:	2301      	moveq	r3, #1
 8006098:	2300      	movne	r3, #0
 800609a:	b2db      	uxtb	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	79fb      	ldrb	r3, [r7, #7]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d0b6      	beq.n	8006012 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060bc:	e051      	b.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060cc:	d123      	bne.n	8006116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	f043 0204 	orr.w	r2, r3, #4
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e046      	b.n	80061a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d021      	beq.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fe f837 	bl	8004190 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d116      	bne.n	8006162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e020      	b.n	80061a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10c      	bne.n	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	43da      	mvns	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4013      	ands	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e00b      	b.n	800619e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	43da      	mvns	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4013      	ands	r3, r2
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d18d      	bne.n	80060be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061b8:	e02d      	b.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f8ce 	bl	800635c <I2C_IsAcknowledgeFailed>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e02d      	b.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d021      	beq.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d2:	f7fd ffdd 	bl	8004190 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d302      	bcc.n	80061e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d116      	bne.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	f043 0220 	orr.w	r2, r3, #32
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e007      	b.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006220:	2b80      	cmp	r3, #128	@ 0x80
 8006222:	d1ca      	bne.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800623a:	e02d      	b.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f88d 	bl	800635c <I2C_IsAcknowledgeFailed>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e02d      	b.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d021      	beq.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fd ff9c 	bl	8004190 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d116      	bne.n	8006298 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006284:	f043 0220 	orr.w	r2, r3, #32
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e007      	b.n	80062a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d1ca      	bne.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062bc:	e042      	b.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d119      	bne.n	8006300 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0210 	mvn.w	r2, #16
 80062d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e029      	b.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006300:	f7fd ff46 	bl	8004190 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d116      	bne.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e007      	b.n	8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634e:	2b40      	cmp	r3, #64	@ 0x40
 8006350:	d1b5      	bne.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006372:	d11b      	bne.n	80063ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800637c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006398:	f043 0204 	orr.w	r2, r3, #4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
	...

080063bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0cc      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063d0:	4b68      	ldr	r3, [pc, #416]	@ (8006574 <HAL_RCC_ClockConfig+0x1b8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d90c      	bls.n	80063f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063de:	4b65      	ldr	r3, [pc, #404]	@ (8006574 <HAL_RCC_ClockConfig+0x1b8>)
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e6:	4b63      	ldr	r3, [pc, #396]	@ (8006574 <HAL_RCC_ClockConfig+0x1b8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0b8      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d020      	beq.n	8006446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006410:	4b59      	ldr	r3, [pc, #356]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	4a58      	ldr	r2, [pc, #352]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800641a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006428:	4b53      	ldr	r3, [pc, #332]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a52      	ldr	r2, [pc, #328]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006434:	4b50      	ldr	r3, [pc, #320]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	494d      	ldr	r1, [pc, #308]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d044      	beq.n	80064dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d107      	bne.n	800646a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	4b47      	ldr	r3, [pc, #284]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d119      	bne.n	800649a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e07f      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d003      	beq.n	800647a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006476:	2b03      	cmp	r3, #3
 8006478:	d107      	bne.n	800648a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647a:	4b3f      	ldr	r3, [pc, #252]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e06f      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648a:	4b3b      	ldr	r3, [pc, #236]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e067      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800649a:	4b37      	ldr	r3, [pc, #220]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f023 0203 	bic.w	r2, r3, #3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4934      	ldr	r1, [pc, #208]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064ac:	f7fd fe70 	bl	8004190 <HAL_GetTick>
 80064b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b2:	e00a      	b.n	80064ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b4:	f7fd fe6c 	bl	8004190 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e04f      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 020c 	and.w	r2, r3, #12
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	429a      	cmp	r2, r3
 80064da:	d1eb      	bne.n	80064b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064dc:	4b25      	ldr	r3, [pc, #148]	@ (8006574 <HAL_RCC_ClockConfig+0x1b8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d20c      	bcs.n	8006504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b22      	ldr	r3, [pc, #136]	@ (8006574 <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f2:	4b20      	ldr	r3, [pc, #128]	@ (8006574 <HAL_RCC_ClockConfig+0x1b8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d001      	beq.n	8006504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e032      	b.n	800656a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006510:	4b19      	ldr	r3, [pc, #100]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4916      	ldr	r1, [pc, #88]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800652e:	4b12      	ldr	r3, [pc, #72]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	490e      	ldr	r1, [pc, #56]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006542:	f000 f855 	bl	80065f0 <HAL_RCC_GetSysClockFreq>
 8006546:	4602      	mov	r2, r0
 8006548:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	091b      	lsrs	r3, r3, #4
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	490a      	ldr	r1, [pc, #40]	@ (800657c <HAL_RCC_ClockConfig+0x1c0>)
 8006554:	5ccb      	ldrb	r3, [r1, r3]
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	4a09      	ldr	r2, [pc, #36]	@ (8006580 <HAL_RCC_ClockConfig+0x1c4>)
 800655c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800655e:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <HAL_RCC_ClockConfig+0x1c8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7fd fdd0 	bl	8004108 <HAL_InitTick>

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40023c00 	.word	0x40023c00
 8006578:	40023800 	.word	0x40023800
 800657c:	08009d10 	.word	0x08009d10
 8006580:	20000054 	.word	0x20000054
 8006584:	20000058 	.word	0x20000058

08006588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800658c:	4b03      	ldr	r3, [pc, #12]	@ (800659c <HAL_RCC_GetHCLKFreq+0x14>)
 800658e:	681b      	ldr	r3, [r3, #0]
}
 8006590:	4618      	mov	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000054 	.word	0x20000054

080065a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065a4:	f7ff fff0 	bl	8006588 <HAL_RCC_GetHCLKFreq>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	0a9b      	lsrs	r3, r3, #10
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	4903      	ldr	r1, [pc, #12]	@ (80065c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065b6:	5ccb      	ldrb	r3, [r1, r3]
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40023800 	.word	0x40023800
 80065c4:	08009d20 	.word	0x08009d20

080065c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065cc:	f7ff ffdc 	bl	8006588 <HAL_RCC_GetHCLKFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	0b5b      	lsrs	r3, r3, #13
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	4903      	ldr	r1, [pc, #12]	@ (80065ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40023800 	.word	0x40023800
 80065ec:	08009d20 	.word	0x08009d20

080065f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b0ae      	sub	sp, #184	@ 0xb8
 80065f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006616:	4bcb      	ldr	r3, [pc, #812]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
 800661e:	2b0c      	cmp	r3, #12
 8006620:	f200 8206 	bhi.w	8006a30 <HAL_RCC_GetSysClockFreq+0x440>
 8006624:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006661 	.word	0x08006661
 8006630:	08006a31 	.word	0x08006a31
 8006634:	08006a31 	.word	0x08006a31
 8006638:	08006a31 	.word	0x08006a31
 800663c:	08006669 	.word	0x08006669
 8006640:	08006a31 	.word	0x08006a31
 8006644:	08006a31 	.word	0x08006a31
 8006648:	08006a31 	.word	0x08006a31
 800664c:	08006671 	.word	0x08006671
 8006650:	08006a31 	.word	0x08006a31
 8006654:	08006a31 	.word	0x08006a31
 8006658:	08006a31 	.word	0x08006a31
 800665c:	08006861 	.word	0x08006861
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006660:	4bb9      	ldr	r3, [pc, #740]	@ (8006948 <HAL_RCC_GetSysClockFreq+0x358>)
 8006662:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8006666:	e1e7      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006668:	4bb8      	ldr	r3, [pc, #736]	@ (800694c <HAL_RCC_GetSysClockFreq+0x35c>)
 800666a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800666e:	e1e3      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006670:	4bb4      	ldr	r3, [pc, #720]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800667c:	4bb1      	ldr	r3, [pc, #708]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d071      	beq.n	800676c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006688:	4bae      	ldr	r3, [pc, #696]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	099b      	lsrs	r3, r3, #6
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006694:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066a4:	2300      	movs	r3, #0
 80066a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f04f 0100 	mov.w	r1, #0
 80066ba:	0159      	lsls	r1, r3, #5
 80066bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066c0:	0150      	lsls	r0, r2, #5
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4621      	mov	r1, r4
 80066c8:	1a51      	subs	r1, r2, r1
 80066ca:	6439      	str	r1, [r7, #64]	@ 0x40
 80066cc:	4629      	mov	r1, r5
 80066ce:	eb63 0301 	sbc.w	r3, r3, r1
 80066d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80066e0:	4649      	mov	r1, r9
 80066e2:	018b      	lsls	r3, r1, #6
 80066e4:	4641      	mov	r1, r8
 80066e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ea:	4641      	mov	r1, r8
 80066ec:	018a      	lsls	r2, r1, #6
 80066ee:	4641      	mov	r1, r8
 80066f0:	1a51      	subs	r1, r2, r1
 80066f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066f4:	4649      	mov	r1, r9
 80066f6:	eb63 0301 	sbc.w	r3, r3, r1
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006708:	4649      	mov	r1, r9
 800670a:	00cb      	lsls	r3, r1, #3
 800670c:	4641      	mov	r1, r8
 800670e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006712:	4641      	mov	r1, r8
 8006714:	00ca      	lsls	r2, r1, #3
 8006716:	4610      	mov	r0, r2
 8006718:	4619      	mov	r1, r3
 800671a:	4603      	mov	r3, r0
 800671c:	4622      	mov	r2, r4
 800671e:	189b      	adds	r3, r3, r2
 8006720:	633b      	str	r3, [r7, #48]	@ 0x30
 8006722:	462b      	mov	r3, r5
 8006724:	460a      	mov	r2, r1
 8006726:	eb42 0303 	adc.w	r3, r2, r3
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006738:	4629      	mov	r1, r5
 800673a:	024b      	lsls	r3, r1, #9
 800673c:	4621      	mov	r1, r4
 800673e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006742:	4621      	mov	r1, r4
 8006744:	024a      	lsls	r2, r1, #9
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006758:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800675c:	f7fa fa60 	bl	8000c20 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4613      	mov	r3, r2
 8006766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800676a:	e067      	b.n	800683c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800676c:	4b75      	ldr	r3, [pc, #468]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	099b      	lsrs	r3, r3, #6
 8006772:	2200      	movs	r2, #0
 8006774:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006778:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800677c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006786:	2300      	movs	r3, #0
 8006788:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800678a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f04f 0100 	mov.w	r1, #0
 800679a:	0159      	lsls	r1, r3, #5
 800679c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067a0:	0150      	lsls	r0, r2, #5
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4621      	mov	r1, r4
 80067a8:	1a51      	subs	r1, r2, r1
 80067aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80067ac:	4629      	mov	r1, r5
 80067ae:	eb63 0301 	sbc.w	r3, r3, r1
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80067c0:	4649      	mov	r1, r9
 80067c2:	018b      	lsls	r3, r1, #6
 80067c4:	4641      	mov	r1, r8
 80067c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067ca:	4641      	mov	r1, r8
 80067cc:	018a      	lsls	r2, r1, #6
 80067ce:	4641      	mov	r1, r8
 80067d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80067d4:	4649      	mov	r1, r9
 80067d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ee:	4692      	mov	sl, r2
 80067f0:	469b      	mov	fp, r3
 80067f2:	4623      	mov	r3, r4
 80067f4:	eb1a 0303 	adds.w	r3, sl, r3
 80067f8:	623b      	str	r3, [r7, #32]
 80067fa:	462b      	mov	r3, r5
 80067fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800680e:	4629      	mov	r1, r5
 8006810:	028b      	lsls	r3, r1, #10
 8006812:	4621      	mov	r1, r4
 8006814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006818:	4621      	mov	r1, r4
 800681a:	028a      	lsls	r2, r1, #10
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006824:	2200      	movs	r2, #0
 8006826:	673b      	str	r3, [r7, #112]	@ 0x70
 8006828:	677a      	str	r2, [r7, #116]	@ 0x74
 800682a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800682e:	f7fa f9f7 	bl	8000c20 <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4613      	mov	r3, r2
 8006838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800683c:	4b41      	ldr	r3, [pc, #260]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	3301      	adds	r3, #1
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800684e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006856:	fbb2 f3f3 	udiv	r3, r2, r3
 800685a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800685e:	e0eb      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006860:	4b38      	ldr	r3, [pc, #224]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686c:	4b35      	ldr	r3, [pc, #212]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d06b      	beq.n	8006950 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006878:	4b32      	ldr	r3, [pc, #200]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x354>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	099b      	lsrs	r3, r3, #6
 800687e:	2200      	movs	r2, #0
 8006880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006884:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688a:	663b      	str	r3, [r7, #96]	@ 0x60
 800688c:	2300      	movs	r3, #0
 800688e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006890:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006894:	4622      	mov	r2, r4
 8006896:	462b      	mov	r3, r5
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	0159      	lsls	r1, r3, #5
 80068a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a6:	0150      	lsls	r0, r2, #5
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4621      	mov	r1, r4
 80068ae:	1a51      	subs	r1, r2, r1
 80068b0:	61b9      	str	r1, [r7, #24]
 80068b2:	4629      	mov	r1, r5
 80068b4:	eb63 0301 	sbc.w	r3, r3, r1
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80068c6:	4659      	mov	r1, fp
 80068c8:	018b      	lsls	r3, r1, #6
 80068ca:	4651      	mov	r1, sl
 80068cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068d0:	4651      	mov	r1, sl
 80068d2:	018a      	lsls	r2, r1, #6
 80068d4:	4651      	mov	r1, sl
 80068d6:	ebb2 0801 	subs.w	r8, r2, r1
 80068da:	4659      	mov	r1, fp
 80068dc:	eb63 0901 	sbc.w	r9, r3, r1
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f4:	4690      	mov	r8, r2
 80068f6:	4699      	mov	r9, r3
 80068f8:	4623      	mov	r3, r4
 80068fa:	eb18 0303 	adds.w	r3, r8, r3
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	462b      	mov	r3, r5
 8006902:	eb49 0303 	adc.w	r3, r9, r3
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006914:	4629      	mov	r1, r5
 8006916:	024b      	lsls	r3, r1, #9
 8006918:	4621      	mov	r1, r4
 800691a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800691e:	4621      	mov	r1, r4
 8006920:	024a      	lsls	r2, r1, #9
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800692a:	2200      	movs	r2, #0
 800692c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800692e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006930:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006934:	f7fa f974 	bl	8000c20 <__aeabi_uldivmod>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4613      	mov	r3, r2
 800693e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006942:	e065      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x420>
 8006944:	40023800 	.word	0x40023800
 8006948:	00f42400 	.word	0x00f42400
 800694c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006950:	4b3d      	ldr	r3, [pc, #244]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0x458>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	099b      	lsrs	r3, r3, #6
 8006956:	2200      	movs	r2, #0
 8006958:	4618      	mov	r0, r3
 800695a:	4611      	mov	r1, r2
 800695c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006960:	653b      	str	r3, [r7, #80]	@ 0x50
 8006962:	2300      	movs	r3, #0
 8006964:	657b      	str	r3, [r7, #84]	@ 0x54
 8006966:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800696a:	4642      	mov	r2, r8
 800696c:	464b      	mov	r3, r9
 800696e:	f04f 0000 	mov.w	r0, #0
 8006972:	f04f 0100 	mov.w	r1, #0
 8006976:	0159      	lsls	r1, r3, #5
 8006978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800697c:	0150      	lsls	r0, r2, #5
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4641      	mov	r1, r8
 8006984:	1a51      	subs	r1, r2, r1
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	4649      	mov	r1, r9
 800698a:	eb63 0301 	sbc.w	r3, r3, r1
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800699c:	4659      	mov	r1, fp
 800699e:	018b      	lsls	r3, r1, #6
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069a6:	4651      	mov	r1, sl
 80069a8:	018a      	lsls	r2, r1, #6
 80069aa:	4651      	mov	r1, sl
 80069ac:	1a54      	subs	r4, r2, r1
 80069ae:	4659      	mov	r1, fp
 80069b0:	eb63 0501 	sbc.w	r5, r3, r1
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	00eb      	lsls	r3, r5, #3
 80069be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c2:	00e2      	lsls	r2, r4, #3
 80069c4:	4614      	mov	r4, r2
 80069c6:	461d      	mov	r5, r3
 80069c8:	4643      	mov	r3, r8
 80069ca:	18e3      	adds	r3, r4, r3
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	464b      	mov	r3, r9
 80069d0:	eb45 0303 	adc.w	r3, r5, r3
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069e2:	4629      	mov	r1, r5
 80069e4:	028b      	lsls	r3, r1, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069ec:	4621      	mov	r1, r4
 80069ee:	028a      	lsls	r2, r1, #10
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069f8:	2200      	movs	r2, #0
 80069fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80069fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a02:	f7fa f90d 	bl	8000c20 <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006a10:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <HAL_RCC_GetSysClockFreq+0x458>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	0f1b      	lsrs	r3, r3, #28
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a2e:	e003      	b.n	8006a38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006a36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	37b8      	adds	r7, #184	@ 0xb8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	00f42400 	.word	0x00f42400

08006a50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e28d      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8083 	beq.w	8006b76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a70:	4b94      	ldr	r3, [pc, #592]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 030c 	and.w	r3, r3, #12
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d019      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a7c:	4b91      	ldr	r3, [pc, #580]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d106      	bne.n	8006a96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a88:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a94:	d00c      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a96:	4b8b      	ldr	r3, [pc, #556]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d112      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa2:	4b88      	ldr	r3, [pc, #544]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aae:	d10b      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab0:	4b84      	ldr	r3, [pc, #528]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d05b      	beq.n	8006b74 <HAL_RCC_OscConfig+0x124>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d157      	bne.n	8006b74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e25a      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad0:	d106      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x90>
 8006ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a7b      	ldr	r2, [pc, #492]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	e01d      	b.n	8006b1c <HAL_RCC_OscConfig+0xcc>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCC_OscConfig+0xb4>
 8006aea:	4b76      	ldr	r3, [pc, #472]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a75      	ldr	r2, [pc, #468]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	4b73      	ldr	r3, [pc, #460]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a72      	ldr	r2, [pc, #456]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e00b      	b.n	8006b1c <HAL_RCC_OscConfig+0xcc>
 8006b04:	4b6f      	ldr	r3, [pc, #444]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	4b6c      	ldr	r3, [pc, #432]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a6b      	ldr	r2, [pc, #428]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d013      	beq.n	8006b4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fd fb34 	bl	8004190 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b2c:	f7fd fb30 	bl	8004190 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b64      	cmp	r3, #100	@ 0x64
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e21f      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3e:	4b61      	ldr	r3, [pc, #388]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0xdc>
 8006b4a:	e014      	b.n	8006b76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fd fb20 	bl	8004190 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b54:	f7fd fb1c 	bl	8004190 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b64      	cmp	r3, #100	@ 0x64
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e20b      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b66:	4b57      	ldr	r3, [pc, #348]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x104>
 8006b72:	e000      	b.n	8006b76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d06f      	beq.n	8006c62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b82:	4b50      	ldr	r3, [pc, #320]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b96:	2b08      	cmp	r3, #8
 8006b98:	d105      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba6:	4b47      	ldr	r3, [pc, #284]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006bae:	2b0c      	cmp	r3, #12
 8006bb0:	d11c      	bne.n	8006bec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bb2:	4b44      	ldr	r3, [pc, #272]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d116      	bne.n	8006bec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bbe:	4b41      	ldr	r3, [pc, #260]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x186>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d001      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e1d3      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4937      	ldr	r1, [pc, #220]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bea:	e03a      	b.n	8006c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bf4:	4b34      	ldr	r3, [pc, #208]	@ (8006cc8 <HAL_RCC_OscConfig+0x278>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bfa:	f7fd fac9 	bl	8004190 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c02:	f7fd fac5 	bl	8004190 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e1b4      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c14:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c20:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4925      	ldr	r1, [pc, #148]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
 8006c34:	e015      	b.n	8006c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c36:	4b24      	ldr	r3, [pc, #144]	@ (8006cc8 <HAL_RCC_OscConfig+0x278>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fd faa8 	bl	8004190 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c44:	f7fd faa4 	bl	8004190 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e193      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c56:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d036      	beq.n	8006cdc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c76:	4b15      	ldr	r3, [pc, #84]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7c:	f7fd fa88 	bl	8004190 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c84:	f7fd fa84 	bl	8004190 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e173      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <HAL_RCC_OscConfig+0x274>)
 8006c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCC_OscConfig+0x234>
 8006ca2:	e01b      	b.n	8006cdc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca4:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <HAL_RCC_OscConfig+0x27c>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006caa:	f7fd fa71 	bl	8004190 <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb0:	e00e      	b.n	8006cd0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cb2:	f7fd fa6d 	bl	8004190 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d907      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e15c      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	42470000 	.word	0x42470000
 8006ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1ea      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8097 	beq.w	8006e18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cee:	4b83      	ldr	r3, [pc, #524]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10f      	bne.n	8006d1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	4a7e      	ldr	r2, [pc, #504]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1a:	4b79      	ldr	r3, [pc, #484]	@ (8006f00 <HAL_RCC_OscConfig+0x4b0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d118      	bne.n	8006d58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d26:	4b76      	ldr	r3, [pc, #472]	@ (8006f00 <HAL_RCC_OscConfig+0x4b0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a75      	ldr	r2, [pc, #468]	@ (8006f00 <HAL_RCC_OscConfig+0x4b0>)
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d32:	f7fd fa2d 	bl	8004190 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3a:	f7fd fa29 	bl	8004190 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e118      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8006f00 <HAL_RCC_OscConfig+0x4b0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0f0      	beq.n	8006d3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCC_OscConfig+0x31e>
 8006d60:	4b66      	ldr	r3, [pc, #408]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d64:	4a65      	ldr	r2, [pc, #404]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d6c:	e01c      	b.n	8006da8 <HAL_RCC_OscConfig+0x358>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x340>
 8006d76:	4b61      	ldr	r3, [pc, #388]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	4a60      	ldr	r2, [pc, #384]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d7c:	f043 0304 	orr.w	r3, r3, #4
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d82:	4b5e      	ldr	r3, [pc, #376]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d86:	4a5d      	ldr	r2, [pc, #372]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0x358>
 8006d90:	4b5a      	ldr	r3, [pc, #360]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d94:	4a59      	ldr	r2, [pc, #356]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9c:	4b57      	ldr	r3, [pc, #348]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da0:	4a56      	ldr	r2, [pc, #344]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006da2:	f023 0304 	bic.w	r3, r3, #4
 8006da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d015      	beq.n	8006ddc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fd f9ee 	bl	8004190 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db6:	e00a      	b.n	8006dce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fd f9ea 	bl	8004190 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e0d7      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dce:	4b4b      	ldr	r3, [pc, #300]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0ee      	beq.n	8006db8 <HAL_RCC_OscConfig+0x368>
 8006dda:	e014      	b.n	8006e06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ddc:	f7fd f9d8 	bl	8004190 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de2:	e00a      	b.n	8006dfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de4:	f7fd f9d4 	bl	8004190 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e0c1      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfa:	4b40      	ldr	r3, [pc, #256]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1ee      	bne.n	8006de4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	4a3a      	ldr	r2, [pc, #232]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 80ad 	beq.w	8006f7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e22:	4b36      	ldr	r3, [pc, #216]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d060      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d145      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e36:	4b33      	ldr	r3, [pc, #204]	@ (8006f04 <HAL_RCC_OscConfig+0x4b4>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fd f9a8 	bl	8004190 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e44:	f7fd f9a4 	bl	8004190 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e093      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	4b29      	ldr	r3, [pc, #164]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69da      	ldr	r2, [r3, #28]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	019b      	lsls	r3, r3, #6
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	061b      	lsls	r3, r3, #24
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e8c:	071b      	lsls	r3, r3, #28
 8006e8e:	491b      	ldr	r1, [pc, #108]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e94:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <HAL_RCC_OscConfig+0x4b4>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9a:	f7fd f979 	bl	8004190 <HAL_GetTick>
 8006e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea2:	f7fd f975 	bl	8004190 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e064      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb4:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0f0      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x452>
 8006ec0:	e05c      	b.n	8006f7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec2:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <HAL_RCC_OscConfig+0x4b4>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fd f962 	bl	8004190 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fd f95e 	bl	8004190 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e04d      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <HAL_RCC_OscConfig+0x4ac>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f0      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x480>
 8006eee:	e045      	b.n	8006f7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d107      	bne.n	8006f08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e040      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
 8006efc:	40023800 	.word	0x40023800
 8006f00:	40007000 	.word	0x40007000
 8006f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f08:	4b1f      	ldr	r3, [pc, #124]	@ (8006f88 <HAL_RCC_OscConfig+0x538>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d030      	beq.n	8006f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d129      	bne.n	8006f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d122      	bne.n	8006f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f38:	4013      	ands	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d119      	bne.n	8006f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	3b01      	subs	r3, #1
 8006f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d10f      	bne.n	8006f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d107      	bne.n	8006f78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800

08006f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e041      	b.n	8007022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc ff30 	bl	8003e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f000 f9ce 	bl	800736c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d001      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e04e      	b.n	80070e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a23      	ldr	r2, [pc, #140]	@ (80070f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706e:	d01d      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1f      	ldr	r2, [pc, #124]	@ (80070f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1e      	ldr	r2, [pc, #120]	@ (80070f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1c      	ldr	r2, [pc, #112]	@ (80070fc <HAL_TIM_Base_Start_IT+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1b      	ldr	r2, [pc, #108]	@ (8007100 <HAL_TIM_Base_Start_IT+0xd4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a19      	ldr	r2, [pc, #100]	@ (8007104 <HAL_TIM_Base_Start_IT+0xd8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a18      	ldr	r2, [pc, #96]	@ (8007108 <HAL_TIM_Base_Start_IT+0xdc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d111      	bne.n	80070d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d010      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0201 	orr.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ce:	e007      	b.n	80070e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40010000 	.word	0x40010000
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40000c00 	.word	0x40000c00
 8007100:	40010400 	.word	0x40010400
 8007104:	40014000 	.word	0x40014000
 8007108:	40001800 	.word	0x40001800

0800710c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0202 	mvn.w	r2, #2
 8007138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8ee 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f8e0 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f8f1 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0204 	mvn.w	r2, #4
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8c4 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8b6 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8c7 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0208 	mvn.w	r2, #8
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f89a 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f88c 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f89d 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0210 	mvn.w	r2, #16
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2208      	movs	r2, #8
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f870 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f862 	bl	800731c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f873 	bl	8007344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10e      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d107      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0201 	mvn.w	r2, #1
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fb fd36 	bl	8002cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729a:	2b80      	cmp	r3, #128	@ 0x80
 800729c:	d10e      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a8:	2b80      	cmp	r3, #128	@ 0x80
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f97e 	bl	80075b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c6:	2b40      	cmp	r3, #64	@ 0x40
 80072c8:	d10e      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b40      	cmp	r3, #64	@ 0x40
 80072d6:	d107      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f838 	bl	8007358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d10e      	bne.n	8007314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b20      	cmp	r3, #32
 8007302:	d107      	bne.n	8007314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0220 	mvn.w	r2, #32
 800730c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f948 	bl	80075a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a40      	ldr	r2, [pc, #256]	@ (8007480 <TIM_Base_SetConfig+0x114>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d013      	beq.n	80073ac <TIM_Base_SetConfig+0x40>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800738a:	d00f      	beq.n	80073ac <TIM_Base_SetConfig+0x40>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a3d      	ldr	r2, [pc, #244]	@ (8007484 <TIM_Base_SetConfig+0x118>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00b      	beq.n	80073ac <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a3c      	ldr	r2, [pc, #240]	@ (8007488 <TIM_Base_SetConfig+0x11c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a3b      	ldr	r2, [pc, #236]	@ (800748c <TIM_Base_SetConfig+0x120>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a3a      	ldr	r2, [pc, #232]	@ (8007490 <TIM_Base_SetConfig+0x124>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d108      	bne.n	80073be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2f      	ldr	r2, [pc, #188]	@ (8007480 <TIM_Base_SetConfig+0x114>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d02b      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073cc:	d027      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007484 <TIM_Base_SetConfig+0x118>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d023      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007488 <TIM_Base_SetConfig+0x11c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01f      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2a      	ldr	r2, [pc, #168]	@ (800748c <TIM_Base_SetConfig+0x120>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01b      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a29      	ldr	r2, [pc, #164]	@ (8007490 <TIM_Base_SetConfig+0x124>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d017      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a28      	ldr	r2, [pc, #160]	@ (8007494 <TIM_Base_SetConfig+0x128>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a27      	ldr	r2, [pc, #156]	@ (8007498 <TIM_Base_SetConfig+0x12c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00f      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a26      	ldr	r2, [pc, #152]	@ (800749c <TIM_Base_SetConfig+0x130>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00b      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a25      	ldr	r2, [pc, #148]	@ (80074a0 <TIM_Base_SetConfig+0x134>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d007      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a24      	ldr	r2, [pc, #144]	@ (80074a4 <TIM_Base_SetConfig+0x138>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d003      	beq.n	800741e <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a23      	ldr	r2, [pc, #140]	@ (80074a8 <TIM_Base_SetConfig+0x13c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d108      	bne.n	8007430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4313      	orrs	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a0a      	ldr	r2, [pc, #40]	@ (8007480 <TIM_Base_SetConfig+0x114>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_Base_SetConfig+0xf8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a0c      	ldr	r2, [pc, #48]	@ (8007490 <TIM_Base_SetConfig+0x124>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d103      	bne.n	800746c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	615a      	str	r2, [r3, #20]
}
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40010000 	.word	0x40010000
 8007484:	40000400 	.word	0x40000400
 8007488:	40000800 	.word	0x40000800
 800748c:	40000c00 	.word	0x40000c00
 8007490:	40010400 	.word	0x40010400
 8007494:	40014000 	.word	0x40014000
 8007498:	40014400 	.word	0x40014400
 800749c:	40014800 	.word	0x40014800
 80074a0:	40001800 	.word	0x40001800
 80074a4:	40001c00 	.word	0x40001c00
 80074a8:	40002000 	.word	0x40002000

080074ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e05a      	b.n	800757a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a21      	ldr	r2, [pc, #132]	@ (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d022      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007510:	d01d      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1d      	ldr	r2, [pc, #116]	@ (800758c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d018      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1b      	ldr	r2, [pc, #108]	@ (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d013      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1a      	ldr	r2, [pc, #104]	@ (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00e      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a18      	ldr	r2, [pc, #96]	@ (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d009      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a17      	ldr	r2, [pc, #92]	@ (800759c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d004      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a15      	ldr	r2, [pc, #84]	@ (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d10c      	bne.n	8007568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4313      	orrs	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40010400 	.word	0x40010400
 800759c:	40014000 	.word	0x40014000
 80075a0:	40001800 	.word	0x40001800

080075a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e03f      	b.n	800765e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fc fc56 	bl	8003ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2224      	movs	r2, #36	@ 0x24
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800760e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fddf 	bl	80081d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b08a      	sub	sp, #40	@ 0x28
 800766a:	af02      	add	r7, sp, #8
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b20      	cmp	r3, #32
 8007684:	d17c      	bne.n	8007780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <HAL_UART_Transmit+0x2c>
 800768c:	88fb      	ldrh	r3, [r7, #6]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e075      	b.n	8007782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Transmit+0x3e>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e06e      	b.n	8007782 <HAL_UART_Transmit+0x11c>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2221      	movs	r2, #33	@ 0x21
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ba:	f7fc fd69 	bl	8004190 <HAL_GetTick>
 80076be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d4:	d108      	bne.n	80076e8 <HAL_UART_Transmit+0x82>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	e003      	b.n	80076f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80076f8:	e02a      	b.n	8007750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	2180      	movs	r1, #128	@ 0x80
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fb1f 	bl	8007d48 <UART_WaitOnFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e036      	b.n	8007782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10b      	bne.n	8007732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	3302      	adds	r3, #2
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	e007      	b.n	8007742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1cf      	bne.n	80076fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2200      	movs	r2, #0
 8007762:	2140      	movs	r1, #64	@ 0x40
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 faef 	bl	8007d48 <UART_WaitOnFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e006      	b.n	8007782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e000      	b.n	8007782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007780:	2302      	movs	r3, #2
  }
}
 8007782:	4618      	mov	r0, r3
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	4613      	mov	r3, r2
 8007796:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d11d      	bne.n	80077e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_UART_Receive_IT+0x26>
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e016      	b.n	80077e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Receive_IT+0x38>
 80077be:	2302      	movs	r3, #2
 80077c0:	e00f      	b.n	80077e2 <HAL_UART_Receive_IT+0x58>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fb24 	bl	8007e24 <UART_Start_Receive_IT>
 80077dc:	4603      	mov	r3, r0
 80077de:	e000      	b.n	80077e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b0ba      	sub	sp, #232	@ 0xe8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007818:	2300      	movs	r3, #0
 800781a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800782a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10f      	bne.n	8007852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <HAL_UART_IRQHandler+0x66>
 800783e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fc07 	bl	800805e <UART_Receive_IT>
      return;
 8007850:	e256      	b.n	8007d00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80de 	beq.w	8007a18 <HAL_UART_IRQHandler+0x22c>
 800785c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800786c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80d1 	beq.w	8007a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <HAL_UART_IRQHandler+0xae>
 8007882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007892:	f043 0201 	orr.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <HAL_UART_IRQHandler+0xd2>
 80078a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	f043 0202 	orr.w	r2, r3, #2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <HAL_UART_IRQHandler+0xf6>
 80078ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078da:	f043 0204 	orr.w	r2, r3, #4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d011      	beq.n	8007912 <HAL_UART_IRQHandler+0x126>
 80078ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d005      	beq.n	8007912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790a:	f043 0208 	orr.w	r2, r3, #8
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 81ed 	beq.w	8007cf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_UART_IRQHandler+0x14e>
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fb92 	bl	800805e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007944:	2b40      	cmp	r3, #64	@ 0x40
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007956:	f003 0308 	and.w	r3, r3, #8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <HAL_UART_IRQHandler+0x17a>
 800795e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007962:	2b00      	cmp	r3, #0
 8007964:	d04f      	beq.n	8007a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa9a 	bl	8007ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007976:	2b40      	cmp	r3, #64	@ 0x40
 8007978:	d141      	bne.n	80079fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3314      	adds	r3, #20
 8007980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3314      	adds	r3, #20
 80079a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1d9      	bne.n	800797a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d013      	beq.n	80079f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d2:	4a7d      	ldr	r2, [pc, #500]	@ (8007bc8 <HAL_UART_IRQHandler+0x3dc>)
 80079d4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fc fd89 	bl	80044f2 <HAL_DMA_Abort_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d016      	beq.n	8007a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f4:	e00e      	b.n	8007a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f990 	bl	8007d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fc:	e00a      	b.n	8007a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f98c 	bl	8007d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a04:	e006      	b.n	8007a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f988 	bl	8007d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007a12:	e170      	b.n	8007cf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	bf00      	nop
    return;
 8007a16:	e16e      	b.n	8007cf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	f040 814a 	bne.w	8007cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8143 	beq.w	8007cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 813c 	beq.w	8007cb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5e:	2b40      	cmp	r3, #64	@ 0x40
 8007a60:	f040 80b4 	bne.w	8007bcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8140 	beq.w	8007cfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a82:	429a      	cmp	r2, r3
 8007a84:	f080 8139 	bcs.w	8007cfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a9a:	f000 8088 	beq.w	8007bae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330c      	adds	r3, #12
 8007aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007aca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1d9      	bne.n	8007a9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3314      	adds	r3, #20
 8007af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e1      	bne.n	8007aea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3314      	adds	r3, #20
 8007b2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e3      	bne.n	8007b26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b7e:	f023 0310 	bic.w	r3, r3, #16
 8007b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e3      	bne.n	8007b6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fc fc32 	bl	8004412 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f8b6 	bl	8007d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bc4:	e099      	b.n	8007cfa <HAL_UART_IRQHandler+0x50e>
 8007bc6:	bf00      	nop
 8007bc8:	08007f67 	.word	0x08007f67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 808b 	beq.w	8007cfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8086 	beq.w	8007cfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	330c      	adds	r3, #12
 8007bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c16:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e3      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3314      	adds	r3, #20
 8007c30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	623b      	str	r3, [r7, #32]
   return(result);
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3314      	adds	r3, #20
 8007c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e3      	bne.n	8007c2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0310 	bic.w	r3, r3, #16
 8007c86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c94:	61fa      	str	r2, [r7, #28]
 8007c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	69b9      	ldr	r1, [r7, #24]
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e3      	bne.n	8007c70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f83e 	bl	8007d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cb4:	e023      	b.n	8007cfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x4ea>
 8007cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f95d 	bl	8007f8e <UART_Transmit_IT>
    return;
 8007cd4:	e014      	b.n	8007d00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <HAL_UART_IRQHandler+0x514>
 8007ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f99d 	bl	800802e <UART_EndTransmit_IT>
    return;
 8007cf4:	e004      	b.n	8007d00 <HAL_UART_IRQHandler+0x514>
    return;
 8007cf6:	bf00      	nop
 8007cf8:	e002      	b.n	8007d00 <HAL_UART_IRQHandler+0x514>
      return;
 8007cfa:	bf00      	nop
 8007cfc:	e000      	b.n	8007d00 <HAL_UART_IRQHandler+0x514>
      return;
 8007cfe:	bf00      	nop
  }
}
 8007d00:	37e8      	adds	r7, #232	@ 0xe8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop

08007d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b090      	sub	sp, #64	@ 0x40
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d58:	e050      	b.n	8007dfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d04c      	beq.n	8007dfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d68:	f7fc fa12 	bl	8004190 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d241      	bcs.n	8007dfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d98:	637a      	str	r2, [r7, #52]	@ 0x34
 8007d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3314      	adds	r3, #20
 8007db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	613b      	str	r3, [r7, #16]
   return(result);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f023 0301 	bic.w	r3, r3, #1
 8007dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dcc:	623a      	str	r2, [r7, #32]
 8007dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	69f9      	ldr	r1, [r7, #28]
 8007dd2:	6a3a      	ldr	r2, [r7, #32]
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e5      	bne.n	8007dac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e00f      	b.n	8007e1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4013      	ands	r3, r2
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	bf0c      	ite	eq
 8007e0c:	2301      	moveq	r3, #1
 8007e0e:	2300      	movne	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	461a      	mov	r2, r3
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d09f      	beq.n	8007d5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3740      	adds	r7, #64	@ 0x40
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2222      	movs	r2, #34	@ 0x22
 8007e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d007      	beq.n	8007e72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695a      	ldr	r2, [r3, #20]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0220 	orr.w	r2, r2, #32
 8007e90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b095      	sub	sp, #84	@ 0x54
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	330c      	adds	r3, #12
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb2:	e853 3f00 	ldrex	r3, [r3]
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ec8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ecc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ece:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed0:	e841 2300 	strex	r3, r2, [r1]
 8007ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e5      	bne.n	8007ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3314      	adds	r3, #20
 8007ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3314      	adds	r3, #20
 8007efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e5      	bne.n	8007edc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d119      	bne.n	8007f4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f38:	61ba      	str	r2, [r7, #24]
 8007f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6979      	ldr	r1, [r7, #20]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	613b      	str	r3, [r7, #16]
   return(result);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e5      	bne.n	8007f18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f5a:	bf00      	nop
 8007f5c:	3754      	adds	r7, #84	@ 0x54
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff fecb 	bl	8007d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b21      	cmp	r3, #33	@ 0x21
 8007fa0:	d13e      	bne.n	8008020 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007faa:	d114      	bne.n	8007fd6 <UART_Transmit_IT+0x48>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d110      	bne.n	8007fd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	1c9a      	adds	r2, r3, #2
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	621a      	str	r2, [r3, #32]
 8007fd4:	e008      	b.n	8007fe8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	1c59      	adds	r1, r3, #1
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6211      	str	r1, [r2, #32]
 8007fe0:	781a      	ldrb	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10f      	bne.n	800801c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800800a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800801a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	e000      	b.n	8008022 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008020:	2302      	movs	r3, #2
  }
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff fe5a 	bl	8007d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b08c      	sub	sp, #48	@ 0x30
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b22      	cmp	r3, #34	@ 0x22
 8008070:	f040 80ab 	bne.w	80081ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800807c:	d117      	bne.n	80080ae <UART_Receive_IT+0x50>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d113      	bne.n	80080ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	b29b      	uxth	r3, r3
 8008098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809c:	b29a      	uxth	r2, r3
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a6:	1c9a      	adds	r2, r3, #2
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80080ac:	e026      	b.n	80080fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080c0:	d007      	beq.n	80080d2 <UART_Receive_IT+0x74>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <UART_Receive_IT+0x82>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d106      	bne.n	80080e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e008      	b.n	80080f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29b      	uxth	r3, r3
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4619      	mov	r1, r3
 800810a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800810c:	2b00      	cmp	r3, #0
 800810e:	d15a      	bne.n	80081c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0220 	bic.w	r2, r2, #32
 800811e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800812e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695a      	ldr	r2, [r3, #20]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0201 	bic.w	r2, r2, #1
 800813e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814c:	2b01      	cmp	r3, #1
 800814e:	d135      	bne.n	80081bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	613b      	str	r3, [r7, #16]
   return(result);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f023 0310 	bic.w	r3, r3, #16
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008176:	623a      	str	r2, [r7, #32]
 8008178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	69f9      	ldr	r1, [r7, #28]
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	61bb      	str	r3, [r7, #24]
   return(result);
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e5      	bne.n	8008156 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b10      	cmp	r3, #16
 8008196:	d10a      	bne.n	80081ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff fdbb 	bl	8007d30 <HAL_UARTEx_RxEventCallback>
 80081ba:	e002      	b.n	80081c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7fa fd69 	bl	8002c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e002      	b.n	80081cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3730      	adds	r7, #48	@ 0x30
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d8:	b0c0      	sub	sp, #256	@ 0x100
 80081da:	af00      	add	r7, sp, #0
 80081dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f0:	68d9      	ldr	r1, [r3, #12]
 80081f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	ea40 0301 	orr.w	r3, r0, r1
 80081fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	431a      	orrs	r2, r3
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	431a      	orrs	r2, r3
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800822c:	f021 010c 	bic.w	r1, r1, #12
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800823a:	430b      	orrs	r3, r1
 800823c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800823e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824e:	6999      	ldr	r1, [r3, #24]
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	ea40 0301 	orr.w	r3, r0, r1
 800825a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b8f      	ldr	r3, [pc, #572]	@ (80084a0 <UART_SetConfig+0x2cc>)
 8008264:	429a      	cmp	r2, r3
 8008266:	d005      	beq.n	8008274 <UART_SetConfig+0xa0>
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b8d      	ldr	r3, [pc, #564]	@ (80084a4 <UART_SetConfig+0x2d0>)
 8008270:	429a      	cmp	r2, r3
 8008272:	d104      	bne.n	800827e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fe f9a8 	bl	80065c8 <HAL_RCC_GetPCLK2Freq>
 8008278:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800827c:	e003      	b.n	8008286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800827e:	f7fe f98f 	bl	80065a0 <HAL_RCC_GetPCLK1Freq>
 8008282:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008290:	f040 810c 	bne.w	80084ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008298:	2200      	movs	r2, #0
 800829a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800829e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082a6:	4622      	mov	r2, r4
 80082a8:	462b      	mov	r3, r5
 80082aa:	1891      	adds	r1, r2, r2
 80082ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082ae:	415b      	adcs	r3, r3
 80082b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082b6:	4621      	mov	r1, r4
 80082b8:	eb12 0801 	adds.w	r8, r2, r1
 80082bc:	4629      	mov	r1, r5
 80082be:	eb43 0901 	adc.w	r9, r3, r1
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082d6:	4690      	mov	r8, r2
 80082d8:	4699      	mov	r9, r3
 80082da:	4623      	mov	r3, r4
 80082dc:	eb18 0303 	adds.w	r3, r8, r3
 80082e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082e4:	462b      	mov	r3, r5
 80082e6:	eb49 0303 	adc.w	r3, r9, r3
 80082ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008302:	460b      	mov	r3, r1
 8008304:	18db      	adds	r3, r3, r3
 8008306:	653b      	str	r3, [r7, #80]	@ 0x50
 8008308:	4613      	mov	r3, r2
 800830a:	eb42 0303 	adc.w	r3, r2, r3
 800830e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008318:	f7f8 fc82 	bl	8000c20 <__aeabi_uldivmod>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4b61      	ldr	r3, [pc, #388]	@ (80084a8 <UART_SetConfig+0x2d4>)
 8008322:	fba3 2302 	umull	r2, r3, r3, r2
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	011c      	lsls	r4, r3, #4
 800832a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800832e:	2200      	movs	r2, #0
 8008330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008334:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800833c:	4642      	mov	r2, r8
 800833e:	464b      	mov	r3, r9
 8008340:	1891      	adds	r1, r2, r2
 8008342:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008344:	415b      	adcs	r3, r3
 8008346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800834c:	4641      	mov	r1, r8
 800834e:	eb12 0a01 	adds.w	sl, r2, r1
 8008352:	4649      	mov	r1, r9
 8008354:	eb43 0b01 	adc.w	fp, r3, r1
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800836c:	4692      	mov	sl, r2
 800836e:	469b      	mov	fp, r3
 8008370:	4643      	mov	r3, r8
 8008372:	eb1a 0303 	adds.w	r3, sl, r3
 8008376:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800837a:	464b      	mov	r3, r9
 800837c:	eb4b 0303 	adc.w	r3, fp, r3
 8008380:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008390:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008398:	460b      	mov	r3, r1
 800839a:	18db      	adds	r3, r3, r3
 800839c:	643b      	str	r3, [r7, #64]	@ 0x40
 800839e:	4613      	mov	r3, r2
 80083a0:	eb42 0303 	adc.w	r3, r2, r3
 80083a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083ae:	f7f8 fc37 	bl	8000c20 <__aeabi_uldivmod>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	4b3b      	ldr	r3, [pc, #236]	@ (80084a8 <UART_SetConfig+0x2d4>)
 80083ba:	fba3 2301 	umull	r2, r3, r3, r1
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	2264      	movs	r2, #100	@ 0x64
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	1acb      	subs	r3, r1, r3
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083ce:	4b36      	ldr	r3, [pc, #216]	@ (80084a8 <UART_SetConfig+0x2d4>)
 80083d0:	fba3 2302 	umull	r2, r3, r3, r2
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083dc:	441c      	add	r4, r3
 80083de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	1891      	adds	r1, r2, r2
 80083f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083f8:	415b      	adcs	r3, r3
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008400:	4641      	mov	r1, r8
 8008402:	1851      	adds	r1, r2, r1
 8008404:	6339      	str	r1, [r7, #48]	@ 0x30
 8008406:	4649      	mov	r1, r9
 8008408:	414b      	adcs	r3, r1
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008418:	4659      	mov	r1, fp
 800841a:	00cb      	lsls	r3, r1, #3
 800841c:	4651      	mov	r1, sl
 800841e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008422:	4651      	mov	r1, sl
 8008424:	00ca      	lsls	r2, r1, #3
 8008426:	4610      	mov	r0, r2
 8008428:	4619      	mov	r1, r3
 800842a:	4603      	mov	r3, r0
 800842c:	4642      	mov	r2, r8
 800842e:	189b      	adds	r3, r3, r2
 8008430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008434:	464b      	mov	r3, r9
 8008436:	460a      	mov	r2, r1
 8008438:	eb42 0303 	adc.w	r3, r2, r3
 800843c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800844c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008454:	460b      	mov	r3, r1
 8008456:	18db      	adds	r3, r3, r3
 8008458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800845a:	4613      	mov	r3, r2
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800846a:	f7f8 fbd9 	bl	8000c20 <__aeabi_uldivmod>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4b0d      	ldr	r3, [pc, #52]	@ (80084a8 <UART_SetConfig+0x2d4>)
 8008474:	fba3 1302 	umull	r1, r3, r3, r2
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	2164      	movs	r1, #100	@ 0x64
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	3332      	adds	r3, #50	@ 0x32
 8008486:	4a08      	ldr	r2, [pc, #32]	@ (80084a8 <UART_SetConfig+0x2d4>)
 8008488:	fba2 2303 	umull	r2, r3, r2, r3
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	f003 0207 	and.w	r2, r3, #7
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4422      	add	r2, r4
 800849a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800849c:	e106      	b.n	80086ac <UART_SetConfig+0x4d8>
 800849e:	bf00      	nop
 80084a0:	40011000 	.word	0x40011000
 80084a4:	40011400 	.word	0x40011400
 80084a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80084be:	4642      	mov	r2, r8
 80084c0:	464b      	mov	r3, r9
 80084c2:	1891      	adds	r1, r2, r2
 80084c4:	6239      	str	r1, [r7, #32]
 80084c6:	415b      	adcs	r3, r3
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ce:	4641      	mov	r1, r8
 80084d0:	1854      	adds	r4, r2, r1
 80084d2:	4649      	mov	r1, r9
 80084d4:	eb43 0501 	adc.w	r5, r3, r1
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	00eb      	lsls	r3, r5, #3
 80084e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084e6:	00e2      	lsls	r2, r4, #3
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	4643      	mov	r3, r8
 80084ee:	18e3      	adds	r3, r4, r3
 80084f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084f4:	464b      	mov	r3, r9
 80084f6:	eb45 0303 	adc.w	r3, r5, r3
 80084fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800850a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800851a:	4629      	mov	r1, r5
 800851c:	008b      	lsls	r3, r1, #2
 800851e:	4621      	mov	r1, r4
 8008520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008524:	4621      	mov	r1, r4
 8008526:	008a      	lsls	r2, r1, #2
 8008528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800852c:	f7f8 fb78 	bl	8000c20 <__aeabi_uldivmod>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4b60      	ldr	r3, [pc, #384]	@ (80086b8 <UART_SetConfig+0x4e4>)
 8008536:	fba3 2302 	umull	r2, r3, r3, r2
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	011c      	lsls	r4, r3, #4
 800853e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008542:	2200      	movs	r2, #0
 8008544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008548:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800854c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	1891      	adds	r1, r2, r2
 8008556:	61b9      	str	r1, [r7, #24]
 8008558:	415b      	adcs	r3, r3
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008560:	4641      	mov	r1, r8
 8008562:	1851      	adds	r1, r2, r1
 8008564:	6139      	str	r1, [r7, #16]
 8008566:	4649      	mov	r1, r9
 8008568:	414b      	adcs	r3, r1
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008578:	4659      	mov	r1, fp
 800857a:	00cb      	lsls	r3, r1, #3
 800857c:	4651      	mov	r1, sl
 800857e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008582:	4651      	mov	r1, sl
 8008584:	00ca      	lsls	r2, r1, #3
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	4603      	mov	r3, r0
 800858c:	4642      	mov	r2, r8
 800858e:	189b      	adds	r3, r3, r2
 8008590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008594:	464b      	mov	r3, r9
 8008596:	460a      	mov	r2, r1
 8008598:	eb42 0303 	adc.w	r3, r2, r3
 800859c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80085b8:	4649      	mov	r1, r9
 80085ba:	008b      	lsls	r3, r1, #2
 80085bc:	4641      	mov	r1, r8
 80085be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085c2:	4641      	mov	r1, r8
 80085c4:	008a      	lsls	r2, r1, #2
 80085c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085ca:	f7f8 fb29 	bl	8000c20 <__aeabi_uldivmod>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4611      	mov	r1, r2
 80085d4:	4b38      	ldr	r3, [pc, #224]	@ (80086b8 <UART_SetConfig+0x4e4>)
 80085d6:	fba3 2301 	umull	r2, r3, r3, r1
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	2264      	movs	r2, #100	@ 0x64
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	1acb      	subs	r3, r1, r3
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	3332      	adds	r3, #50	@ 0x32
 80085e8:	4a33      	ldr	r2, [pc, #204]	@ (80086b8 <UART_SetConfig+0x4e4>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	095b      	lsrs	r3, r3, #5
 80085f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085f4:	441c      	add	r4, r3
 80085f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085fa:	2200      	movs	r2, #0
 80085fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80085fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8008600:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	1891      	adds	r1, r2, r2
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	415b      	adcs	r3, r3
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008614:	4641      	mov	r1, r8
 8008616:	1851      	adds	r1, r2, r1
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	4649      	mov	r1, r9
 800861c:	414b      	adcs	r3, r1
 800861e:	607b      	str	r3, [r7, #4]
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800862c:	4659      	mov	r1, fp
 800862e:	00cb      	lsls	r3, r1, #3
 8008630:	4651      	mov	r1, sl
 8008632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008636:	4651      	mov	r1, sl
 8008638:	00ca      	lsls	r2, r1, #3
 800863a:	4610      	mov	r0, r2
 800863c:	4619      	mov	r1, r3
 800863e:	4603      	mov	r3, r0
 8008640:	4642      	mov	r2, r8
 8008642:	189b      	adds	r3, r3, r2
 8008644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008646:	464b      	mov	r3, r9
 8008648:	460a      	mov	r2, r1
 800864a:	eb42 0303 	adc.w	r3, r2, r3
 800864e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	663b      	str	r3, [r7, #96]	@ 0x60
 800865a:	667a      	str	r2, [r7, #100]	@ 0x64
 800865c:	f04f 0200 	mov.w	r2, #0
 8008660:	f04f 0300 	mov.w	r3, #0
 8008664:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008668:	4649      	mov	r1, r9
 800866a:	008b      	lsls	r3, r1, #2
 800866c:	4641      	mov	r1, r8
 800866e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008672:	4641      	mov	r1, r8
 8008674:	008a      	lsls	r2, r1, #2
 8008676:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800867a:	f7f8 fad1 	bl	8000c20 <__aeabi_uldivmod>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <UART_SetConfig+0x4e4>)
 8008684:	fba3 1302 	umull	r1, r3, r3, r2
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	2164      	movs	r1, #100	@ 0x64
 800868c:	fb01 f303 	mul.w	r3, r1, r3
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	3332      	adds	r3, #50	@ 0x32
 8008696:	4a08      	ldr	r2, [pc, #32]	@ (80086b8 <UART_SetConfig+0x4e4>)
 8008698:	fba2 2303 	umull	r2, r3, r2, r3
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4422      	add	r2, r4
 80086aa:	609a      	str	r2, [r3, #8]
}
 80086ac:	bf00      	nop
 80086ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086b2:	46bd      	mov	sp, r7
 80086b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086b8:	51eb851f 	.word	0x51eb851f

080086bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80086c0:	4904      	ldr	r1, [pc, #16]	@ (80086d4 <MX_FATFS_Init+0x18>)
 80086c2:	4805      	ldr	r0, [pc, #20]	@ (80086d8 <MX_FATFS_Init+0x1c>)
 80086c4:	f000 f8b0 	bl	8008828 <FATFS_LinkDriver>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	4b03      	ldr	r3, [pc, #12]	@ (80086dc <MX_FATFS_Init+0x20>)
 80086ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80086d0:	bf00      	nop
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000480 	.word	0x20000480
 80086d8:	20000060 	.word	0x20000060
 80086dc:	2000047c 	.word	0x2000047c

080086e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80086ea:	4b06      	ldr	r3, [pc, #24]	@ (8008704 <USER_initialize+0x24>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80086f0:	4b04      	ldr	r3, [pc, #16]	@ (8008704 <USER_initialize+0x24>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	2000005d 	.word	0x2000005d

08008708 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008712:	4b06      	ldr	r3, [pc, #24]	@ (800872c <USER_status+0x24>)
 8008714:	2201      	movs	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008718:	4b04      	ldr	r3, [pc, #16]	@ (800872c <USER_status+0x24>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	2000005d 	.word	0x2000005d

08008730 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008740:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800875e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	603a      	str	r2, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
 8008778:	460b      	mov	r3, r1
 800877a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
    return res;
 8008780:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800879e:	2301      	movs	r3, #1
 80087a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80087a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087a8:	7a5b      	ldrb	r3, [r3, #9]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d131      	bne.n	8008814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80087b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087b2:	7a5b      	ldrb	r3, [r3, #9]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087ba:	2100      	movs	r1, #0
 80087bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80087be:	4b19      	ldr	r3, [pc, #100]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087c0:	7a5b      	ldrb	r3, [r3, #9]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	4a17      	ldr	r2, [pc, #92]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80087ce:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087d0:	7a5b      	ldrb	r3, [r3, #9]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b13      	ldr	r3, [pc, #76]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087d8:	4413      	add	r3, r2
 80087da:	79fa      	ldrb	r2, [r7, #7]
 80087dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80087de:	4b11      	ldr	r3, [pc, #68]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087e0:	7a5b      	ldrb	r3, [r3, #9]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	b2d1      	uxtb	r1, r2
 80087e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008824 <FATFS_LinkDriverEx+0x94>)
 80087ea:	7251      	strb	r1, [r2, #9]
 80087ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80087ee:	7dbb      	ldrb	r3, [r7, #22]
 80087f0:	3330      	adds	r3, #48	@ 0x30
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3301      	adds	r3, #1
 80087fc:	223a      	movs	r2, #58	@ 0x3a
 80087fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	3302      	adds	r3, #2
 8008804:	222f      	movs	r2, #47	@ 0x2f
 8008806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	3303      	adds	r3, #3
 800880c:	2200      	movs	r2, #0
 800880e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008810:	2300      	movs	r3, #0
 8008812:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000484 	.word	0x20000484

08008828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008832:	2200      	movs	r2, #0
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff ffaa 	bl	8008790 <FATFS_LinkDriverEx>
 800883c:	4603      	mov	r3, r0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
	...

08008848 <malloc>:
 8008848:	4b02      	ldr	r3, [pc, #8]	@ (8008854 <malloc+0xc>)
 800884a:	4601      	mov	r1, r0
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f000 b82d 	b.w	80088ac <_malloc_r>
 8008852:	bf00      	nop
 8008854:	20000074 	.word	0x20000074

08008858 <free>:
 8008858:	4b02      	ldr	r3, [pc, #8]	@ (8008864 <free+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f000 b903 	b.w	8008a68 <_free_r>
 8008862:	bf00      	nop
 8008864:	20000074 	.word	0x20000074

08008868 <sbrk_aligned>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	4e0f      	ldr	r6, [pc, #60]	@ (80088a8 <sbrk_aligned+0x40>)
 800886c:	460c      	mov	r4, r1
 800886e:	6831      	ldr	r1, [r6, #0]
 8008870:	4605      	mov	r5, r0
 8008872:	b911      	cbnz	r1, 800887a <sbrk_aligned+0x12>
 8008874:	f000 f8ae 	bl	80089d4 <_sbrk_r>
 8008878:	6030      	str	r0, [r6, #0]
 800887a:	4621      	mov	r1, r4
 800887c:	4628      	mov	r0, r5
 800887e:	f000 f8a9 	bl	80089d4 <_sbrk_r>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d103      	bne.n	800888e <sbrk_aligned+0x26>
 8008886:	f04f 34ff 	mov.w	r4, #4294967295
 800888a:	4620      	mov	r0, r4
 800888c:	bd70      	pop	{r4, r5, r6, pc}
 800888e:	1cc4      	adds	r4, r0, #3
 8008890:	f024 0403 	bic.w	r4, r4, #3
 8008894:	42a0      	cmp	r0, r4
 8008896:	d0f8      	beq.n	800888a <sbrk_aligned+0x22>
 8008898:	1a21      	subs	r1, r4, r0
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f89a 	bl	80089d4 <_sbrk_r>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d1f2      	bne.n	800888a <sbrk_aligned+0x22>
 80088a4:	e7ef      	b.n	8008886 <sbrk_aligned+0x1e>
 80088a6:	bf00      	nop
 80088a8:	20000490 	.word	0x20000490

080088ac <_malloc_r>:
 80088ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b0:	1ccd      	adds	r5, r1, #3
 80088b2:	f025 0503 	bic.w	r5, r5, #3
 80088b6:	3508      	adds	r5, #8
 80088b8:	2d0c      	cmp	r5, #12
 80088ba:	bf38      	it	cc
 80088bc:	250c      	movcc	r5, #12
 80088be:	2d00      	cmp	r5, #0
 80088c0:	4606      	mov	r6, r0
 80088c2:	db01      	blt.n	80088c8 <_malloc_r+0x1c>
 80088c4:	42a9      	cmp	r1, r5
 80088c6:	d904      	bls.n	80088d2 <_malloc_r+0x26>
 80088c8:	230c      	movs	r3, #12
 80088ca:	6033      	str	r3, [r6, #0]
 80088cc:	2000      	movs	r0, #0
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089a8 <_malloc_r+0xfc>
 80088d6:	f000 f869 	bl	80089ac <__malloc_lock>
 80088da:	f8d8 3000 	ldr.w	r3, [r8]
 80088de:	461c      	mov	r4, r3
 80088e0:	bb44      	cbnz	r4, 8008934 <_malloc_r+0x88>
 80088e2:	4629      	mov	r1, r5
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ffbf 	bl	8008868 <sbrk_aligned>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	4604      	mov	r4, r0
 80088ee:	d158      	bne.n	80089a2 <_malloc_r+0xf6>
 80088f0:	f8d8 4000 	ldr.w	r4, [r8]
 80088f4:	4627      	mov	r7, r4
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	d143      	bne.n	8008982 <_malloc_r+0xd6>
 80088fa:	2c00      	cmp	r4, #0
 80088fc:	d04b      	beq.n	8008996 <_malloc_r+0xea>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	4639      	mov	r1, r7
 8008902:	4630      	mov	r0, r6
 8008904:	eb04 0903 	add.w	r9, r4, r3
 8008908:	f000 f864 	bl	80089d4 <_sbrk_r>
 800890c:	4581      	cmp	r9, r0
 800890e:	d142      	bne.n	8008996 <_malloc_r+0xea>
 8008910:	6821      	ldr	r1, [r4, #0]
 8008912:	1a6d      	subs	r5, r5, r1
 8008914:	4629      	mov	r1, r5
 8008916:	4630      	mov	r0, r6
 8008918:	f7ff ffa6 	bl	8008868 <sbrk_aligned>
 800891c:	3001      	adds	r0, #1
 800891e:	d03a      	beq.n	8008996 <_malloc_r+0xea>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	442b      	add	r3, r5
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	f8d8 3000 	ldr.w	r3, [r8]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	bb62      	cbnz	r2, 8008988 <_malloc_r+0xdc>
 800892e:	f8c8 7000 	str.w	r7, [r8]
 8008932:	e00f      	b.n	8008954 <_malloc_r+0xa8>
 8008934:	6822      	ldr	r2, [r4, #0]
 8008936:	1b52      	subs	r2, r2, r5
 8008938:	d420      	bmi.n	800897c <_malloc_r+0xd0>
 800893a:	2a0b      	cmp	r2, #11
 800893c:	d917      	bls.n	800896e <_malloc_r+0xc2>
 800893e:	1961      	adds	r1, r4, r5
 8008940:	42a3      	cmp	r3, r4
 8008942:	6025      	str	r5, [r4, #0]
 8008944:	bf18      	it	ne
 8008946:	6059      	strne	r1, [r3, #4]
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	bf08      	it	eq
 800894c:	f8c8 1000 	streq.w	r1, [r8]
 8008950:	5162      	str	r2, [r4, r5]
 8008952:	604b      	str	r3, [r1, #4]
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f82f 	bl	80089b8 <__malloc_unlock>
 800895a:	f104 000b 	add.w	r0, r4, #11
 800895e:	1d23      	adds	r3, r4, #4
 8008960:	f020 0007 	bic.w	r0, r0, #7
 8008964:	1ac2      	subs	r2, r0, r3
 8008966:	bf1c      	itt	ne
 8008968:	1a1b      	subne	r3, r3, r0
 800896a:	50a3      	strne	r3, [r4, r2]
 800896c:	e7af      	b.n	80088ce <_malloc_r+0x22>
 800896e:	6862      	ldr	r2, [r4, #4]
 8008970:	42a3      	cmp	r3, r4
 8008972:	bf0c      	ite	eq
 8008974:	f8c8 2000 	streq.w	r2, [r8]
 8008978:	605a      	strne	r2, [r3, #4]
 800897a:	e7eb      	b.n	8008954 <_malloc_r+0xa8>
 800897c:	4623      	mov	r3, r4
 800897e:	6864      	ldr	r4, [r4, #4]
 8008980:	e7ae      	b.n	80088e0 <_malloc_r+0x34>
 8008982:	463c      	mov	r4, r7
 8008984:	687f      	ldr	r7, [r7, #4]
 8008986:	e7b6      	b.n	80088f6 <_malloc_r+0x4a>
 8008988:	461a      	mov	r2, r3
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	42a3      	cmp	r3, r4
 800898e:	d1fb      	bne.n	8008988 <_malloc_r+0xdc>
 8008990:	2300      	movs	r3, #0
 8008992:	6053      	str	r3, [r2, #4]
 8008994:	e7de      	b.n	8008954 <_malloc_r+0xa8>
 8008996:	230c      	movs	r3, #12
 8008998:	6033      	str	r3, [r6, #0]
 800899a:	4630      	mov	r0, r6
 800899c:	f000 f80c 	bl	80089b8 <__malloc_unlock>
 80089a0:	e794      	b.n	80088cc <_malloc_r+0x20>
 80089a2:	6005      	str	r5, [r0, #0]
 80089a4:	e7d6      	b.n	8008954 <_malloc_r+0xa8>
 80089a6:	bf00      	nop
 80089a8:	20000494 	.word	0x20000494

080089ac <__malloc_lock>:
 80089ac:	4801      	ldr	r0, [pc, #4]	@ (80089b4 <__malloc_lock+0x8>)
 80089ae:	f000 b84b 	b.w	8008a48 <__retarget_lock_acquire_recursive>
 80089b2:	bf00      	nop
 80089b4:	200005d4 	.word	0x200005d4

080089b8 <__malloc_unlock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	@ (80089c0 <__malloc_unlock+0x8>)
 80089ba:	f000 b846 	b.w	8008a4a <__retarget_lock_release_recursive>
 80089be:	bf00      	nop
 80089c0:	200005d4 	.word	0x200005d4

080089c4 <memset>:
 80089c4:	4402      	add	r2, r0
 80089c6:	4603      	mov	r3, r0
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d100      	bne.n	80089ce <memset+0xa>
 80089cc:	4770      	bx	lr
 80089ce:	f803 1b01 	strb.w	r1, [r3], #1
 80089d2:	e7f9      	b.n	80089c8 <memset+0x4>

080089d4 <_sbrk_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d06      	ldr	r5, [pc, #24]	@ (80089f0 <_sbrk_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	f7fb fafe 	bl	8003fe0 <_sbrk>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_sbrk_r+0x1a>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_sbrk_r+0x1a>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	200005d0 	.word	0x200005d0

080089f4 <__errno>:
 80089f4:	4b01      	ldr	r3, [pc, #4]	@ (80089fc <__errno+0x8>)
 80089f6:	6818      	ldr	r0, [r3, #0]
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20000074 	.word	0x20000074

08008a00 <__libc_init_array>:
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	4d0d      	ldr	r5, [pc, #52]	@ (8008a38 <__libc_init_array+0x38>)
 8008a04:	4c0d      	ldr	r4, [pc, #52]	@ (8008a3c <__libc_init_array+0x3c>)
 8008a06:	1b64      	subs	r4, r4, r5
 8008a08:	10a4      	asrs	r4, r4, #2
 8008a0a:	2600      	movs	r6, #0
 8008a0c:	42a6      	cmp	r6, r4
 8008a0e:	d109      	bne.n	8008a24 <__libc_init_array+0x24>
 8008a10:	4d0b      	ldr	r5, [pc, #44]	@ (8008a40 <__libc_init_array+0x40>)
 8008a12:	4c0c      	ldr	r4, [pc, #48]	@ (8008a44 <__libc_init_array+0x44>)
 8008a14:	f001 f96e 	bl	8009cf4 <_init>
 8008a18:	1b64      	subs	r4, r4, r5
 8008a1a:	10a4      	asrs	r4, r4, #2
 8008a1c:	2600      	movs	r6, #0
 8008a1e:	42a6      	cmp	r6, r4
 8008a20:	d105      	bne.n	8008a2e <__libc_init_array+0x2e>
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a28:	4798      	blx	r3
 8008a2a:	3601      	adds	r6, #1
 8008a2c:	e7ee      	b.n	8008a0c <__libc_init_array+0xc>
 8008a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a32:	4798      	blx	r3
 8008a34:	3601      	adds	r6, #1
 8008a36:	e7f2      	b.n	8008a1e <__libc_init_array+0x1e>
 8008a38:	08009d98 	.word	0x08009d98
 8008a3c:	08009d98 	.word	0x08009d98
 8008a40:	08009d98 	.word	0x08009d98
 8008a44:	08009d9c 	.word	0x08009d9c

08008a48 <__retarget_lock_acquire_recursive>:
 8008a48:	4770      	bx	lr

08008a4a <__retarget_lock_release_recursive>:
 8008a4a:	4770      	bx	lr

08008a4c <memcpy>:
 8008a4c:	440a      	add	r2, r1
 8008a4e:	4291      	cmp	r1, r2
 8008a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a54:	d100      	bne.n	8008a58 <memcpy+0xc>
 8008a56:	4770      	bx	lr
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a62:	4291      	cmp	r1, r2
 8008a64:	d1f9      	bne.n	8008a5a <memcpy+0xe>
 8008a66:	bd10      	pop	{r4, pc}

08008a68 <_free_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	d041      	beq.n	8008af4 <_free_r+0x8c>
 8008a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a74:	1f0c      	subs	r4, r1, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfb8      	it	lt
 8008a7a:	18e4      	addlt	r4, r4, r3
 8008a7c:	f7ff ff96 	bl	80089ac <__malloc_lock>
 8008a80:	4a1d      	ldr	r2, [pc, #116]	@ (8008af8 <_free_r+0x90>)
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	b933      	cbnz	r3, 8008a94 <_free_r+0x2c>
 8008a86:	6063      	str	r3, [r4, #4]
 8008a88:	6014      	str	r4, [r2, #0]
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a90:	f7ff bf92 	b.w	80089b8 <__malloc_unlock>
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	d908      	bls.n	8008aaa <_free_r+0x42>
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	1821      	adds	r1, r4, r0
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf01      	itttt	eq
 8008aa0:	6819      	ldreq	r1, [r3, #0]
 8008aa2:	685b      	ldreq	r3, [r3, #4]
 8008aa4:	1809      	addeq	r1, r1, r0
 8008aa6:	6021      	streq	r1, [r4, #0]
 8008aa8:	e7ed      	b.n	8008a86 <_free_r+0x1e>
 8008aaa:	461a      	mov	r2, r3
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	b10b      	cbz	r3, 8008ab4 <_free_r+0x4c>
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d9fa      	bls.n	8008aaa <_free_r+0x42>
 8008ab4:	6811      	ldr	r1, [r2, #0]
 8008ab6:	1850      	adds	r0, r2, r1
 8008ab8:	42a0      	cmp	r0, r4
 8008aba:	d10b      	bne.n	8008ad4 <_free_r+0x6c>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	4401      	add	r1, r0
 8008ac0:	1850      	adds	r0, r2, r1
 8008ac2:	4283      	cmp	r3, r0
 8008ac4:	6011      	str	r1, [r2, #0]
 8008ac6:	d1e0      	bne.n	8008a8a <_free_r+0x22>
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	6053      	str	r3, [r2, #4]
 8008ace:	4408      	add	r0, r1
 8008ad0:	6010      	str	r0, [r2, #0]
 8008ad2:	e7da      	b.n	8008a8a <_free_r+0x22>
 8008ad4:	d902      	bls.n	8008adc <_free_r+0x74>
 8008ad6:	230c      	movs	r3, #12
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	e7d6      	b.n	8008a8a <_free_r+0x22>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	1821      	adds	r1, r4, r0
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf04      	itt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	6063      	str	r3, [r4, #4]
 8008aea:	bf04      	itt	eq
 8008aec:	1809      	addeq	r1, r1, r0
 8008aee:	6021      	streq	r1, [r4, #0]
 8008af0:	6054      	str	r4, [r2, #4]
 8008af2:	e7ca      	b.n	8008a8a <_free_r+0x22>
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	bf00      	nop
 8008af8:	20000494 	.word	0x20000494

08008afc <pow>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	ed2d 8b02 	vpush	{d8}
 8008b02:	eeb0 8a40 	vmov.f32	s16, s0
 8008b06:	eef0 8a60 	vmov.f32	s17, s1
 8008b0a:	ec55 4b11 	vmov	r4, r5, d1
 8008b0e:	f000 f893 	bl	8008c38 <__ieee754_pow>
 8008b12:	4622      	mov	r2, r4
 8008b14:	462b      	mov	r3, r5
 8008b16:	4620      	mov	r0, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	ec57 6b10 	vmov	r6, r7, d0
 8008b1e:	f7f7 ffc9 	bl	8000ab4 <__aeabi_dcmpun>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d13b      	bne.n	8008b9e <pow+0xa2>
 8008b26:	ec51 0b18 	vmov	r0, r1, d8
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f7f7 ff8f 	bl	8000a50 <__aeabi_dcmpeq>
 8008b32:	b1b8      	cbz	r0, 8008b64 <pow+0x68>
 8008b34:	2200      	movs	r2, #0
 8008b36:	2300      	movs	r3, #0
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 ff88 	bl	8000a50 <__aeabi_dcmpeq>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d146      	bne.n	8008bd2 <pow+0xd6>
 8008b44:	ec45 4b10 	vmov	d0, r4, r5
 8008b48:	f000 f868 	bl	8008c1c <finite>
 8008b4c:	b338      	cbz	r0, 8008b9e <pow+0xa2>
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2300      	movs	r3, #0
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 ff85 	bl	8000a64 <__aeabi_dcmplt>
 8008b5a:	b300      	cbz	r0, 8008b9e <pow+0xa2>
 8008b5c:	f7ff ff4a 	bl	80089f4 <__errno>
 8008b60:	2322      	movs	r3, #34	@ 0x22
 8008b62:	e01b      	b.n	8008b9c <pow+0xa0>
 8008b64:	ec47 6b10 	vmov	d0, r6, r7
 8008b68:	f000 f858 	bl	8008c1c <finite>
 8008b6c:	b9e0      	cbnz	r0, 8008ba8 <pow+0xac>
 8008b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8008b72:	eef0 0a68 	vmov.f32	s1, s17
 8008b76:	f000 f851 	bl	8008c1c <finite>
 8008b7a:	b1a8      	cbz	r0, 8008ba8 <pow+0xac>
 8008b7c:	ec45 4b10 	vmov	d0, r4, r5
 8008b80:	f000 f84c 	bl	8008c1c <finite>
 8008b84:	b180      	cbz	r0, 8008ba8 <pow+0xac>
 8008b86:	4632      	mov	r2, r6
 8008b88:	463b      	mov	r3, r7
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7f7 ff91 	bl	8000ab4 <__aeabi_dcmpun>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0e2      	beq.n	8008b5c <pow+0x60>
 8008b96:	f7ff ff2d 	bl	80089f4 <__errno>
 8008b9a:	2321      	movs	r3, #33	@ 0x21
 8008b9c:	6003      	str	r3, [r0, #0]
 8008b9e:	ecbd 8b02 	vpop	{d8}
 8008ba2:	ec47 6b10 	vmov	d0, r6, r7
 8008ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2300      	movs	r3, #0
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f7f7 ff4e 	bl	8000a50 <__aeabi_dcmpeq>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d0f2      	beq.n	8008b9e <pow+0xa2>
 8008bb8:	eeb0 0a48 	vmov.f32	s0, s16
 8008bbc:	eef0 0a68 	vmov.f32	s1, s17
 8008bc0:	f000 f82c 	bl	8008c1c <finite>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d0ea      	beq.n	8008b9e <pow+0xa2>
 8008bc8:	ec45 4b10 	vmov	d0, r4, r5
 8008bcc:	f000 f826 	bl	8008c1c <finite>
 8008bd0:	e7c3      	b.n	8008b5a <pow+0x5e>
 8008bd2:	4f01      	ldr	r7, [pc, #4]	@ (8008bd8 <pow+0xdc>)
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	e7e2      	b.n	8008b9e <pow+0xa2>
 8008bd8:	3ff00000 	.word	0x3ff00000

08008bdc <atan2f>:
 8008bdc:	f000 bd78 	b.w	80096d0 <__ieee754_atan2f>

08008be0 <sqrtf>:
 8008be0:	b508      	push	{r3, lr}
 8008be2:	ed2d 8b02 	vpush	{d8}
 8008be6:	eeb0 8a40 	vmov.f32	s16, s0
 8008bea:	f000 f822 	bl	8008c32 <__ieee754_sqrtf>
 8008bee:	eeb4 8a48 	vcmp.f32	s16, s16
 8008bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf6:	d60c      	bvs.n	8008c12 <sqrtf+0x32>
 8008bf8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008c18 <sqrtf+0x38>
 8008bfc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	d505      	bpl.n	8008c12 <sqrtf+0x32>
 8008c06:	f7ff fef5 	bl	80089f4 <__errno>
 8008c0a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008c0e:	2321      	movs	r3, #33	@ 0x21
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	ecbd 8b02 	vpop	{d8}
 8008c16:	bd08      	pop	{r3, pc}
 8008c18:	00000000 	.word	0x00000000

08008c1c <finite>:
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	ed8d 0b00 	vstr	d0, [sp]
 8008c22:	9801      	ldr	r0, [sp, #4]
 8008c24:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008c28:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008c2c:	0fc0      	lsrs	r0, r0, #31
 8008c2e:	b002      	add	sp, #8
 8008c30:	4770      	bx	lr

08008c32 <__ieee754_sqrtf>:
 8008c32:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008c36:	4770      	bx	lr

08008c38 <__ieee754_pow>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	b091      	sub	sp, #68	@ 0x44
 8008c3e:	ed8d 1b00 	vstr	d1, [sp]
 8008c42:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008c46:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008c4a:	ea5a 0001 	orrs.w	r0, sl, r1
 8008c4e:	ec57 6b10 	vmov	r6, r7, d0
 8008c52:	d113      	bne.n	8008c7c <__ieee754_pow+0x44>
 8008c54:	19b3      	adds	r3, r6, r6
 8008c56:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008c5a:	4152      	adcs	r2, r2
 8008c5c:	4298      	cmp	r0, r3
 8008c5e:	4b98      	ldr	r3, [pc, #608]	@ (8008ec0 <__ieee754_pow+0x288>)
 8008c60:	4193      	sbcs	r3, r2
 8008c62:	f080 84ea 	bcs.w	800963a <__ieee754_pow+0xa02>
 8008c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	f7f7 fad1 	bl	8000214 <__adddf3>
 8008c72:	ec41 0b10 	vmov	d0, r0, r1
 8008c76:	b011      	add	sp, #68	@ 0x44
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	4a91      	ldr	r2, [pc, #580]	@ (8008ec4 <__ieee754_pow+0x28c>)
 8008c7e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008c82:	4590      	cmp	r8, r2
 8008c84:	463d      	mov	r5, r7
 8008c86:	4633      	mov	r3, r6
 8008c88:	d806      	bhi.n	8008c98 <__ieee754_pow+0x60>
 8008c8a:	d101      	bne.n	8008c90 <__ieee754_pow+0x58>
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	d1ea      	bne.n	8008c66 <__ieee754_pow+0x2e>
 8008c90:	4592      	cmp	sl, r2
 8008c92:	d801      	bhi.n	8008c98 <__ieee754_pow+0x60>
 8008c94:	d10e      	bne.n	8008cb4 <__ieee754_pow+0x7c>
 8008c96:	b169      	cbz	r1, 8008cb4 <__ieee754_pow+0x7c>
 8008c98:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008c9c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008ca0:	431d      	orrs	r5, r3
 8008ca2:	d1e0      	bne.n	8008c66 <__ieee754_pow+0x2e>
 8008ca4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ca8:	18db      	adds	r3, r3, r3
 8008caa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008cae:	4152      	adcs	r2, r2
 8008cb0:	429d      	cmp	r5, r3
 8008cb2:	e7d4      	b.n	8008c5e <__ieee754_pow+0x26>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	46c3      	mov	fp, r8
 8008cb8:	da3a      	bge.n	8008d30 <__ieee754_pow+0xf8>
 8008cba:	4a83      	ldr	r2, [pc, #524]	@ (8008ec8 <__ieee754_pow+0x290>)
 8008cbc:	4592      	cmp	sl, r2
 8008cbe:	d84d      	bhi.n	8008d5c <__ieee754_pow+0x124>
 8008cc0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008cc4:	4592      	cmp	sl, r2
 8008cc6:	f240 84c7 	bls.w	8009658 <__ieee754_pow+0xa20>
 8008cca:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008cce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008cd2:	2a14      	cmp	r2, #20
 8008cd4:	dd0f      	ble.n	8008cf6 <__ieee754_pow+0xbe>
 8008cd6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008cda:	fa21 f402 	lsr.w	r4, r1, r2
 8008cde:	fa04 f202 	lsl.w	r2, r4, r2
 8008ce2:	428a      	cmp	r2, r1
 8008ce4:	f040 84b8 	bne.w	8009658 <__ieee754_pow+0xa20>
 8008ce8:	f004 0401 	and.w	r4, r4, #1
 8008cec:	f1c4 0402 	rsb	r4, r4, #2
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	d158      	bne.n	8008da6 <__ieee754_pow+0x16e>
 8008cf4:	e00e      	b.n	8008d14 <__ieee754_pow+0xdc>
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d154      	bne.n	8008da4 <__ieee754_pow+0x16c>
 8008cfa:	f1c2 0214 	rsb	r2, r2, #20
 8008cfe:	fa4a f402 	asr.w	r4, sl, r2
 8008d02:	fa04 f202 	lsl.w	r2, r4, r2
 8008d06:	4552      	cmp	r2, sl
 8008d08:	f040 84a3 	bne.w	8009652 <__ieee754_pow+0xa1a>
 8008d0c:	f004 0401 	and.w	r4, r4, #1
 8008d10:	f1c4 0402 	rsb	r4, r4, #2
 8008d14:	4a6d      	ldr	r2, [pc, #436]	@ (8008ecc <__ieee754_pow+0x294>)
 8008d16:	4592      	cmp	sl, r2
 8008d18:	d12e      	bne.n	8008d78 <__ieee754_pow+0x140>
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	f280 8494 	bge.w	800964a <__ieee754_pow+0xa12>
 8008d22:	496a      	ldr	r1, [pc, #424]	@ (8008ecc <__ieee754_pow+0x294>)
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f7f7 fd53 	bl	80007d4 <__aeabi_ddiv>
 8008d2e:	e7a0      	b.n	8008c72 <__ieee754_pow+0x3a>
 8008d30:	2400      	movs	r4, #0
 8008d32:	bbc1      	cbnz	r1, 8008da6 <__ieee754_pow+0x16e>
 8008d34:	4a63      	ldr	r2, [pc, #396]	@ (8008ec4 <__ieee754_pow+0x28c>)
 8008d36:	4592      	cmp	sl, r2
 8008d38:	d1ec      	bne.n	8008d14 <__ieee754_pow+0xdc>
 8008d3a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008d3e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008d42:	431a      	orrs	r2, r3
 8008d44:	f000 8479 	beq.w	800963a <__ieee754_pow+0xa02>
 8008d48:	4b61      	ldr	r3, [pc, #388]	@ (8008ed0 <__ieee754_pow+0x298>)
 8008d4a:	4598      	cmp	r8, r3
 8008d4c:	d908      	bls.n	8008d60 <__ieee754_pow+0x128>
 8008d4e:	f1b9 0f00 	cmp.w	r9, #0
 8008d52:	f2c0 8476 	blt.w	8009642 <__ieee754_pow+0xa0a>
 8008d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d5a:	e78a      	b.n	8008c72 <__ieee754_pow+0x3a>
 8008d5c:	2402      	movs	r4, #2
 8008d5e:	e7e8      	b.n	8008d32 <__ieee754_pow+0xfa>
 8008d60:	f1b9 0f00 	cmp.w	r9, #0
 8008d64:	f04f 0000 	mov.w	r0, #0
 8008d68:	f04f 0100 	mov.w	r1, #0
 8008d6c:	da81      	bge.n	8008c72 <__ieee754_pow+0x3a>
 8008d6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008d72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008d76:	e77c      	b.n	8008c72 <__ieee754_pow+0x3a>
 8008d78:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008d7c:	d106      	bne.n	8008d8c <__ieee754_pow+0x154>
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463b      	mov	r3, r7
 8008d82:	4630      	mov	r0, r6
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f7 fbfb 	bl	8000580 <__aeabi_dmul>
 8008d8a:	e772      	b.n	8008c72 <__ieee754_pow+0x3a>
 8008d8c:	4a51      	ldr	r2, [pc, #324]	@ (8008ed4 <__ieee754_pow+0x29c>)
 8008d8e:	4591      	cmp	r9, r2
 8008d90:	d109      	bne.n	8008da6 <__ieee754_pow+0x16e>
 8008d92:	2d00      	cmp	r5, #0
 8008d94:	db07      	blt.n	8008da6 <__ieee754_pow+0x16e>
 8008d96:	ec47 6b10 	vmov	d0, r6, r7
 8008d9a:	b011      	add	sp, #68	@ 0x44
 8008d9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	f000 bece 	b.w	8009b40 <__ieee754_sqrt>
 8008da4:	2400      	movs	r4, #0
 8008da6:	ec47 6b10 	vmov	d0, r6, r7
 8008daa:	9302      	str	r3, [sp, #8]
 8008dac:	f000 fc88 	bl	80096c0 <fabs>
 8008db0:	9b02      	ldr	r3, [sp, #8]
 8008db2:	ec51 0b10 	vmov	r0, r1, d0
 8008db6:	bb53      	cbnz	r3, 8008e0e <__ieee754_pow+0x1d6>
 8008db8:	4b44      	ldr	r3, [pc, #272]	@ (8008ecc <__ieee754_pow+0x294>)
 8008dba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d002      	beq.n	8008dc8 <__ieee754_pow+0x190>
 8008dc2:	f1b8 0f00 	cmp.w	r8, #0
 8008dc6:	d122      	bne.n	8008e0e <__ieee754_pow+0x1d6>
 8008dc8:	f1b9 0f00 	cmp.w	r9, #0
 8008dcc:	da05      	bge.n	8008dda <__ieee754_pow+0x1a2>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	493d      	ldr	r1, [pc, #244]	@ (8008ecc <__ieee754_pow+0x294>)
 8008dd6:	f7f7 fcfd 	bl	80007d4 <__aeabi_ddiv>
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	f6bf af49 	bge.w	8008c72 <__ieee754_pow+0x3a>
 8008de0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008de4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008de8:	ea58 0804 	orrs.w	r8, r8, r4
 8008dec:	d108      	bne.n	8008e00 <__ieee754_pow+0x1c8>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7f7 fa0b 	bl	8000210 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	e794      	b.n	8008d2a <__ieee754_pow+0xf2>
 8008e00:	2c01      	cmp	r4, #1
 8008e02:	f47f af36 	bne.w	8008c72 <__ieee754_pow+0x3a>
 8008e06:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	e731      	b.n	8008c72 <__ieee754_pow+0x3a>
 8008e0e:	0feb      	lsrs	r3, r5, #31
 8008e10:	3b01      	subs	r3, #1
 8008e12:	ea53 0204 	orrs.w	r2, r3, r4
 8008e16:	d102      	bne.n	8008e1e <__ieee754_pow+0x1e6>
 8008e18:	4632      	mov	r2, r6
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	e7e9      	b.n	8008df2 <__ieee754_pow+0x1ba>
 8008e1e:	3c01      	subs	r4, #1
 8008e20:	431c      	orrs	r4, r3
 8008e22:	d016      	beq.n	8008e52 <__ieee754_pow+0x21a>
 8008e24:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008eb0 <__ieee754_pow+0x278>
 8008e28:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008e2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e30:	f240 8112 	bls.w	8009058 <__ieee754_pow+0x420>
 8008e34:	4b28      	ldr	r3, [pc, #160]	@ (8008ed8 <__ieee754_pow+0x2a0>)
 8008e36:	459a      	cmp	sl, r3
 8008e38:	4b25      	ldr	r3, [pc, #148]	@ (8008ed0 <__ieee754_pow+0x298>)
 8008e3a:	d916      	bls.n	8008e6a <__ieee754_pow+0x232>
 8008e3c:	4598      	cmp	r8, r3
 8008e3e:	d80b      	bhi.n	8008e58 <__ieee754_pow+0x220>
 8008e40:	f1b9 0f00 	cmp.w	r9, #0
 8008e44:	da0b      	bge.n	8008e5e <__ieee754_pow+0x226>
 8008e46:	2000      	movs	r0, #0
 8008e48:	b011      	add	sp, #68	@ 0x44
 8008e4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4e:	f000 be6f 	b.w	8009b30 <__math_oflow>
 8008e52:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008eb8 <__ieee754_pow+0x280>
 8008e56:	e7e7      	b.n	8008e28 <__ieee754_pow+0x1f0>
 8008e58:	f1b9 0f00 	cmp.w	r9, #0
 8008e5c:	dcf3      	bgt.n	8008e46 <__ieee754_pow+0x20e>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	b011      	add	sp, #68	@ 0x44
 8008e62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	f000 be5b 	b.w	8009b20 <__math_uflow>
 8008e6a:	4598      	cmp	r8, r3
 8008e6c:	d20c      	bcs.n	8008e88 <__ieee754_pow+0x250>
 8008e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	2300      	movs	r3, #0
 8008e76:	f7f7 fdf5 	bl	8000a64 <__aeabi_dcmplt>
 8008e7a:	3800      	subs	r0, #0
 8008e7c:	bf18      	it	ne
 8008e7e:	2001      	movne	r0, #1
 8008e80:	f1b9 0f00 	cmp.w	r9, #0
 8008e84:	daec      	bge.n	8008e60 <__ieee754_pow+0x228>
 8008e86:	e7df      	b.n	8008e48 <__ieee754_pow+0x210>
 8008e88:	4b10      	ldr	r3, [pc, #64]	@ (8008ecc <__ieee754_pow+0x294>)
 8008e8a:	4598      	cmp	r8, r3
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	d924      	bls.n	8008edc <__ieee754_pow+0x2a4>
 8008e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e96:	2300      	movs	r3, #0
 8008e98:	f7f7 fde4 	bl	8000a64 <__aeabi_dcmplt>
 8008e9c:	3800      	subs	r0, #0
 8008e9e:	bf18      	it	ne
 8008ea0:	2001      	movne	r0, #1
 8008ea2:	f1b9 0f00 	cmp.w	r9, #0
 8008ea6:	dccf      	bgt.n	8008e48 <__ieee754_pow+0x210>
 8008ea8:	e7da      	b.n	8008e60 <__ieee754_pow+0x228>
 8008eaa:	bf00      	nop
 8008eac:	f3af 8000 	nop.w
 8008eb0:	00000000 	.word	0x00000000
 8008eb4:	3ff00000 	.word	0x3ff00000
 8008eb8:	00000000 	.word	0x00000000
 8008ebc:	bff00000 	.word	0xbff00000
 8008ec0:	fff00000 	.word	0xfff00000
 8008ec4:	7ff00000 	.word	0x7ff00000
 8008ec8:	433fffff 	.word	0x433fffff
 8008ecc:	3ff00000 	.word	0x3ff00000
 8008ed0:	3fefffff 	.word	0x3fefffff
 8008ed4:	3fe00000 	.word	0x3fe00000
 8008ed8:	43f00000 	.word	0x43f00000
 8008edc:	4b5a      	ldr	r3, [pc, #360]	@ (8009048 <__ieee754_pow+0x410>)
 8008ede:	f7f7 f997 	bl	8000210 <__aeabi_dsub>
 8008ee2:	a351      	add	r3, pc, #324	@ (adr r3, 8009028 <__ieee754_pow+0x3f0>)
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	4604      	mov	r4, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	f7f7 fb48 	bl	8000580 <__aeabi_dmul>
 8008ef0:	a34f      	add	r3, pc, #316	@ (adr r3, 8009030 <__ieee754_pow+0x3f8>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 fb3f 	bl	8000580 <__aeabi_dmul>
 8008f02:	4b52      	ldr	r3, [pc, #328]	@ (800904c <__ieee754_pow+0x414>)
 8008f04:	4682      	mov	sl, r0
 8008f06:	468b      	mov	fp, r1
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7f7 fb37 	bl	8000580 <__aeabi_dmul>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	a148      	add	r1, pc, #288	@ (adr r1, 8009038 <__ieee754_pow+0x400>)
 8008f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f1c:	f7f7 f978 	bl	8000210 <__aeabi_dsub>
 8008f20:	4622      	mov	r2, r4
 8008f22:	462b      	mov	r3, r5
 8008f24:	f7f7 fb2c 	bl	8000580 <__aeabi_dmul>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	4948      	ldr	r1, [pc, #288]	@ (8009050 <__ieee754_pow+0x418>)
 8008f30:	f7f7 f96e 	bl	8000210 <__aeabi_dsub>
 8008f34:	4622      	mov	r2, r4
 8008f36:	4680      	mov	r8, r0
 8008f38:	4689      	mov	r9, r1
 8008f3a:	462b      	mov	r3, r5
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 fb1e 	bl	8000580 <__aeabi_dmul>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4640      	mov	r0, r8
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	f7f7 fb18 	bl	8000580 <__aeabi_dmul>
 8008f50:	a33b      	add	r3, pc, #236	@ (adr r3, 8009040 <__ieee754_pow+0x408>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fb13 	bl	8000580 <__aeabi_dmul>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4650      	mov	r0, sl
 8008f60:	4659      	mov	r1, fp
 8008f62:	f7f7 f955 	bl	8000210 <__aeabi_dsub>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	f7f7 f94f 	bl	8000214 <__adddf3>
 8008f76:	2400      	movs	r4, #0
 8008f78:	4632      	mov	r2, r6
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	460d      	mov	r5, r1
 8008f80:	f7f7 f946 	bl	8000210 <__aeabi_dsub>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 f940 	bl	8000210 <__aeabi_dsub>
 8008f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	460f      	mov	r7, r1
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fac:	f7f7 f930 	bl	8000210 <__aeabi_dsub>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	462b      	mov	r3, r5
 8008fb4:	f7f7 fae4 	bl	8000580 <__aeabi_dmul>
 8008fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 fadc 	bl	8000580 <__aeabi_dmul>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4649      	mov	r1, r9
 8008fd0:	f7f7 f920 	bl	8000214 <__adddf3>
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	4606      	mov	r6, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 face 	bl	8000580 <__aeabi_dmul>
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4680      	mov	r8, r0
 8008fea:	4689      	mov	r9, r1
 8008fec:	4630      	mov	r0, r6
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 f910 	bl	8000214 <__adddf3>
 8008ff4:	4b17      	ldr	r3, [pc, #92]	@ (8009054 <__ieee754_pow+0x41c>)
 8008ff6:	4299      	cmp	r1, r3
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	460d      	mov	r5, r1
 8008ffc:	468a      	mov	sl, r1
 8008ffe:	468b      	mov	fp, r1
 8009000:	f340 82ef 	ble.w	80095e2 <__ieee754_pow+0x9aa>
 8009004:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009008:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800900c:	4303      	orrs	r3, r0
 800900e:	f000 81e8 	beq.w	80093e2 <__ieee754_pow+0x7aa>
 8009012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	2300      	movs	r3, #0
 800901a:	f7f7 fd23 	bl	8000a64 <__aeabi_dcmplt>
 800901e:	3800      	subs	r0, #0
 8009020:	bf18      	it	ne
 8009022:	2001      	movne	r0, #1
 8009024:	e710      	b.n	8008e48 <__ieee754_pow+0x210>
 8009026:	bf00      	nop
 8009028:	60000000 	.word	0x60000000
 800902c:	3ff71547 	.word	0x3ff71547
 8009030:	f85ddf44 	.word	0xf85ddf44
 8009034:	3e54ae0b 	.word	0x3e54ae0b
 8009038:	55555555 	.word	0x55555555
 800903c:	3fd55555 	.word	0x3fd55555
 8009040:	652b82fe 	.word	0x652b82fe
 8009044:	3ff71547 	.word	0x3ff71547
 8009048:	3ff00000 	.word	0x3ff00000
 800904c:	3fd00000 	.word	0x3fd00000
 8009050:	3fe00000 	.word	0x3fe00000
 8009054:	408fffff 	.word	0x408fffff
 8009058:	4bd5      	ldr	r3, [pc, #852]	@ (80093b0 <__ieee754_pow+0x778>)
 800905a:	402b      	ands	r3, r5
 800905c:	2200      	movs	r2, #0
 800905e:	b92b      	cbnz	r3, 800906c <__ieee754_pow+0x434>
 8009060:	4bd4      	ldr	r3, [pc, #848]	@ (80093b4 <__ieee754_pow+0x77c>)
 8009062:	f7f7 fa8d 	bl	8000580 <__aeabi_dmul>
 8009066:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800906a:	468b      	mov	fp, r1
 800906c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009070:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009074:	4413      	add	r3, r2
 8009076:	930a      	str	r3, [sp, #40]	@ 0x28
 8009078:	4bcf      	ldr	r3, [pc, #828]	@ (80093b8 <__ieee754_pow+0x780>)
 800907a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800907e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009082:	459b      	cmp	fp, r3
 8009084:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009088:	dd08      	ble.n	800909c <__ieee754_pow+0x464>
 800908a:	4bcc      	ldr	r3, [pc, #816]	@ (80093bc <__ieee754_pow+0x784>)
 800908c:	459b      	cmp	fp, r3
 800908e:	f340 81a5 	ble.w	80093dc <__ieee754_pow+0x7a4>
 8009092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009094:	3301      	adds	r3, #1
 8009096:	930a      	str	r3, [sp, #40]	@ 0x28
 8009098:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800909c:	f04f 0a00 	mov.w	sl, #0
 80090a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80090a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090a6:	4bc6      	ldr	r3, [pc, #792]	@ (80093c0 <__ieee754_pow+0x788>)
 80090a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090ac:	ed93 7b00 	vldr	d7, [r3]
 80090b0:	4629      	mov	r1, r5
 80090b2:	ec53 2b17 	vmov	r2, r3, d7
 80090b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80090ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80090be:	f7f7 f8a7 	bl	8000210 <__aeabi_dsub>
 80090c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090c6:	4606      	mov	r6, r0
 80090c8:	460f      	mov	r7, r1
 80090ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090ce:	f7f7 f8a1 	bl	8000214 <__adddf3>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	2000      	movs	r0, #0
 80090d8:	49ba      	ldr	r1, [pc, #744]	@ (80093c4 <__ieee754_pow+0x78c>)
 80090da:	f7f7 fb7b 	bl	80007d4 <__aeabi_ddiv>
 80090de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fa49 	bl	8000580 <__aeabi_dmul>
 80090ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80090f6:	106d      	asrs	r5, r5, #1
 80090f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80090fc:	f04f 0b00 	mov.w	fp, #0
 8009100:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009104:	4661      	mov	r1, ip
 8009106:	2200      	movs	r2, #0
 8009108:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800910c:	4658      	mov	r0, fp
 800910e:	46e1      	mov	r9, ip
 8009110:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009114:	4614      	mov	r4, r2
 8009116:	461d      	mov	r5, r3
 8009118:	f7f7 fa32 	bl	8000580 <__aeabi_dmul>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4630      	mov	r0, r6
 8009122:	4639      	mov	r1, r7
 8009124:	f7f7 f874 	bl	8000210 <__aeabi_dsub>
 8009128:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800912c:	4606      	mov	r6, r0
 800912e:	460f      	mov	r7, r1
 8009130:	4620      	mov	r0, r4
 8009132:	4629      	mov	r1, r5
 8009134:	f7f7 f86c 	bl	8000210 <__aeabi_dsub>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009140:	f7f7 f866 	bl	8000210 <__aeabi_dsub>
 8009144:	465a      	mov	r2, fp
 8009146:	464b      	mov	r3, r9
 8009148:	f7f7 fa1a 	bl	8000580 <__aeabi_dmul>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 f85c 	bl	8000210 <__aeabi_dsub>
 8009158:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800915c:	f7f7 fa10 	bl	8000580 <__aeabi_dmul>
 8009160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009164:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009168:	4610      	mov	r0, r2
 800916a:	4619      	mov	r1, r3
 800916c:	f7f7 fa08 	bl	8000580 <__aeabi_dmul>
 8009170:	a37d      	add	r3, pc, #500	@ (adr r3, 8009368 <__ieee754_pow+0x730>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	4604      	mov	r4, r0
 8009178:	460d      	mov	r5, r1
 800917a:	f7f7 fa01 	bl	8000580 <__aeabi_dmul>
 800917e:	a37c      	add	r3, pc, #496	@ (adr r3, 8009370 <__ieee754_pow+0x738>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 f846 	bl	8000214 <__adddf3>
 8009188:	4622      	mov	r2, r4
 800918a:	462b      	mov	r3, r5
 800918c:	f7f7 f9f8 	bl	8000580 <__aeabi_dmul>
 8009190:	a379      	add	r3, pc, #484	@ (adr r3, 8009378 <__ieee754_pow+0x740>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 f83d 	bl	8000214 <__adddf3>
 800919a:	4622      	mov	r2, r4
 800919c:	462b      	mov	r3, r5
 800919e:	f7f7 f9ef 	bl	8000580 <__aeabi_dmul>
 80091a2:	a377      	add	r3, pc, #476	@ (adr r3, 8009380 <__ieee754_pow+0x748>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 f834 	bl	8000214 <__adddf3>
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	f7f7 f9e6 	bl	8000580 <__aeabi_dmul>
 80091b4:	a374      	add	r3, pc, #464	@ (adr r3, 8009388 <__ieee754_pow+0x750>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f82b 	bl	8000214 <__adddf3>
 80091be:	4622      	mov	r2, r4
 80091c0:	462b      	mov	r3, r5
 80091c2:	f7f7 f9dd 	bl	8000580 <__aeabi_dmul>
 80091c6:	a372      	add	r3, pc, #456	@ (adr r3, 8009390 <__ieee754_pow+0x758>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f7f7 f822 	bl	8000214 <__adddf3>
 80091d0:	4622      	mov	r2, r4
 80091d2:	4606      	mov	r6, r0
 80091d4:	460f      	mov	r7, r1
 80091d6:	462b      	mov	r3, r5
 80091d8:	4620      	mov	r0, r4
 80091da:	4629      	mov	r1, r5
 80091dc:	f7f7 f9d0 	bl	8000580 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 f9ca 	bl	8000580 <__aeabi_dmul>
 80091ec:	465a      	mov	r2, fp
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	464b      	mov	r3, r9
 80091f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f8:	f7f7 f80c 	bl	8000214 <__adddf3>
 80091fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009200:	f7f7 f9be 	bl	8000580 <__aeabi_dmul>
 8009204:	4622      	mov	r2, r4
 8009206:	462b      	mov	r3, r5
 8009208:	f7f7 f804 	bl	8000214 <__adddf3>
 800920c:	465a      	mov	r2, fp
 800920e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009212:	464b      	mov	r3, r9
 8009214:	4658      	mov	r0, fp
 8009216:	4649      	mov	r1, r9
 8009218:	f7f7 f9b2 	bl	8000580 <__aeabi_dmul>
 800921c:	4b6a      	ldr	r3, [pc, #424]	@ (80093c8 <__ieee754_pow+0x790>)
 800921e:	2200      	movs	r2, #0
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
 8009224:	f7f6 fff6 	bl	8000214 <__adddf3>
 8009228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800922c:	f7f6 fff2 	bl	8000214 <__adddf3>
 8009230:	46d8      	mov	r8, fp
 8009232:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009236:	460d      	mov	r5, r1
 8009238:	465a      	mov	r2, fp
 800923a:	460b      	mov	r3, r1
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009244:	f7f7 f99c 	bl	8000580 <__aeabi_dmul>
 8009248:	465c      	mov	r4, fp
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	4b5e      	ldr	r3, [pc, #376]	@ (80093c8 <__ieee754_pow+0x790>)
 8009250:	2200      	movs	r2, #0
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f6 ffdb 	bl	8000210 <__aeabi_dsub>
 800925a:	4632      	mov	r2, r6
 800925c:	463b      	mov	r3, r7
 800925e:	f7f6 ffd7 	bl	8000210 <__aeabi_dsub>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800926a:	f7f6 ffd1 	bl	8000210 <__aeabi_dsub>
 800926e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009272:	f7f7 f985 	bl	8000580 <__aeabi_dmul>
 8009276:	4622      	mov	r2, r4
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	462b      	mov	r3, r5
 800927e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009282:	f7f7 f97d 	bl	8000580 <__aeabi_dmul>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f6 ffc1 	bl	8000214 <__adddf3>
 8009292:	4606      	mov	r6, r0
 8009294:	460f      	mov	r7, r1
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4640      	mov	r0, r8
 800929c:	4649      	mov	r1, r9
 800929e:	f7f6 ffb9 	bl	8000214 <__adddf3>
 80092a2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80092a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8009398 <__ieee754_pow+0x760>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	4658      	mov	r0, fp
 80092ae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80092b2:	460d      	mov	r5, r1
 80092b4:	f7f7 f964 	bl	8000580 <__aeabi_dmul>
 80092b8:	465c      	mov	r4, fp
 80092ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092be:	4642      	mov	r2, r8
 80092c0:	464b      	mov	r3, r9
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f6 ffa3 	bl	8000210 <__aeabi_dsub>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f6 ff9d 	bl	8000210 <__aeabi_dsub>
 80092d6:	a332      	add	r3, pc, #200	@ (adr r3, 80093a0 <__ieee754_pow+0x768>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f7 f950 	bl	8000580 <__aeabi_dmul>
 80092e0:	a331      	add	r3, pc, #196	@ (adr r3, 80093a8 <__ieee754_pow+0x770>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4606      	mov	r6, r0
 80092e8:	460f      	mov	r7, r1
 80092ea:	4620      	mov	r0, r4
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7f7 f947 	bl	8000580 <__aeabi_dmul>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	f7f6 ff8b 	bl	8000214 <__adddf3>
 80092fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009300:	4b32      	ldr	r3, [pc, #200]	@ (80093cc <__ieee754_pow+0x794>)
 8009302:	4413      	add	r3, r2
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f7f6 ff84 	bl	8000214 <__adddf3>
 800930c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009310:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009312:	f7f7 f8cb 	bl	80004ac <__aeabi_i2d>
 8009316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009318:	4b2d      	ldr	r3, [pc, #180]	@ (80093d0 <__ieee754_pow+0x798>)
 800931a:	4413      	add	r3, r2
 800931c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009320:	4606      	mov	r6, r0
 8009322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009326:	460f      	mov	r7, r1
 8009328:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800932c:	f7f6 ff72 	bl	8000214 <__adddf3>
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	f7f6 ff6e 	bl	8000214 <__adddf3>
 8009338:	4632      	mov	r2, r6
 800933a:	463b      	mov	r3, r7
 800933c:	f7f6 ff6a 	bl	8000214 <__adddf3>
 8009340:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009344:	4632      	mov	r2, r6
 8009346:	463b      	mov	r3, r7
 8009348:	4658      	mov	r0, fp
 800934a:	460d      	mov	r5, r1
 800934c:	f7f6 ff60 	bl	8000210 <__aeabi_dsub>
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	f7f6 ff5c 	bl	8000210 <__aeabi_dsub>
 8009358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935c:	f7f6 ff58 	bl	8000210 <__aeabi_dsub>
 8009360:	465c      	mov	r4, fp
 8009362:	4602      	mov	r2, r0
 8009364:	e036      	b.n	80093d4 <__ieee754_pow+0x79c>
 8009366:	bf00      	nop
 8009368:	4a454eef 	.word	0x4a454eef
 800936c:	3fca7e28 	.word	0x3fca7e28
 8009370:	93c9db65 	.word	0x93c9db65
 8009374:	3fcd864a 	.word	0x3fcd864a
 8009378:	a91d4101 	.word	0xa91d4101
 800937c:	3fd17460 	.word	0x3fd17460
 8009380:	518f264d 	.word	0x518f264d
 8009384:	3fd55555 	.word	0x3fd55555
 8009388:	db6fabff 	.word	0xdb6fabff
 800938c:	3fdb6db6 	.word	0x3fdb6db6
 8009390:	33333303 	.word	0x33333303
 8009394:	3fe33333 	.word	0x3fe33333
 8009398:	e0000000 	.word	0xe0000000
 800939c:	3feec709 	.word	0x3feec709
 80093a0:	dc3a03fd 	.word	0xdc3a03fd
 80093a4:	3feec709 	.word	0x3feec709
 80093a8:	145b01f5 	.word	0x145b01f5
 80093ac:	be3e2fe0 	.word	0xbe3e2fe0
 80093b0:	7ff00000 	.word	0x7ff00000
 80093b4:	43400000 	.word	0x43400000
 80093b8:	0003988e 	.word	0x0003988e
 80093bc:	000bb679 	.word	0x000bb679
 80093c0:	08009d48 	.word	0x08009d48
 80093c4:	3ff00000 	.word	0x3ff00000
 80093c8:	40080000 	.word	0x40080000
 80093cc:	08009d28 	.word	0x08009d28
 80093d0:	08009d38 	.word	0x08009d38
 80093d4:	460b      	mov	r3, r1
 80093d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093da:	e5d7      	b.n	8008f8c <__ieee754_pow+0x354>
 80093dc:	f04f 0a01 	mov.w	sl, #1
 80093e0:	e65e      	b.n	80090a0 <__ieee754_pow+0x468>
 80093e2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80096b4 <__ieee754_pow+0xa7c>)
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	4630      	mov	r0, r6
 80093ea:	4639      	mov	r1, r7
 80093ec:	f7f6 ff12 	bl	8000214 <__adddf3>
 80093f0:	4642      	mov	r2, r8
 80093f2:	e9cd 0100 	strd	r0, r1, [sp]
 80093f6:	464b      	mov	r3, r9
 80093f8:	4620      	mov	r0, r4
 80093fa:	4629      	mov	r1, r5
 80093fc:	f7f6 ff08 	bl	8000210 <__aeabi_dsub>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009408:	f7f7 fb4a 	bl	8000aa0 <__aeabi_dcmpgt>
 800940c:	2800      	cmp	r0, #0
 800940e:	f47f ae00 	bne.w	8009012 <__ieee754_pow+0x3da>
 8009412:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009416:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800941a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800941e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009422:	44da      	add	sl, fp
 8009424:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009428:	489d      	ldr	r0, [pc, #628]	@ (80096a0 <__ieee754_pow+0xa68>)
 800942a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800942e:	4108      	asrs	r0, r1
 8009430:	ea00 030a 	and.w	r3, r0, sl
 8009434:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009438:	f1c1 0114 	rsb	r1, r1, #20
 800943c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009440:	fa4a fa01 	asr.w	sl, sl, r1
 8009444:	f1bb 0f00 	cmp.w	fp, #0
 8009448:	4640      	mov	r0, r8
 800944a:	4649      	mov	r1, r9
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	bfb8      	it	lt
 8009452:	f1ca 0a00 	rsblt	sl, sl, #0
 8009456:	f7f6 fedb 	bl	8000210 <__aeabi_dsub>
 800945a:	4680      	mov	r8, r0
 800945c:	4689      	mov	r9, r1
 800945e:	4632      	mov	r2, r6
 8009460:	463b      	mov	r3, r7
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	f7f6 fed5 	bl	8000214 <__adddf3>
 800946a:	2400      	movs	r4, #0
 800946c:	a37c      	add	r3, pc, #496	@ (adr r3, 8009660 <__ieee754_pow+0xa28>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	4620      	mov	r0, r4
 8009474:	460d      	mov	r5, r1
 8009476:	f7f7 f883 	bl	8000580 <__aeabi_dmul>
 800947a:	4642      	mov	r2, r8
 800947c:	e9cd 0100 	strd	r0, r1, [sp]
 8009480:	464b      	mov	r3, r9
 8009482:	4620      	mov	r0, r4
 8009484:	4629      	mov	r1, r5
 8009486:	f7f6 fec3 	bl	8000210 <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f6 febd 	bl	8000210 <__aeabi_dsub>
 8009496:	a374      	add	r3, pc, #464	@ (adr r3, 8009668 <__ieee754_pow+0xa30>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f7 f870 	bl	8000580 <__aeabi_dmul>
 80094a0:	a373      	add	r3, pc, #460	@ (adr r3, 8009670 <__ieee754_pow+0xa38>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	4680      	mov	r8, r0
 80094a8:	4689      	mov	r9, r1
 80094aa:	4620      	mov	r0, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f7 f867 	bl	8000580 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4640      	mov	r0, r8
 80094b8:	4649      	mov	r1, r9
 80094ba:	f7f6 feab 	bl	8000214 <__adddf3>
 80094be:	4604      	mov	r4, r0
 80094c0:	460d      	mov	r5, r1
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ca:	f7f6 fea3 	bl	8000214 <__adddf3>
 80094ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d2:	4680      	mov	r8, r0
 80094d4:	4689      	mov	r9, r1
 80094d6:	f7f6 fe9b 	bl	8000210 <__aeabi_dsub>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4620      	mov	r0, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7f6 fe95 	bl	8000210 <__aeabi_dsub>
 80094e6:	4642      	mov	r2, r8
 80094e8:	4606      	mov	r6, r0
 80094ea:	460f      	mov	r7, r1
 80094ec:	464b      	mov	r3, r9
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f7 f845 	bl	8000580 <__aeabi_dmul>
 80094f6:	a360      	add	r3, pc, #384	@ (adr r3, 8009678 <__ieee754_pow+0xa40>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	4604      	mov	r4, r0
 80094fe:	460d      	mov	r5, r1
 8009500:	f7f7 f83e 	bl	8000580 <__aeabi_dmul>
 8009504:	a35e      	add	r3, pc, #376	@ (adr r3, 8009680 <__ieee754_pow+0xa48>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 fe81 	bl	8000210 <__aeabi_dsub>
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	f7f7 f835 	bl	8000580 <__aeabi_dmul>
 8009516:	a35c      	add	r3, pc, #368	@ (adr r3, 8009688 <__ieee754_pow+0xa50>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f6 fe7a 	bl	8000214 <__adddf3>
 8009520:	4622      	mov	r2, r4
 8009522:	462b      	mov	r3, r5
 8009524:	f7f7 f82c 	bl	8000580 <__aeabi_dmul>
 8009528:	a359      	add	r3, pc, #356	@ (adr r3, 8009690 <__ieee754_pow+0xa58>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f6 fe6f 	bl	8000210 <__aeabi_dsub>
 8009532:	4622      	mov	r2, r4
 8009534:	462b      	mov	r3, r5
 8009536:	f7f7 f823 	bl	8000580 <__aeabi_dmul>
 800953a:	a357      	add	r3, pc, #348	@ (adr r3, 8009698 <__ieee754_pow+0xa60>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f7f6 fe68 	bl	8000214 <__adddf3>
 8009544:	4622      	mov	r2, r4
 8009546:	462b      	mov	r3, r5
 8009548:	f7f7 f81a 	bl	8000580 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4640      	mov	r0, r8
 8009552:	4649      	mov	r1, r9
 8009554:	f7f6 fe5c 	bl	8000210 <__aeabi_dsub>
 8009558:	4604      	mov	r4, r0
 800955a:	460d      	mov	r5, r1
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4640      	mov	r0, r8
 8009562:	4649      	mov	r1, r9
 8009564:	f7f7 f80c 	bl	8000580 <__aeabi_dmul>
 8009568:	2200      	movs	r2, #0
 800956a:	e9cd 0100 	strd	r0, r1, [sp]
 800956e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009572:	4620      	mov	r0, r4
 8009574:	4629      	mov	r1, r5
 8009576:	f7f6 fe4b 	bl	8000210 <__aeabi_dsub>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009582:	f7f7 f927 	bl	80007d4 <__aeabi_ddiv>
 8009586:	4632      	mov	r2, r6
 8009588:	4604      	mov	r4, r0
 800958a:	460d      	mov	r5, r1
 800958c:	463b      	mov	r3, r7
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	f7f6 fff5 	bl	8000580 <__aeabi_dmul>
 8009596:	4632      	mov	r2, r6
 8009598:	463b      	mov	r3, r7
 800959a:	f7f6 fe3b 	bl	8000214 <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4620      	mov	r0, r4
 80095a4:	4629      	mov	r1, r5
 80095a6:	f7f6 fe33 	bl	8000210 <__aeabi_dsub>
 80095aa:	4642      	mov	r2, r8
 80095ac:	464b      	mov	r3, r9
 80095ae:	f7f6 fe2f 	bl	8000210 <__aeabi_dsub>
 80095b2:	460b      	mov	r3, r1
 80095b4:	4602      	mov	r2, r0
 80095b6:	493b      	ldr	r1, [pc, #236]	@ (80096a4 <__ieee754_pow+0xa6c>)
 80095b8:	2000      	movs	r0, #0
 80095ba:	f7f6 fe29 	bl	8000210 <__aeabi_dsub>
 80095be:	ec41 0b10 	vmov	d0, r0, r1
 80095c2:	ee10 3a90 	vmov	r3, s1
 80095c6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80095ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ce:	da30      	bge.n	8009632 <__ieee754_pow+0x9fa>
 80095d0:	4650      	mov	r0, sl
 80095d2:	f000 f9f9 	bl	80099c8 <scalbn>
 80095d6:	ec51 0b10 	vmov	r0, r1, d0
 80095da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095de:	f7ff bbd2 	b.w	8008d86 <__ieee754_pow+0x14e>
 80095e2:	4c31      	ldr	r4, [pc, #196]	@ (80096a8 <__ieee754_pow+0xa70>)
 80095e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d91a      	bls.n	8009622 <__ieee754_pow+0x9ea>
 80095ec:	4b2f      	ldr	r3, [pc, #188]	@ (80096ac <__ieee754_pow+0xa74>)
 80095ee:	440b      	add	r3, r1
 80095f0:	4303      	orrs	r3, r0
 80095f2:	d009      	beq.n	8009608 <__ieee754_pow+0x9d0>
 80095f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f8:	2200      	movs	r2, #0
 80095fa:	2300      	movs	r3, #0
 80095fc:	f7f7 fa32 	bl	8000a64 <__aeabi_dcmplt>
 8009600:	3800      	subs	r0, #0
 8009602:	bf18      	it	ne
 8009604:	2001      	movne	r0, #1
 8009606:	e42b      	b.n	8008e60 <__ieee754_pow+0x228>
 8009608:	4642      	mov	r2, r8
 800960a:	464b      	mov	r3, r9
 800960c:	f7f6 fe00 	bl	8000210 <__aeabi_dsub>
 8009610:	4632      	mov	r2, r6
 8009612:	463b      	mov	r3, r7
 8009614:	f7f7 fa3a 	bl	8000a8c <__aeabi_dcmpge>
 8009618:	2800      	cmp	r0, #0
 800961a:	d1eb      	bne.n	80095f4 <__ieee754_pow+0x9bc>
 800961c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80096bc <__ieee754_pow+0xa84>
 8009620:	e6f7      	b.n	8009412 <__ieee754_pow+0x7da>
 8009622:	469a      	mov	sl, r3
 8009624:	4b22      	ldr	r3, [pc, #136]	@ (80096b0 <__ieee754_pow+0xa78>)
 8009626:	459a      	cmp	sl, r3
 8009628:	f63f aef3 	bhi.w	8009412 <__ieee754_pow+0x7da>
 800962c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009630:	e715      	b.n	800945e <__ieee754_pow+0x826>
 8009632:	ec51 0b10 	vmov	r0, r1, d0
 8009636:	4619      	mov	r1, r3
 8009638:	e7cf      	b.n	80095da <__ieee754_pow+0x9a2>
 800963a:	491a      	ldr	r1, [pc, #104]	@ (80096a4 <__ieee754_pow+0xa6c>)
 800963c:	2000      	movs	r0, #0
 800963e:	f7ff bb18 	b.w	8008c72 <__ieee754_pow+0x3a>
 8009642:	2000      	movs	r0, #0
 8009644:	2100      	movs	r1, #0
 8009646:	f7ff bb14 	b.w	8008c72 <__ieee754_pow+0x3a>
 800964a:	4630      	mov	r0, r6
 800964c:	4639      	mov	r1, r7
 800964e:	f7ff bb10 	b.w	8008c72 <__ieee754_pow+0x3a>
 8009652:	460c      	mov	r4, r1
 8009654:	f7ff bb5e 	b.w	8008d14 <__ieee754_pow+0xdc>
 8009658:	2400      	movs	r4, #0
 800965a:	f7ff bb49 	b.w	8008cf0 <__ieee754_pow+0xb8>
 800965e:	bf00      	nop
 8009660:	00000000 	.word	0x00000000
 8009664:	3fe62e43 	.word	0x3fe62e43
 8009668:	fefa39ef 	.word	0xfefa39ef
 800966c:	3fe62e42 	.word	0x3fe62e42
 8009670:	0ca86c39 	.word	0x0ca86c39
 8009674:	be205c61 	.word	0xbe205c61
 8009678:	72bea4d0 	.word	0x72bea4d0
 800967c:	3e663769 	.word	0x3e663769
 8009680:	c5d26bf1 	.word	0xc5d26bf1
 8009684:	3ebbbd41 	.word	0x3ebbbd41
 8009688:	af25de2c 	.word	0xaf25de2c
 800968c:	3f11566a 	.word	0x3f11566a
 8009690:	16bebd93 	.word	0x16bebd93
 8009694:	3f66c16c 	.word	0x3f66c16c
 8009698:	5555553e 	.word	0x5555553e
 800969c:	3fc55555 	.word	0x3fc55555
 80096a0:	fff00000 	.word	0xfff00000
 80096a4:	3ff00000 	.word	0x3ff00000
 80096a8:	4090cbff 	.word	0x4090cbff
 80096ac:	3f6f3400 	.word	0x3f6f3400
 80096b0:	3fe00000 	.word	0x3fe00000
 80096b4:	652b82fe 	.word	0x652b82fe
 80096b8:	3c971547 	.word	0x3c971547
 80096bc:	4090cc00 	.word	0x4090cc00

080096c0 <fabs>:
 80096c0:	ec51 0b10 	vmov	r0, r1, d0
 80096c4:	4602      	mov	r2, r0
 80096c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80096ca:	ec43 2b10 	vmov	d0, r2, r3
 80096ce:	4770      	bx	lr

080096d0 <__ieee754_atan2f>:
 80096d0:	ee10 2a90 	vmov	r2, s1
 80096d4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80096d8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80096dc:	b510      	push	{r4, lr}
 80096de:	eef0 7a40 	vmov.f32	s15, s0
 80096e2:	d806      	bhi.n	80096f2 <__ieee754_atan2f+0x22>
 80096e4:	ee10 0a10 	vmov	r0, s0
 80096e8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80096ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80096f0:	d904      	bls.n	80096fc <__ieee754_atan2f+0x2c>
 80096f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80096f6:	eeb0 0a67 	vmov.f32	s0, s15
 80096fa:	bd10      	pop	{r4, pc}
 80096fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8009700:	d103      	bne.n	800970a <__ieee754_atan2f+0x3a>
 8009702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009706:	f000 b883 	b.w	8009810 <atanf>
 800970a:	1794      	asrs	r4, r2, #30
 800970c:	f004 0402 	and.w	r4, r4, #2
 8009710:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009714:	b943      	cbnz	r3, 8009728 <__ieee754_atan2f+0x58>
 8009716:	2c02      	cmp	r4, #2
 8009718:	d05e      	beq.n	80097d8 <__ieee754_atan2f+0x108>
 800971a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80097ec <__ieee754_atan2f+0x11c>
 800971e:	2c03      	cmp	r4, #3
 8009720:	bf08      	it	eq
 8009722:	eef0 7a47 	vmoveq.f32	s15, s14
 8009726:	e7e6      	b.n	80096f6 <__ieee754_atan2f+0x26>
 8009728:	b941      	cbnz	r1, 800973c <__ieee754_atan2f+0x6c>
 800972a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80097f0 <__ieee754_atan2f+0x120>
 800972e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80097f4 <__ieee754_atan2f+0x124>
 8009732:	2800      	cmp	r0, #0
 8009734:	bfb8      	it	lt
 8009736:	eef0 7a47 	vmovlt.f32	s15, s14
 800973a:	e7dc      	b.n	80096f6 <__ieee754_atan2f+0x26>
 800973c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009740:	d110      	bne.n	8009764 <__ieee754_atan2f+0x94>
 8009742:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009746:	f104 34ff 	add.w	r4, r4, #4294967295
 800974a:	d107      	bne.n	800975c <__ieee754_atan2f+0x8c>
 800974c:	2c02      	cmp	r4, #2
 800974e:	d846      	bhi.n	80097de <__ieee754_atan2f+0x10e>
 8009750:	4b29      	ldr	r3, [pc, #164]	@ (80097f8 <__ieee754_atan2f+0x128>)
 8009752:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009756:	edd3 7a00 	vldr	s15, [r3]
 800975a:	e7cc      	b.n	80096f6 <__ieee754_atan2f+0x26>
 800975c:	2c02      	cmp	r4, #2
 800975e:	d841      	bhi.n	80097e4 <__ieee754_atan2f+0x114>
 8009760:	4b26      	ldr	r3, [pc, #152]	@ (80097fc <__ieee754_atan2f+0x12c>)
 8009762:	e7f6      	b.n	8009752 <__ieee754_atan2f+0x82>
 8009764:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009768:	d0df      	beq.n	800972a <__ieee754_atan2f+0x5a>
 800976a:	1a5b      	subs	r3, r3, r1
 800976c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8009770:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009774:	da1a      	bge.n	80097ac <__ieee754_atan2f+0xdc>
 8009776:	2a00      	cmp	r2, #0
 8009778:	da01      	bge.n	800977e <__ieee754_atan2f+0xae>
 800977a:	313c      	adds	r1, #60	@ 0x3c
 800977c:	db19      	blt.n	80097b2 <__ieee754_atan2f+0xe2>
 800977e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009782:	f000 f919 	bl	80099b8 <fabsf>
 8009786:	f000 f843 	bl	8009810 <atanf>
 800978a:	eef0 7a40 	vmov.f32	s15, s0
 800978e:	2c01      	cmp	r4, #1
 8009790:	d012      	beq.n	80097b8 <__ieee754_atan2f+0xe8>
 8009792:	2c02      	cmp	r4, #2
 8009794:	d017      	beq.n	80097c6 <__ieee754_atan2f+0xf6>
 8009796:	2c00      	cmp	r4, #0
 8009798:	d0ad      	beq.n	80096f6 <__ieee754_atan2f+0x26>
 800979a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009800 <__ieee754_atan2f+0x130>
 800979e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097a2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009804 <__ieee754_atan2f+0x134>
 80097a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097aa:	e7a4      	b.n	80096f6 <__ieee754_atan2f+0x26>
 80097ac:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80097f0 <__ieee754_atan2f+0x120>
 80097b0:	e7ed      	b.n	800978e <__ieee754_atan2f+0xbe>
 80097b2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009808 <__ieee754_atan2f+0x138>
 80097b6:	e7ea      	b.n	800978e <__ieee754_atan2f+0xbe>
 80097b8:	ee17 3a90 	vmov	r3, s15
 80097bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80097c0:	ee07 3a90 	vmov	s15, r3
 80097c4:	e797      	b.n	80096f6 <__ieee754_atan2f+0x26>
 80097c6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009800 <__ieee754_atan2f+0x130>
 80097ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009804 <__ieee754_atan2f+0x134>
 80097d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097d6:	e78e      	b.n	80096f6 <__ieee754_atan2f+0x26>
 80097d8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009804 <__ieee754_atan2f+0x134>
 80097dc:	e78b      	b.n	80096f6 <__ieee754_atan2f+0x26>
 80097de:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800980c <__ieee754_atan2f+0x13c>
 80097e2:	e788      	b.n	80096f6 <__ieee754_atan2f+0x26>
 80097e4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009808 <__ieee754_atan2f+0x138>
 80097e8:	e785      	b.n	80096f6 <__ieee754_atan2f+0x26>
 80097ea:	bf00      	nop
 80097ec:	c0490fdb 	.word	0xc0490fdb
 80097f0:	3fc90fdb 	.word	0x3fc90fdb
 80097f4:	bfc90fdb 	.word	0xbfc90fdb
 80097f8:	08009d64 	.word	0x08009d64
 80097fc:	08009d58 	.word	0x08009d58
 8009800:	33bbbd2e 	.word	0x33bbbd2e
 8009804:	40490fdb 	.word	0x40490fdb
 8009808:	00000000 	.word	0x00000000
 800980c:	3f490fdb 	.word	0x3f490fdb

08009810 <atanf>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	ee10 5a10 	vmov	r5, s0
 8009816:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800981a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800981e:	eef0 7a40 	vmov.f32	s15, s0
 8009822:	d310      	bcc.n	8009846 <atanf+0x36>
 8009824:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009828:	d904      	bls.n	8009834 <atanf+0x24>
 800982a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800982e:	eeb0 0a67 	vmov.f32	s0, s15
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800996c <atanf+0x15c>
 8009838:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009970 <atanf+0x160>
 800983c:	2d00      	cmp	r5, #0
 800983e:	bfc8      	it	gt
 8009840:	eef0 7a47 	vmovgt.f32	s15, s14
 8009844:	e7f3      	b.n	800982e <atanf+0x1e>
 8009846:	4b4b      	ldr	r3, [pc, #300]	@ (8009974 <atanf+0x164>)
 8009848:	429c      	cmp	r4, r3
 800984a:	d810      	bhi.n	800986e <atanf+0x5e>
 800984c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009850:	d20a      	bcs.n	8009868 <atanf+0x58>
 8009852:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009978 <atanf+0x168>
 8009856:	ee30 7a07 	vadd.f32	s14, s0, s14
 800985a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800985e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009866:	dce2      	bgt.n	800982e <atanf+0x1e>
 8009868:	f04f 33ff 	mov.w	r3, #4294967295
 800986c:	e013      	b.n	8009896 <atanf+0x86>
 800986e:	f000 f8a3 	bl	80099b8 <fabsf>
 8009872:	4b42      	ldr	r3, [pc, #264]	@ (800997c <atanf+0x16c>)
 8009874:	429c      	cmp	r4, r3
 8009876:	d84f      	bhi.n	8009918 <atanf+0x108>
 8009878:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800987c:	429c      	cmp	r4, r3
 800987e:	d841      	bhi.n	8009904 <atanf+0xf4>
 8009880:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009884:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009888:	eea0 7a27 	vfma.f32	s14, s0, s15
 800988c:	2300      	movs	r3, #0
 800988e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009892:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800989c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009980 <atanf+0x170>
 80098a0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8009984 <atanf+0x174>
 80098a4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8009988 <atanf+0x178>
 80098a8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80098ac:	eee6 5a87 	vfma.f32	s11, s13, s14
 80098b0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800998c <atanf+0x17c>
 80098b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80098b8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009990 <atanf+0x180>
 80098bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80098c0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009994 <atanf+0x184>
 80098c4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80098c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009998 <atanf+0x188>
 80098cc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80098d0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800999c <atanf+0x18c>
 80098d4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80098d8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80099a0 <atanf+0x190>
 80098dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80098e0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80099a4 <atanf+0x194>
 80098e4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80098e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80099a8 <atanf+0x198>
 80098ec:	eea5 7a26 	vfma.f32	s14, s10, s13
 80098f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80098f4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80098f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80098fc:	d121      	bne.n	8009942 <atanf+0x132>
 80098fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009902:	e794      	b.n	800982e <atanf+0x1e>
 8009904:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009908:	ee30 7a67 	vsub.f32	s14, s0, s15
 800990c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009910:	2301      	movs	r3, #1
 8009912:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009916:	e7be      	b.n	8009896 <atanf+0x86>
 8009918:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <atanf+0x19c>)
 800991a:	429c      	cmp	r4, r3
 800991c:	d80b      	bhi.n	8009936 <atanf+0x126>
 800991e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009926:	eea0 7a27 	vfma.f32	s14, s0, s15
 800992a:	2302      	movs	r3, #2
 800992c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009934:	e7af      	b.n	8009896 <atanf+0x86>
 8009936:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800993a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800993e:	2303      	movs	r3, #3
 8009940:	e7a9      	b.n	8009896 <atanf+0x86>
 8009942:	4a1b      	ldr	r2, [pc, #108]	@ (80099b0 <atanf+0x1a0>)
 8009944:	491b      	ldr	r1, [pc, #108]	@ (80099b4 <atanf+0x1a4>)
 8009946:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800994a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800994e:	edd3 6a00 	vldr	s13, [r3]
 8009952:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009956:	2d00      	cmp	r5, #0
 8009958:	ee37 7a67 	vsub.f32	s14, s14, s15
 800995c:	edd2 7a00 	vldr	s15, [r2]
 8009960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009964:	bfb8      	it	lt
 8009966:	eef1 7a67 	vneglt.f32	s15, s15
 800996a:	e760      	b.n	800982e <atanf+0x1e>
 800996c:	bfc90fdb 	.word	0xbfc90fdb
 8009970:	3fc90fdb 	.word	0x3fc90fdb
 8009974:	3edfffff 	.word	0x3edfffff
 8009978:	7149f2ca 	.word	0x7149f2ca
 800997c:	3f97ffff 	.word	0x3f97ffff
 8009980:	3c8569d7 	.word	0x3c8569d7
 8009984:	3d4bda59 	.word	0x3d4bda59
 8009988:	bd6ef16b 	.word	0xbd6ef16b
 800998c:	3d886b35 	.word	0x3d886b35
 8009990:	3dba2e6e 	.word	0x3dba2e6e
 8009994:	3e124925 	.word	0x3e124925
 8009998:	3eaaaaab 	.word	0x3eaaaaab
 800999c:	bd15a221 	.word	0xbd15a221
 80099a0:	bd9d8795 	.word	0xbd9d8795
 80099a4:	bde38e38 	.word	0xbde38e38
 80099a8:	be4ccccd 	.word	0xbe4ccccd
 80099ac:	401bffff 	.word	0x401bffff
 80099b0:	08009d80 	.word	0x08009d80
 80099b4:	08009d70 	.word	0x08009d70

080099b8 <fabsf>:
 80099b8:	ee10 3a10 	vmov	r3, s0
 80099bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099c0:	ee00 3a10 	vmov	s0, r3
 80099c4:	4770      	bx	lr
	...

080099c8 <scalbn>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	ec55 4b10 	vmov	r4, r5, d0
 80099ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80099d2:	4606      	mov	r6, r0
 80099d4:	462b      	mov	r3, r5
 80099d6:	b991      	cbnz	r1, 80099fe <scalbn+0x36>
 80099d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80099dc:	4323      	orrs	r3, r4
 80099de:	d03d      	beq.n	8009a5c <scalbn+0x94>
 80099e0:	4b35      	ldr	r3, [pc, #212]	@ (8009ab8 <scalbn+0xf0>)
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	2200      	movs	r2, #0
 80099e8:	f7f6 fdca 	bl	8000580 <__aeabi_dmul>
 80099ec:	4b33      	ldr	r3, [pc, #204]	@ (8009abc <scalbn+0xf4>)
 80099ee:	429e      	cmp	r6, r3
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	da0f      	bge.n	8009a16 <scalbn+0x4e>
 80099f6:	a328      	add	r3, pc, #160	@ (adr r3, 8009a98 <scalbn+0xd0>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	e01e      	b.n	8009a3c <scalbn+0x74>
 80099fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d10b      	bne.n	8009a1e <scalbn+0x56>
 8009a06:	4622      	mov	r2, r4
 8009a08:	4620      	mov	r0, r4
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	f7f6 fc02 	bl	8000214 <__adddf3>
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	e022      	b.n	8009a5c <scalbn+0x94>
 8009a16:	460b      	mov	r3, r1
 8009a18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a1c:	3936      	subs	r1, #54	@ 0x36
 8009a1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009a22:	4296      	cmp	r6, r2
 8009a24:	dd0d      	ble.n	8009a42 <scalbn+0x7a>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	a11d      	add	r1, pc, #116	@ (adr r1, 8009aa0 <scalbn+0xd8>)
 8009a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2e:	da02      	bge.n	8009a36 <scalbn+0x6e>
 8009a30:	a11d      	add	r1, pc, #116	@ (adr r1, 8009aa8 <scalbn+0xe0>)
 8009a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a36:	a31a      	add	r3, pc, #104	@ (adr r3, 8009aa0 <scalbn+0xd8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fda0 	bl	8000580 <__aeabi_dmul>
 8009a40:	e7e6      	b.n	8009a10 <scalbn+0x48>
 8009a42:	1872      	adds	r2, r6, r1
 8009a44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	dcec      	bgt.n	8009a26 <scalbn+0x5e>
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	dd08      	ble.n	8009a62 <scalbn+0x9a>
 8009a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009a54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a5c:	ec45 4b10 	vmov	d0, r4, r5
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
 8009a62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009a66:	da08      	bge.n	8009a7a <scalbn+0xb2>
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009a98 <scalbn+0xd0>)
 8009a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a70:	dac1      	bge.n	80099f6 <scalbn+0x2e>
 8009a72:	a10f      	add	r1, pc, #60	@ (adr r1, 8009ab0 <scalbn+0xe8>)
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	e7bd      	b.n	80099f6 <scalbn+0x2e>
 8009a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009a7e:	3236      	adds	r2, #54	@ 0x36
 8009a80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a88:	4620      	mov	r0, r4
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <scalbn+0xf8>)
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	2200      	movs	r2, #0
 8009a90:	e7d4      	b.n	8009a3c <scalbn+0x74>
 8009a92:	bf00      	nop
 8009a94:	f3af 8000 	nop.w
 8009a98:	c2f8f359 	.word	0xc2f8f359
 8009a9c:	01a56e1f 	.word	0x01a56e1f
 8009aa0:	8800759c 	.word	0x8800759c
 8009aa4:	7e37e43c 	.word	0x7e37e43c
 8009aa8:	8800759c 	.word	0x8800759c
 8009aac:	fe37e43c 	.word	0xfe37e43c
 8009ab0:	c2f8f359 	.word	0xc2f8f359
 8009ab4:	81a56e1f 	.word	0x81a56e1f
 8009ab8:	43500000 	.word	0x43500000
 8009abc:	ffff3cb0 	.word	0xffff3cb0
 8009ac0:	3c900000 	.word	0x3c900000

08009ac4 <with_errno>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	ed2d 8b02 	vpush	{d8}
 8009aca:	eeb0 8a40 	vmov.f32	s16, s0
 8009ace:	eef0 8a60 	vmov.f32	s17, s1
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	f7fe ff8e 	bl	80089f4 <__errno>
 8009ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8009adc:	eef0 0a68 	vmov.f32	s1, s17
 8009ae0:	ecbd 8b02 	vpop	{d8}
 8009ae4:	6004      	str	r4, [r0, #0]
 8009ae6:	bd10      	pop	{r4, pc}

08009ae8 <xflow>:
 8009ae8:	4603      	mov	r3, r0
 8009aea:	b507      	push	{r0, r1, r2, lr}
 8009aec:	ec51 0b10 	vmov	r0, r1, d0
 8009af0:	b183      	cbz	r3, 8009b14 <xflow+0x2c>
 8009af2:	4602      	mov	r2, r0
 8009af4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009af8:	e9cd 2300 	strd	r2, r3, [sp]
 8009afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b00:	f7f6 fd3e 	bl	8000580 <__aeabi_dmul>
 8009b04:	ec41 0b10 	vmov	d0, r0, r1
 8009b08:	2022      	movs	r0, #34	@ 0x22
 8009b0a:	b003      	add	sp, #12
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	f7ff bfd8 	b.w	8009ac4 <with_errno>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	e7ee      	b.n	8009af8 <xflow+0x10>
 8009b1a:	0000      	movs	r0, r0
 8009b1c:	0000      	movs	r0, r0
	...

08009b20 <__math_uflow>:
 8009b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b28 <__math_uflow+0x8>
 8009b24:	f7ff bfe0 	b.w	8009ae8 <xflow>
 8009b28:	00000000 	.word	0x00000000
 8009b2c:	10000000 	.word	0x10000000

08009b30 <__math_oflow>:
 8009b30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b38 <__math_oflow+0x8>
 8009b34:	f7ff bfd8 	b.w	8009ae8 <xflow>
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	70000000 	.word	0x70000000

08009b40 <__ieee754_sqrt>:
 8009b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	4a68      	ldr	r2, [pc, #416]	@ (8009ce8 <__ieee754_sqrt+0x1a8>)
 8009b46:	ec55 4b10 	vmov	r4, r5, d0
 8009b4a:	43aa      	bics	r2, r5
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	4621      	mov	r1, r4
 8009b50:	d110      	bne.n	8009b74 <__ieee754_sqrt+0x34>
 8009b52:	4622      	mov	r2, r4
 8009b54:	4620      	mov	r0, r4
 8009b56:	4629      	mov	r1, r5
 8009b58:	f7f6 fd12 	bl	8000580 <__aeabi_dmul>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4620      	mov	r0, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	f7f6 fb56 	bl	8000214 <__adddf3>
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	ec45 4b10 	vmov	d0, r4, r5
 8009b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	2d00      	cmp	r5, #0
 8009b76:	dc0e      	bgt.n	8009b96 <__ieee754_sqrt+0x56>
 8009b78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009b7c:	4322      	orrs	r2, r4
 8009b7e:	d0f5      	beq.n	8009b6c <__ieee754_sqrt+0x2c>
 8009b80:	b19d      	cbz	r5, 8009baa <__ieee754_sqrt+0x6a>
 8009b82:	4622      	mov	r2, r4
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fb42 	bl	8000210 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	f7f6 fe20 	bl	80007d4 <__aeabi_ddiv>
 8009b94:	e7e8      	b.n	8009b68 <__ieee754_sqrt+0x28>
 8009b96:	152a      	asrs	r2, r5, #20
 8009b98:	d115      	bne.n	8009bc6 <__ieee754_sqrt+0x86>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	e009      	b.n	8009bb2 <__ieee754_sqrt+0x72>
 8009b9e:	0acb      	lsrs	r3, r1, #11
 8009ba0:	3a15      	subs	r2, #21
 8009ba2:	0549      	lsls	r1, r1, #21
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0fa      	beq.n	8009b9e <__ieee754_sqrt+0x5e>
 8009ba8:	e7f7      	b.n	8009b9a <__ieee754_sqrt+0x5a>
 8009baa:	462a      	mov	r2, r5
 8009bac:	e7fa      	b.n	8009ba4 <__ieee754_sqrt+0x64>
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	02dc      	lsls	r4, r3, #11
 8009bb4:	d5fb      	bpl.n	8009bae <__ieee754_sqrt+0x6e>
 8009bb6:	1e44      	subs	r4, r0, #1
 8009bb8:	1b12      	subs	r2, r2, r4
 8009bba:	f1c0 0420 	rsb	r4, r0, #32
 8009bbe:	fa21 f404 	lsr.w	r4, r1, r4
 8009bc2:	4323      	orrs	r3, r4
 8009bc4:	4081      	lsls	r1, r0
 8009bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bd2:	07d2      	lsls	r2, r2, #31
 8009bd4:	bf5c      	itt	pl
 8009bd6:	005b      	lslpl	r3, r3, #1
 8009bd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009be0:	bf58      	it	pl
 8009be2:	0049      	lslpl	r1, r1, #1
 8009be4:	2600      	movs	r6, #0
 8009be6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009bea:	106d      	asrs	r5, r5, #1
 8009bec:	0049      	lsls	r1, r1, #1
 8009bee:	2016      	movs	r0, #22
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009bf6:	1917      	adds	r7, r2, r4
 8009bf8:	429f      	cmp	r7, r3
 8009bfa:	bfde      	ittt	le
 8009bfc:	193a      	addle	r2, r7, r4
 8009bfe:	1bdb      	suble	r3, r3, r7
 8009c00:	1936      	addle	r6, r6, r4
 8009c02:	0fcf      	lsrs	r7, r1, #31
 8009c04:	3801      	subs	r0, #1
 8009c06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009c0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009c12:	d1f0      	bne.n	8009bf6 <__ieee754_sqrt+0xb6>
 8009c14:	4604      	mov	r4, r0
 8009c16:	2720      	movs	r7, #32
 8009c18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	eb00 0e0c 	add.w	lr, r0, ip
 8009c22:	db02      	blt.n	8009c2a <__ieee754_sqrt+0xea>
 8009c24:	d113      	bne.n	8009c4e <__ieee754_sqrt+0x10e>
 8009c26:	458e      	cmp	lr, r1
 8009c28:	d811      	bhi.n	8009c4e <__ieee754_sqrt+0x10e>
 8009c2a:	f1be 0f00 	cmp.w	lr, #0
 8009c2e:	eb0e 000c 	add.w	r0, lr, ip
 8009c32:	da42      	bge.n	8009cba <__ieee754_sqrt+0x17a>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	db40      	blt.n	8009cba <__ieee754_sqrt+0x17a>
 8009c38:	f102 0801 	add.w	r8, r2, #1
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	458e      	cmp	lr, r1
 8009c40:	bf88      	it	hi
 8009c42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009c46:	eba1 010e 	sub.w	r1, r1, lr
 8009c4a:	4464      	add	r4, ip
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009c52:	3f01      	subs	r7, #1
 8009c54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009c58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009c60:	d1dc      	bne.n	8009c1c <__ieee754_sqrt+0xdc>
 8009c62:	4319      	orrs	r1, r3
 8009c64:	d01b      	beq.n	8009c9e <__ieee754_sqrt+0x15e>
 8009c66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009cec <__ieee754_sqrt+0x1ac>
 8009c6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009cf0 <__ieee754_sqrt+0x1b0>
 8009c6e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009c72:	e9db 2300 	ldrd	r2, r3, [fp]
 8009c76:	f7f6 facb 	bl	8000210 <__aeabi_dsub>
 8009c7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 fef7 	bl	8000a78 <__aeabi_dcmple>
 8009c8a:	b140      	cbz	r0, 8009c9e <__ieee754_sqrt+0x15e>
 8009c8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009c90:	e9da 0100 	ldrd	r0, r1, [sl]
 8009c94:	e9db 2300 	ldrd	r2, r3, [fp]
 8009c98:	d111      	bne.n	8009cbe <__ieee754_sqrt+0x17e>
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	463c      	mov	r4, r7
 8009c9e:	1072      	asrs	r2, r6, #1
 8009ca0:	0863      	lsrs	r3, r4, #1
 8009ca2:	07f1      	lsls	r1, r6, #31
 8009ca4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009ca8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009cac:	bf48      	it	mi
 8009cae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009cb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	e756      	b.n	8009b68 <__ieee754_sqrt+0x28>
 8009cba:	4690      	mov	r8, r2
 8009cbc:	e7be      	b.n	8009c3c <__ieee754_sqrt+0xfc>
 8009cbe:	f7f6 faa9 	bl	8000214 <__adddf3>
 8009cc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	f7f6 fec9 	bl	8000a64 <__aeabi_dcmplt>
 8009cd2:	b120      	cbz	r0, 8009cde <__ieee754_sqrt+0x19e>
 8009cd4:	1ca0      	adds	r0, r4, #2
 8009cd6:	bf08      	it	eq
 8009cd8:	3601      	addeq	r6, #1
 8009cda:	3402      	adds	r4, #2
 8009cdc:	e7df      	b.n	8009c9e <__ieee754_sqrt+0x15e>
 8009cde:	1c63      	adds	r3, r4, #1
 8009ce0:	f023 0401 	bic.w	r4, r3, #1
 8009ce4:	e7db      	b.n	8009c9e <__ieee754_sqrt+0x15e>
 8009ce6:	bf00      	nop
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	200000d0 	.word	0x200000d0
 8009cf0:	200000c8 	.word	0x200000c8

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
